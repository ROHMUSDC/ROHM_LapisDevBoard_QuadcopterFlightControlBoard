;; Compile Options : /TML610112 /MS /near /Icommon /Imain /Iirq /Itimer /Iclock /Itbc /Iuart /Ii2c /SS 256 /SD /Oa /Ot /W 3 /Wc /Fa_output\_obj\ 
;; Version Number  : Ver.3.41.8
;; File Name       : main.c

	type (ML610112) 
	model small, near
	$$NVARmain segment data 2h #0h
	$$NINITVAR segment data 2h #0h
	$$NINITTAB segment table 2h any
	$$AccelGyroDataReady_ISR$main segment code 2h #0h
	$$AccelSensorControlPID_D$main segment code 2h #0h
	$$AccelSensorControlPID_I$main segment code 2h #0h
	$$AccelSensorControlPID_P$main segment code 2h #0h
	$$CalibrateAccel$main segment code 2h #0h
	$$CalibrateGyro$main segment code 2h #0h
	$$CalibrateMotors$main segment code 2h #0h
	$$CheckSafetyLimit$main segment code 2h #0h
	$$CheckSafetyLimitUnscaled$main segment code 2h #0h
	$$ClearVariables$main segment code 2h #0h
	$$DistanceSensorControl$main segment code 2h #0h
	$$ESC1_PWM$main segment code 2h #0h
	$$ESC2_PWM$main segment code 2h #0h
	$$ESC3_PWM$main segment code 2h #0h
	$$ESC4_PWM$main segment code 2h #0h
	$$Emit_Warning$main segment code 2h #0h
	$$Get_AccGyroData$main segment code 2h #0h
	$$Get_PingData$main segment code 2h #0h
	$$Get_RangeData$main segment code 2h #0h
	$$Initialization$main segment code 2h #0h
	$$InitializeTone$main segment code 2h #0h
	$$NOP$main segment code 2h #0h
	$$NOP1000$main segment code 2h #0h
	$$NOPms$main segment code 2h #0h
	$$NOPus$main segment code 2h #0h
	$$PortA_Digital_Inputs$main segment code 2h #0h
	$$PortA_Low$main segment code 2h #0h
	$$PortB_Low$main segment code 2h #0h
	$$PortC_Low$main segment code 2h #0h
	$$PortD_Low$main segment code 2h #0h
	$$RampUpMotorTest$main segment code 2h #0h
	$$RangeSensorControlPID$main segment code 2h #0h
	$$ReturnAccelData$main segment code 2h #0h
	$$ReturnMagData$main segment code 2h #0h
	$$ReturnSensorData$main segment code 2h #0h
	$$Run_AccGyroCF$main segment code 2h #0h
	$$SerialOutCoefficients$main segment code 2h #0h
	$$SetOSC$main segment code 2h #0h
	$$Shutdown$main segment code 2h #0h
	$$SoftStart$main segment code 2h #0h
	$$TAB$$S224$main segment table 2h #0h
	$$TAB$$S237$main segment table 2h #0h
	$$TAB$$S250$main segment table 2h #0h
	$$TAB$$S268$main segment table 2h #0h
	$$TAB$$S297$main segment table 2h #0h
	$$TAB$$S313$main segment table 2h #0h
	$$TAB$$S344$main segment table 2h #0h
	$$TAB$$S369$main segment table 2h #0h
	$$TAB$$S394$main segment table 2h #0h
	$$TAB$$S416$main segment table 2h #0h
	$$TAB$$S472$main segment table 2h #0h
	$$TAB_uartSetParam$main segment table 2h #0h
	$$TBC_ISR$main segment code 2h #0h
	$$TMR89_ISR$main segment code 2h #0h
	$$UARTTunePID$main segment code 2h #0h
	$$_funcI2CFin$main segment code 2h #0h
	$$_funcUartFin$main segment code 2h #0h
	$$_intI2c$main segment code 2h #0h
	$$_intUart$main segment code 2h #0h
	$$analog_comparator$main segment code 2h #0h
	$$approx_arctan2$main segment code 2h #0h
	$$checkI2C$main segment code 2h #0h
	$$main$main segment code 2h #0h
	$$main_clrWDT$main segment code 2h #0h
	$$main_reqNotHalt$main segment code 2h #0h
	STACKSEG 0100h
CVERSION 3.41.8
CGLOBAL 01H 03H 0000H "AccelSensorControlPID_D" 08H 02H 0F0H 00H 81H 1aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "AccelSensorControlPID_I" 08H 02H 0EFH 00H 81H 16H 00H 00H 07H
CGLOBAL 01H 03H 0000H "AccelSensorControlPID_P" 08H 02H 0EEH 00H 81H 0eH 00H 00H 07H
CGLOBAL 01H 03H 0000H "Shutdown" 08H 02H 0F4H 00H 81H 02H 00H 00H 07H
CSGLOBAL 03H 0000H "TBC_ISR" 08H 02H 00H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "NOPms" 08H 02H 0FCH 00H 81H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "NOPus" 08H 02H 0FDH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "approx_arctan2" 08H 02H 0FFH 00H 83H 40H 00H 00H 03H
CGLOBAL 01H 03H 0000H "checkI2C" 08H 02H 0F7H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "main_clrWDT" 08H 02H 0CEH 00H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "_funcUartFin" 08H 02H 0F5H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "main_reqNotHalt" 08H 02H 0F8H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ReturnMagData" 08H 02H 0E3H 00H 81H 0eH 00H 00H 07H
CGLOBAL 01H 03H 0000H "DistanceSensorControl" 08H 02H 0EBH 00H 81H 0aH 00H 00H 07H
CSGLOBAL 03H 0000H "Initialization" 08H 02H 0CFH 00H 81H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "RangeSensorControlPID" 08H 02H 0F1H 00H 81H 20H 00H 00H 07H
CGLOBAL 01H 03H 0000H "PortA_Digital_Inputs" 08H 02H 0D6H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ESC2_PWM" 08H 02H 0D8H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "Get_AccGyroData" 08H 02H 0DDH 00H 81H 10H 00H 00H 07H
CGLOBAL 01H 03H 0000H "main" 08H 02H 05H 01H 80H 00H 00H 00H 01H
CSGLOBAL 03H 0000H "_intUart" 08H 02H 0F9H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ClearVariables" 08H 02H 0E0H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "PortD_Low" 08H 02H 0D5H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "NOP1000" 08H 02H 0FEH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ESC1_PWM" 08H 02H 0D7H 00H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "_intI2c" 08H 02H 0FAH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "CheckSafetyLimitUnscaled" 08H 02H 0F3H 00H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "SetOSC" 08H 02H 0D0H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "CalibrateAccel" 08H 02H 0E6H 00H 81H 0cH 00H 00H 07H
CSGLOBAL 03H 0000H "AccelGyroDataReady_ISR" 08H 02H 02H 01H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "Get_RangeData" 08H 02H 0DBH 00H 81H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "PortC_Low" 08H 02H 0D4H 00H 80H 00H 00H 00H 07H
CSGLOBAL 03H 0000H "TMR89_ISR" 08H 02H 01H 01H 81H 0aH 00H 00H 07H
CGLOBAL 01H 03H 0000H "CheckSafetyLimit" 08H 02H 0F2H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ESC4_PWM" 08H 02H 0DAH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "UARTTunePID" 08H 02H 0E8H 00H 81H 32H 00H 00H 07H
CGLOBAL 01H 03H 0000H "Get_PingData" 08H 02H 0DCH 00H 81H 16H 00H 00H 07H
CGLOBAL 01H 03H 0000H "SerialOutCoefficients" 08H 02H 0E7H 00H 81H 32H 00H 00H 07H
CGLOBAL 01H 03H 0000H "PortB_Low" 08H 02H 0D3H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "CalibrateMotors" 08H 02H 0E4H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ReturnAccelData" 08H 02H 0E2H 00H 81H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "ESC3_PWM" 08H 02H 0D9H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "CalibrateGyro" 08H 02H 0E5H 00H 81H 0cH 00H 00H 07H
CGLOBAL 01H 03H 0000H "RampUpMotorTest" 08H 02H 0EAH 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "NOP" 08H 02H 0FBH 00H 81H 08H 00H 00H 07H
CGLOBAL 01H 03H 0000H "Emit_Warning" 08H 02H 03H 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 03H 0000H "InitializeTone" 08H 02H 04H 01H 81H 04H 00H 00H 07H
CGLOBAL 01H 03H 0000H "PortA_Low" 08H 02H 0D2H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "analog_comparator" 08H 02H 0D1H 00H 80H 00H 00H 00H 07H
CGLOBAL 01H 03H 0000H "Run_AccGyroCF" 08H 02H 0DEH 00H 83H 20H 00H 00H 07H
CSGLOBAL 03H 0000H "_funcI2CFin" 08H 02H 0F6H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "SoftStart" 08H 02H 0E9H 00H 81H 02H 00H 00H 07H
CGLOBAL 01H 03H 0000H "ReturnSensorData" 08H 02H 0E1H 00H 81H 2eH 00H 00H 07H
CSTRUCTTAG 0000H 0000H 0005H 000CH 00000016H "_Notag"
CSTRUCTMEM 42H 00000002H 00000000H "_Mode" 02H 00H 08H
CSTRUCTMEM 43H 00000002H 00000002H "_Handle" 02H 00H 08H
CSTRUCTMEM 42H 00000002H 00000004H "_Buf" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000006H "_Bend" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000008H "_Next" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000AH "_Rend" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000CH "_Rsave" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 0000000EH "_Wend" 04H 03H 00H 00H 00H
CSTRUCTMEM 42H 00000002H 00000010H "_Back" 05H 01H 02H 00H 00H 00H
CSTRUCTMEM 42H 00000001H 00000012H "_Cbuf" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000013H "_Nback" 02H 00H 00H
CSTRUCTMEM 43H 00000002H 00000014H "_Tmpnam" 04H 03H 00H 00H 00H
CSTRUCTTAG 0000H 0000H 0004H 0001H 00000004H "_Notag"
CSTRUCTMEM 42H 00000004H 00000000H "_Off" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0003H 0006H 0000000AH "_Notag"
CSTRUCTMEM 42H 00000004H 00000000H "br" 02H 00H 02H
CSTRUCTMEM 42H 00000001H 00000004H "lg" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000005H "pt" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000006H "stp" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000007H "neg" 02H 00H 00H
CSTRUCTMEM 42H 00000001H 00000008H "dir" 02H 00H 00H
CSTRUCTTAG 0000H 0000H 0002H 0002H 00000008H "_Notag"
CSTRUCTMEM 43H 00000004H 00000000H "quot" 02H 00H 02H
CSTRUCTMEM 43H 00000004H 00000004H "rem" 02H 00H 02H
CSTRUCTTAG 0000H 0000H 0001H 0002H 00000004H "_Notag"
CSTRUCTMEM 43H 00000002H 00000000H "quot" 02H 00H 01H
CSTRUCTMEM 43H 00000002H 00000002H "rem" 02H 00H 01H
CSTRUCTTAG 0000H 0000H 0000H 0008H 00000001H "_Notag"
CSTRUCTMEM 52H 00000001H 00000000H "b0" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000001H "b1" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000002H "b2" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000003H "b3" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000004H "b4" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000005H "b5" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000006H "b6" 02H 00H 00H
CSTRUCTMEM 52H 00000001H 00000007H "b7" 02H 00H 00H
CUNIONTAG 0000H 0000H 0006H 0002H 00000008H "_Notag"
CUNIONMEM 42H 00000008H "_W" 05H 01H 04H 00H 00H 08H
CUNIONMEM 43H 00000008H "_D" 02H 00H 04H
CTYPEDEF 0000H 0000H 01H "_Dconst" 04H 00H 06H 06H 00H
CTYPEDEF 0000H 0000H 43H "_Ptrdifft" 02H 00H 01H
CTYPEDEF 0000H 0000H 42H "_Sizet" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "tUartSetParam" 04H 00H 05H 03H 00H
CTYPEDEF 0000H 0000H 42H "size_t" 02H 00H 01H
CTYPEDEF 0000H 0000H 43H "cbfUart" 0AH 03H 00H 02H 2EH 00H 00H 00H 00H 00H 07H
CTYPEDEF 0000H 0000H 43H "fpos_t" 04H 00H 05H 04H 00H
CTYPEDEF 0000H 0000H 43H "cbfI2c" 0AH 03H 00H 02H 43H 00H 00H 00H 00H 00H 07H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nf" 08H 02H 01H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_nn" 08H 02H 00H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_ff" 08H 02H 03H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 03H "_Cmpfun_fn" 08H 02H 02H 00H 00H 00H 00H 00H 01H
CTYPEDEF 0000H 0000H 43H "FILE" 04H 00H 05H 05H 00H
CTYPEDEF 0000H 0000H 43H "div_t" 04H 00H 05H 01H 00H
CTYPEDEF 0000H 0000H 43H "ldiv_t" 04H 00H 05H 02H 00H
CTYPEDEF 0000H 0000H 43H "_BYTE_FIELD" 04H 00H 05H 00H 00H
CSGLOBAL 43H 0004H "CF_LPF" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_OpposingPole" 02H 00H 03H
CSGLOBAL 42H 0001H "AccGyro_GyroAccel_SMPRTDIV" 02H 00H 00H
CSGLOBAL 42H 0008H "RecWorld" 05H 01H 08H 00H 00H 00H
CGLOBAL 00H 42H 0001H "_flgUartFin" 02H 00H 00H
CSGLOBAL 42H 0002H "Accel_PID_Motor4" 02H 00H 01H
CSGLOBAL 42H 0002H "Accel_PID_Motor1" 02H 00H 01H
CSGLOBAL 42H 0002H "Accel_PID_Motor2" 02H 00H 01H
CSGLOBAL 42H 0002H "Accel_PID_Motor3" 02H 00H 01H
CSGLOBAL 42H 0002H "PWMIdleDutyRun" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_YPitch_high" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_CWThres" 02H 00H 03H
CSGLOBAL 43H 0004H "Ping_out" 02H 00H 03H
CSGLOBAL 42H 00C8H "SensorReturn" 05H 01H 0C8H 00H 00H 00H
CSGLOBAL 42H 0001H "PWMCounter" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_PWRMGMT1REG_Contents" 02H 00H 00H
CSGLOBAL 42H 0001H "Accel_SavIndex" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_ReadData" 02H 00H 00H
CSGLOBAL 43H 0004H "CF_Gyro_YPitch" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_Xout" 02H 00H 03H
CSGLOBAL 42H 0002H "PWMPeriod" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_YPitch_low" 02H 00H 03H
CSGLOBAL 43H 0004H "Gyro_Zout" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_XRollErrPrev" 02H 00H 03H
CSGLOBAL 42H 0002H "Range_out" 02H 00H 01H
CSGLOBAL 43H 0004H "Range_PIDError" 02H 00H 03H
CSGLOBAL 43H 0004H "Gyro_Yout" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_PIDOutput" 02H 00H 03H
CSGLOBAL 42H 0006H "NewVar_Str" 05H 01H 06H 00H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_AccelConfig" 02H 00H 00H
CSGLOBAL 43H 0004H "Accel_PID_XRolldErr" 02H 00H 03H
CSGLOBAL 43H 0002H "Accel_PID_PBounds_Var_Pos" 02H 00H 01H
CSGLOBAL 42H 0002H "PWMLowerDutyLimitCalib" 02H 00H 01H
CSGLOBAL 43H 0004H "Accel_PID_XRoll_ki" 02H 00H 03H
CGLOBAL 01H 42H 0001H "Accel_PID_XYChangeFlag" 02H 00H 00H
CSGLOBAL 43H 0004H "Accel_PID_XRoll_kd" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitchError" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_XRoll_kp" 02H 00H 03H
CSGLOBAL 42H 0001H "AccGyro_CF_FlagCounter" 02H 00H 00H
CSGLOBAL 43H 0002H "Accel_PID_PBounds_Var_Neg" 02H 00H 01H
CSGLOBAL 43H 0004H "Accel_Zout_Avg" 02H 00H 03H
CSGLOBAL 42H 0001H "AccGyro_ReadFlag" 02H 00H 00H
CSGLOBAL 43H 0004H "Accel_Yout_Avg" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_Xout_Avg" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_PIDSetpoint" 02H 00H 03H
CSGLOBAL 42H 0001H "Mag_ModeReg_Contents" 02H 00H 00H
CSGLOBAL 43H 0004H "NewVar" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_Yout" 02H 00H 03H
CSGLOBAL 42H 0001H "IDFlag" 02H 00H 00H
CSGLOBAL 43H 0004H "CF_Gyro_Counter" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_XRoll" 02H 00H 03H
CSGLOBAL 42H 0002H "Mag_MotorStep" 02H 00H 01H
CSGLOBAL 42H 0001H "Accel_PID_DFlag" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_GyroAccelLPF_SMPRTDIVCo" 02H 00H 00H
CSGLOBAL 43H 0004H "CF_Accel_ForceMagApprox" 02H 00H 03H
CSGLOBAL 42H 0002H "PWMtoRPMOffset_Mot2" 02H 00H 01H
CSGLOBAL 42H 0002H "PWMtoRPMOffset_Mot3" 02H 00H 01H
CSGLOBAL 42H 0002H "PWMtoRPMOffset_Mot4" 02H 00H 01H
CSGLOBAL 43H 0004H "Mag_Zout" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_XRollErrSum" 02H 00H 03H
CSGLOBAL 42H 0001H "Accel_PID_GoCounter" 02H 00H 00H
CSGLOBAL 43H 0004H "CF_StdDev_Mtmp_X" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_StdDev_Mtmp_Y" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_StdDev_K" 02H 00H 03H
CSGLOBAL 42H 000EH "AccGyro_Data" 05H 01H 0EH 00H 00H 00H
CSGLOBAL 43H 0004H "CF_XRoll_avg" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitch_kp" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitch_ki" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitch_kd" 02H 00H 03H
CSGLOBAL 42H 0001H "PWMflag" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_INTENABLEReg_contents" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_GyroConfig_Contents" 02H 00H 00H
CSGLOBAL 42H 0001H "HMC5883Address" 02H 00H 00H
CSGLOBAL 43H 0004H "Accel_PID_XRollError" 02H 00H 03H
CSGLOBAL 42H 0001H "PWMSensorResPerInc" 02H 00H 00H
CSGLOBAL 43H 0004H "CF_Gyro_XRoll" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitchdErr" 02H 00H 03H
CSGLOBAL 42H 0001H "MPU6050Address" 02H 00H 00H
CSGLOBAL 42H 0002H "PWMUpperLowerDiff" 02H 00H 01H
CSGLOBAL 01H 000AH "_uartSetParam" 04H 00H 05H 03H 00H
CSGLOBAL 43H 0004H "Range_PIDdErr" 02H 00H 03H
CSGLOBAL 42H 0002H "PWMSafeDuty" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_StdDev_M_X" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_StdDev_M_Y" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitchErrPrev" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_XRoll_low" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_StdDev_S_X" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_StdDev_S_Y" 02H 00H 03H
CSGLOBAL 42H 0001H "Mag_ModeReg" 02H 00H 00H
CSGLOBAL 42H 0001H "Mag_ConfigB_Contents" 02H 00H 00H
CSGLOBAL 43H 0004H "Temp_out" 02H 00H 03H
CSGLOBAL 42H 0001H "AccGyro_PWRMGMT1REG" 02H 00H 00H
CSGLOBAL 43H 0002H "Accel_PID_DBounds_Var_Neg" 02H 00H 01H
CSGLOBAL 42H 0001H "Mag_ConfigA_Contents" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_GyroConfig" 02H 00H 00H
CSGLOBAL 43H 0004H "Range_PIDErrSum" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_YPitch" 02H 00H 03H
CSGLOBAL 43H 0002H "Accel_PID_DBounds_Var_Pos" 02H 00H 01H
CSGLOBAL 42H 0002H "Range_Output" 05H 01H 02H 00H 00H 00H
CSGLOBAL 42H 0002H "PWMLowerDutyLimitRun" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_avgCnt" 02H 00H 03H
CSGLOBAL 42H 0001H "PrePIDCount" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_GyroAccelLPF" 02H 00H 00H
CSGLOBAL 42H 0001H "Range_Address" 02H 00H 00H
CSGLOBAL 43H 0004H "Mag_DeclinationAngle" 02H 00H 03H
CSGLOBAL 42H 0001H "CF_Counter" 02H 00H 00H
CSGLOBAL 43H 0004H "Range_PIDCurrentCount" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_ZHiThres" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_ZLoThres" 02H 00H 03H
CSGLOBAL 42H 0002H "Range_PIDCounter" 02H 00H 01H
CSGLOBAL 42H 0002H "PWMUpperDutyLimitRun" 02H 00H 01H
CSGLOBAL 43H 0004H "Range_Ceiling" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_PID_YPitchErrSum" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_XRoll_high" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_CCWThres" 02H 00H 03H
CSGLOBAL 43H 000CH "Accel_Zcal" 05H 01H 03H 00H 00H 03H
CSGLOBAL 42H 0002H "Accel_PID_XRollCounter_D" 02H 00H 01H
CSGLOBAL 42H 0002H "Accel_PID_XRollCounter_I" 02H 00H 01H
CSGLOBAL 42H 0001H "Mag_Status" 02H 00H 00H
CSGLOBAL 42H 0001H "AccGyro_AccelConfig_Contents" 02H 00H 00H
CGLOBAL 00H 42H 0001H "_flgI2CFin" 02H 00H 00H
CSGLOBAL 43H 000CH "Accel_Xcal" 05H 01H 03H 00H 00H 03H
CSGLOBAL 43H 0004H "AccGyro_GyroScaling" 02H 00H 03H
CSGLOBAL 43H 0002H "isDemoing" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_Accel_XRoll" 02H 00H 03H
CSGLOBAL 42H 0006H "Mag_Data" 05H 01H 06H 00H 00H 00H
CSGLOBAL 43H 0044H "Accel_Xout" 05H 01H 11H 00H 00H 03H
CSGLOBAL 42H 0002H "Accel_PID_YPitchCounter_D" 02H 00H 01H
CSGLOBAL 42H 0002H "Accel_PID_YPitchCounter_I" 02H 00H 01H
CSGLOBAL 42H 0001H "CF_highlow_flag" 02H 00H 00H
CSGLOBAL 43H 000CH "Accel_Ycal" 05H 01H 03H 00H 00H 03H
CSGLOBAL 42H 0001H "AccGYRO_Test" 02H 00H 00H
CSGLOBAL 42H 0032H "SensorReturnSM" 05H 01H 32H 00H 00H 00H
CSGLOBAL 43H 0004H "CF_Gyro_CurrentCount" 02H 00H 03H
CGLOBAL 00H 42H 0001H "_reqNotHalt" 02H 00H 00H
CSGLOBAL 42H 0001H "CF_UseFlag" 02H 00H 00H
CSGLOBAL 42H 0002H "TestingEndTimer" 02H 00H 01H
CSGLOBAL 43H 0004H "CF_Accel_YPitch" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_Angle" 02H 00H 03H
CSGLOBAL 43H 0004H "Mag_GainFactor" 02H 00H 03H
CSGLOBAL 42H 0001H "AccGyro_INTENABLEReg" 02H 00H 00H
CSGLOBAL 42H 0002H "PWMUpperDutyLimitCalib" 02H 00H 01H
CSGLOBAL 43H 0002H "testI" 02H 00H 01H
CSGLOBAL 43H 0002H "testD" 02H 00H 01H
CSGLOBAL 43H 0002H "testP" 02H 00H 01H
CSGLOBAL 43H 0004H "AccGyro_AccelScaling" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_XLoThres" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_YHiThres" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_PID_kp" 02H 00H 03H
CSGLOBAL 43H 0004H "Accel_XHiThres" 02H 00H 03H
CSGLOBAL 42H 0001H "Range_TakeRangeReading" 02H 00H 00H
CSGLOBAL 43H 0004H "Range_PID_kd" 02H 00H 03H
CSGLOBAL 43H 0044H "Accel_Yout" 05H 01H 11H 00H 00H 03H
CSGLOBAL 43H 0004H "Range_PID_ki" 02H 00H 03H
CSGLOBAL 42H 0002H "MotorStep" 02H 00H 01H
CSGLOBAL 43H 0044H "Accel_Zout" 05H 01H 11H 00H 00H 03H
CSGLOBAL 42H 0002H "Timer8Counter" 02H 00H 01H
CSGLOBAL 42H 0001H "AccGyro_GyroAccelLPF_Contents" 02H 00H 00H
CSGLOBAL 43H 0004H "Gyro_Zcal" 02H 00H 03H
CSGLOBAL 42H 0001H "Accel_PID_IFlag" 02H 00H 00H
CSGLOBAL 42H 0001H "Mag_ConfigA" 02H 00H 00H
CSGLOBAL 42H 0001H "Mag_ConfigB" 02H 00H 00H
CSGLOBAL 42H 0001H "Mag_ReadData" 02H 00H 00H
CSGLOBAL 43H 0004H "Accel_YLoThres" 02H 00H 03H
CSGLOBAL 43H 0004H "Gyro_Ycal" 02H 00H 03H
CSGLOBAL 42H 0002H "timer_us" 02H 00H 01H
CSGLOBAL 43H 0004H "Gyro_Xout" 02H 00H 03H
CSGLOBAL 43H 0004H "Gyro_Xcal" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_YPitch_avg" 02H 00H 03H
CSGLOBAL 43H 0004H "CF_HPF" 02H 00H 03H
CSGLOBAL 43H 0004H "Range_PIDErrPrev" 02H 00H 03H
CSGLOBAL 42H 0002H "Ping_timer" 02H 00H 01H
CFILE 0001H 0000085AH "main\\ML610112.H"
CFILE 0002H 000000D8H "main\\stdlib.h"
CFILE 0003H 0000007AH "main\\yvals.h"
CFILE 0004H 0000006BH "uart\\uart.h"
CFILE 0005H 00000027H "common\\common.h"
CFILE 0006H 00000057H "irq\\irq.h"
CFILE 0007H 00000023H "main\\mcu.h"
CFILE 0008H 00000045H "i2c\\i2c.h"
CFILE 0009H 000000EEH "main\\stdio.h"
CFILE 000AH 00000046H "tbc\\tbc.h"
CFILE 000BH 000001B8H "timer\\timer.h"
CFILE 000CH 0000004FH "main\\math.h"
CFILE 0000H 0000108CH "main\\main.c"

	rseg $$main$main
CFUNCTION 261

_main	:
CBLOCK 261 1 574

;;{
CLINEA 0000H 0001H 023EH 0001H 0001H
CBLOCK 261 2 574
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H

;;		Initialization(); 			//Ports, UART, Timers, Oscillator, Comparators, etc.
CLINEA 0000H 0001H 0244H 0003H 004BH
	bl	_Initialization

;;		if(PC3D==0)
CLINEA 0000H 0001H 0246H 0003H 000DH
	tb	0f260h.3
	bne	_$L30
CBLOCK 261 3 583

;;			isDemoing = 1;
CLINEA 0000H 0001H 0248H 0004H 0011H
	mov	er0,	#1 
	st	er0,	NEAR _isDemoing

;;			InitializeTone();
CLINEA 0000H 0001H 0249H 0004H 0014H
	bl	_InitializeTone
CBLOCKEND 261 3 586

;;		else
CLINEA 0000H 0001H 024BH 0003H 0006H
	bal	_$L32
_$L30 :
CBLOCK 261 4 588

;;			isDemoing = 0; 
CLINEA 0000H 0001H 024DH 0004H 0012H
	mov	er0,	#0 
	st	er0,	NEAR _isDemoing

;;			InitializeTone();
CLINEA 0000H 0001H 024EH 0004H 0014H
	bl	_InitializeTone

;;			InitializeTone();
CLINEA 0000H 0001H 024FH 0004H 0014H
	bl	_InitializeTone
CBLOCKEND 261 4 592

;;		}
CLINEA 0000H 0000H 0250H 0003H 0003H
_$L32 :

;;		main_clrWDT();				//kick the dog...1.34uS duration
CLINEA 0000H 0001H 0253H 0003H 0034H
	bl	_main_clrWDT

;;		CalibrateMotors();			//Time-consuming ~6s 
CLINEA 0000H 0001H 0254H 0003H 002CH
	bl	_CalibrateMotors

;;		CalibrateGyro();			//Enter Calibration Sequence for Gyro
CLINEA 0000H 0001H 0255H 0003H 003AH
	bl	_CalibrateGyro

;;			Accel_Xcal[0] = 754;
CLINEA 0000H 0001H 025AH 0004H 0017H
	mov	r0,	#00h
	mov	r1,	#080h
	mov	r2,	#03ch
	mov	r3,	#044h
	st	er0,	NEAR _Accel_Xcal
	st	er2,	NEAR _Accel_Xcal+02h

;;			Accel_Ycal[0] = -1360;
CLINEA 0000H 0001H 025BH 0004H 0019H
	mov	er0,	#0 
	mov	r2,	#0aah
	mov	r3,	#0c4h
	st	er0,	NEAR _Accel_Ycal
	st	er2,	NEAR _Accel_Ycal+02h

;;			Accel_Zcal[0] = -162;
CLINEA 0000H 0001H 025CH 0004H 0018H
	mov	r2,	#022h
	mov	r3,	#0c3h
	st	er0,	NEAR _Accel_Zcal
	st	er2,	NEAR _Accel_Zcal+02h

;;Main_Loop:
CLINEA 0000H 0001H 0265H 0001H 000AH
CLABEL 0021H "Main_Loop"
_$L33 :

;;		if(!isDemoing)
CLINEA 0000H 0000H 0266H 0003H 0010H
	l	er0,	NEAR _isDemoing
	bne	_$L34
CBLOCK 261 5 615

;;			SerialOutCoefficients();	//~23ms when PID is Triggered as well..13.8ms otherwise
CLINEA 0000H 0001H 0268H 0004H 0053H
	bl	_SerialOutCoefficients

;;			PrePIDCount = 0;
CLINEA 0000H 0001H 0269H 0004H 0013H
	mov	r0,	#00h
	st	r0,	NEAR _PrePIDCount

;;			UARTTunePID();				//Allow PID & CF Constant changes over UART
CLINEA 0000H 0001H 026AH 0004H 0040H
	bl	_UARTTunePID

;;			main_clrWDT();				//kick the dog...1.34uS duration.
CLINEA 0000H 0001H 026BH 0004H 0036H
	bl	_main_clrWDT
CBLOCKEND 261 5 620

;;		} 
CLINEA 0000H 0000H 026CH 0003H 0004H
_$L34 :

;;		Accel_SavIndex = 0;			//Reset Circular Buffer for Accel/Gyro Measurements
CLINEA 0000H 0001H 026EH 0003H 004BH
	mov	r0,	#00h
	st	r0,	NEAR _Accel_SavIndex

;;		for(i=0; i<AccelAvg; i++){
CLINEA 0000H 0001H 0270H 0003H 001CH
	mov	er4,	#0 
_$L40 :
CBLOCK 261 6 624

;;			Accel_Xout[i] = 0;
CLINEA 0000H 0001H 0271H 0004H 0015H
	mov	er0,	er4
	sllc	r1,	#02h
	sll	r0,	#02h
	mov	er2,	#0 
	st	er2,	NEAR _Accel_Xout[er0]
	st	er2,	NEAR _Accel_Xout+02h[er0]

;;			Accel_Yout[i] = 0;
CLINEA 0000H 0001H 0272H 0004H 0015H
	mov	er0,	er4
	sllc	r1,	#02h
	sll	r0,	#02h
	st	er2,	NEAR _Accel_Yout[er0]
	st	er2,	NEAR _Accel_Yout+02h[er0]

;;			Accel_Zout[i] = 0;
CLINEA 0000H 0001H 0273H 0004H 0015H
	mov	er0,	er4
	sllc	r1,	#02h
	sll	r0,	#02h
	st	er2,	NEAR _Accel_Zout[er0]
	st	er2,	NEAR _Accel_Zout+02h[er0]
CBLOCKEND 261 6 631

;;		for(i=0; i<AccelAvg; i++){
CLINEA 0000H 0000H 0270H 0003H 001CH
	add	er4,	#1 
	cmp	r4,	#011h
	cmpc	r5,	#00h
	blts	_$L40

;;		EPB3 = 1;					//Enable Accel/Gyro Interrupt Pin
CLINEA 0000H 0001H 0278H 0003H 0031H
	sb	0f011h.7

;;		while(!PC3D){
CLINEA 0000H 0000H 027AH 0003H 000FH
	bal	_$L44
_$L46 :
CBLOCK 261 7 634

;;			NOPms(100);
CLINEA 0000H 0001H 027BH 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			main_clrWDT();
CLINEA 0000H 0001H 027CH 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 261 7 637

;;		}
CLINEA 0000H 0000H 027DH 0003H 0003H
_$L44 :

;;		while(!PC3D){
CLINEA 0000H 0000H 027AH 0000H 0000H
	tb	0f260h.3
	beq	_$L46

;;		Emit_Warning();
CLINEA 0000H 0001H 027FH 0003H 0011H
	bl	_Emit_Warning

;;		SoftStart();				//Smoothly bring up the Motor RPM
CLINEA 0000H 0001H 0280H 0003H 0033H
	bl	_SoftStart

;;Fast_Loop:							//This loop takes 22.4ms for this loop as of 3/30/2014		
CLINEA 0000H 0001H 0283H 0001H 0049H
CLABEL 0032H "Fast_Loop"
_$L50 :

;;		main_clrWDT();				//kick the dog...1.34uS duration
CLINEA 0000H 0001H 0285H 0003H 0034H
	bl	_main_clrWDT

;;		ClearVariables();			//Fresh start each loop...
CLINEA 0000H 0001H 0286H 0003H 0030H
	bl	_ClearVariables

;;		if(AccGyro_ReadFlag >= 1){		//Triggered by External Interrupt (flag set in AccelGyroDataReady_ISR)
CLINEA 0000H 0001H 029CH 0003H 0064H
	l	r0,	NEAR _AccGyro_ReadFlag
	cmp	r0,	#01h
	blt	_$L51
CBLOCK 261 8 668

;;			LED_4 = 1;				//LED4 = C2, Pin 14	//Loop Time = 1.5ms @20Hz Rate
CLINEA 0000H 0001H 029DH 0004H 0043H
	sb	0f260h.2

;;			Get_AccGyroData();
CLINEA 0000H 0001H 029EH 0004H 0015H
	bl	_Get_AccGyroData

;;			LED_4 = 0;
CLINEA 0000H 0001H 029FH 0004H 000DH
	rb	0f260h.2

;;			AccGyro_ReadFlag = 0;
CLINEA 0000H 0001H 02A0H 0004H 0018H
	mov	r0,	#00h
	st	r0,	NEAR _AccGyro_ReadFlag
CBLOCKEND 261 8 673

;;		}
CLINEA 0000H 0000H 02A1H 0003H 0003H
_$L51 :

;;		if(AccGyro_CF_FlagCounter > 0){	//This Value is incremented after Get_AccGyroData(); is called
CLINEA 0000H 0001H 02A2H 0003H 0060H
	l	r0,	NEAR _AccGyro_CF_FlagCounter
	cmp	r0,	#00h
	ble	_$L53
CBLOCK 261 9 674

;;			LED_2 = 1;			//B7, Pin 11	//Inside RUN_CF	//Loop Time = 13.5ms
CLINEA 0000H 0001H 02A3H 0004H 0041H
	sb	0f258h.7

;;			Run_AccGyroCF();
CLINEA 0000H 0001H 02A4H 0004H 0013H
	bl	_Run_AccGyroCF

;;			LED_2 = 0;
CLINEA 0000H 0001H 02A5H 0004H 000DH
	rb	0f258h.7

;;			AccGyro_CF_FlagCounter--;	//Decremented because this value is not a static 1/0... number shows number of items in buffer that have not gone though the CF yet
CLINEA 0000H 0000H 02A6H 0004H 00A0H
	lea	OFFSET _AccGyro_CF_FlagCounter
	dec	[ea]
CBLOCKEND 261 9 679

;;		}
CLINEA 0000H 0000H 02A7H 0003H 0003H
_$L53 :

;;		if(Accel_PID_GoCounter>= 1){		//This increments in the Run_AccGyroCF()... I don't know if this is the best trigger.. but for now, it works.  Calls GetAccGyroData and AccGyroCF once within the routine.
CLINEA 0000H 0001H 02A8H 0003H 00CAH
	l	r0,	NEAR _Accel_PID_GoCounter
	cmp	r0,	#01h
	blt	_$L55
CBLOCK 261 10 680

;;			LED_3 = 1;			//C1, Pin 13		//Loop Time = 25.47 with UART Debugging ON... 
CLINEA 0000H 0001H 02A9H 0004H 004CH
	sb	0f260h.1

;;			AccelSensorControlPID_P(); 		
CLINEA 0000H 0001H 02AAH 0004H 0020H
	bl	_AccelSensorControlPID_P

;;			LED_3 = 0;
CLINEA 0000H 0001H 02ABH 0004H 000DH
	rb	0f260h.1

;;			Accel_PID_IFlag++;
CLINEA 0000H 0000H 02ACH 0004H 0015H
	lea	OFFSET _Accel_PID_IFlag
	inc	[ea]

;;			Accel_PID_DFlag++;
CLINEA 0000H 0000H 02ADH 0004H 0015H
	lea	OFFSET _Accel_PID_DFlag
	inc	[ea]
	l	r0,	NEAR _Accel_PID_DFlag

;;			if(Accel_PID_DFlag < DenterThres){
CLINEA 0000H 0001H 02AEH 0004H 0025H
	cmp	r0,	#01h
	bge	_$L57
CBLOCK 261 11 686

;;				Accel_PID_YPitchErrPrev = Accel_PID_YPitchError;
CLINEA 0000H 0001H 02AFH 0005H 0034H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	st	er0,	NEAR _Accel_PID_YPitchErrPrev
	st	er2,	NEAR _Accel_PID_YPitchErrPrev+02h

;;				Accel_PID_XRollErrPrev = Accel_PID_XRollError;
CLINEA 0000H 0001H 02B0H 0005H 0032H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	st	er0,	NEAR _Accel_PID_XRollErrPrev
	st	er2,	NEAR _Accel_PID_XRollErrPrev+02h
CBLOCKEND 261 11 689

;;			}
CLINEA 0000H 0000H 02B1H 0004H 0004H
_$L57 :

;;			Accel_PID_GoCounter = 0;
CLINEA 0000H 0001H 02B2H 0004H 001BH
	mov	r0,	#00h
	st	r0,	NEAR _Accel_PID_GoCounter

;;			TestingEndTimer++;			//Comment this out to always loop (i.e.: no shut-down...)
CLINEA 0000H 0000H 02B3H 0004H 0051H
	l	er0,	NEAR _TestingEndTimer
	add	er0,	#1 
	st	er0,	NEAR _TestingEndTimer
CBLOCKEND 261 10 692

;;		}
CLINEA 0000H 0000H 02B4H 0003H 0003H
_$L55 :

;;		if(Accel_PID_IFlag >= IenterThres){		//This increments in the Run_AccGyroCF()... I don't know if this is the best trigger.. but for now, it works.  Calls GetAccGyroData and AccGyroCF once within the routine.
CLINEA 0000H 0001H 02B6H 0003H 00D1H
	l	r0,	NEAR _Accel_PID_IFlag
	cmp	r0,	#01h
	blt	_$L59
CBLOCK 261 12 694

;;			AccelSensorControlPID_I(); 		
CLINEA 0000H 0001H 02B8H 0004H 0020H
	bl	_AccelSensorControlPID_I

;;			Accel_PID_IFlag = 0;
CLINEA 0000H 0001H 02BAH 0004H 0017H
	mov	r0,	#00h
	st	r0,	NEAR _Accel_PID_IFlag
CBLOCKEND 261 12 699

;;		}
CLINEA 0000H 0000H 02BBH 0003H 0003H
_$L59 :

;;		if(Accel_PID_DFlag >= DenterThres){		//This increments in the Run_AccGyroCF()... I don't know if this is the best trigger.. but for now, it works.  Calls GetAccGyroData and AccGyroCF once within the routine.
CLINEA 0000H 0001H 02BCH 0003H 00D1H
	l	r0,	NEAR _Accel_PID_DFlag
	cmp	r0,	#01h
	blt	_$L61
CBLOCK 261 13 700

;;			AccelSensorControlPID_D();
CLINEA 0000H 0001H 02BEH 0004H 001DH
	bl	_AccelSensorControlPID_D

;;			Accel_PID_DFlag = 0;
CLINEA 0000H 0001H 02C0H 0004H 0017H
	mov	r0,	#00h
	st	r0,	NEAR _Accel_PID_DFlag
CBLOCKEND 261 13 705

;;		}
CLINEA 0000H 0000H 02C1H 0003H 0003H
_$L61 :

;;		if(PC3D==1){		//50 == 3secs = 250 = 15 seconds
CLINEA 0000H 0001H 02D3H 0003H 0030H
	tb	0f260h.3
	beq	_$M1
	b	_$L50
_$M1 :
CBLOCK 261 14 723

;;			goto Fast_Loop;
CLINEA 0000H 0001H 02D5H 0004H 0012H
CBLOCKEND 261 14 726

;;		else{
CLINEA 0000H 0000H 02D7H 0003H 0007H
CBLOCK 261 15 727

;;			EPB3 = 0;					//Disable Accel/Gyro Interrupt Pin
CLINEA 0000H 0001H 02ECH 0004H 0033H
	rb	0f011h.7

;;			Shutdown();
CLINEA 0000H 0001H 02EDH 0004H 000EH
	bl	_Shutdown

;;			TestingEndTimer = 0;
CLINEA 0000H 0001H 02F2H 0004H 0017H
	mov	er0,	#0 
	st	er0,	NEAR _TestingEndTimer

;;			goto Main_Loop;
CLINEA 0000H 0001H 02F6H 0004H 0012H
	b	_$L33
CBLOCKEND 261 15 759
CBLOCKEND 261 2 761

;;}//end main
CLINEA 0000H 0001H 02F9H 0001H 000BH
CBLOCKEND 261 1 761
CFUNCTIONEND 261


	rseg $$InitializeTone$main
CFUNCTION 260

_InitializeTone	:
CBLOCK 260 1 764

;;{ 
CLINEA 0000H 0001H 02FCH 0001H 0002H
	push	lr
	push	er4
CBLOCK 260 2 764
CRET 0002H
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H
	mov	er4,	#0 

;;	if(isDemoing)
CLINEA 0000H 0001H 02FEH 0002H 000EH
	l	er0,	NEAR _isDemoing
	beq	_$L67
CBLOCK 260 3 767

;;		for(i=0; i<15; i++)
CLINEA 0000H 0000H 0300H 0012H 0014H
_$L71 :
CBLOCK 260 4 769

;;			LED_2 = 1;
CLINEA 0000H 0001H 0302H 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 0303H 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 0304H 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 0305H 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 4 774

;;		for(i=0; i<15; i++)
CLINEA 0000H 0000H 0300H 0012H 0014H
	add	er4,	#1 

;;		for(i=0; i<15; i++)
CLINEA 0000H 0000H 0300H 000CH 0010H
	cmp	r4,	#0fh
	cmpc	r5,	#00h
	blts	_$L71

;;		NOPms(100); 
CLINEA 0000H 0001H 0307H 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);    
CLINEA 0000H 0001H 0308H 0003H 0011H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		for(i=0; i<15; i++)
CLINEA 0000H 0001H 0309H 0003H 0015H
	mov	er4,	#0 
_$L77 :
CBLOCK 260 5 778

;;			LED_2 = 1;
CLINEA 0000H 0001H 030BH 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 030CH 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 030DH 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 030EH 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 5 783

;;		for(i=0; i<15; i++)
CLINEA 0000H 0000H 0309H 0003H 0015H
	add	er4,	#1 

;;		for(i=0; i<15; i++)
CLINEA 0000H 0000H 0309H 000CH 0010H
	cmp	r4,	#0fh
	cmpc	r5,	#00h
	blts	_$L77

;;		NOPms(100); 
CLINEA 0000H 0001H 0310H 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);  
CLINEA 0000H 0001H 0311H 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 3 786

;;	else
CLINEA 0000H 0001H 0313H 0002H 0005H
	b	_$L81
_$L67 :
CBLOCK 260 6 788
CBLOCK 260 7 790

;;			LED_2 = 1;
CLINEA 0000H 0001H 0317H 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 0318H 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 0319H 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 031AH 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 7 795

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0315H 0011H 0013H
	add	er4,	#1 

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0315H 000CH 000FH
	cmp	r4,	#07h
	cmpc	r5,	#00h
	blts	_$L67

;;		NOPms(100); 
CLINEA 0000H 0001H 031CH 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);  
CLINEA 0000H 0001H 031DH 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		for(i=0; i<7; i++)
CLINEA 0000H 0001H 031EH 0003H 0014H
	mov	er4,	#0 
_$L90 :
CBLOCK 260 8 799

;;			LED_2 = 1;
CLINEA 0000H 0001H 0320H 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 0321H 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 0322H 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 0323H 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 8 804

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 031EH 0003H 0014H
	add	er4,	#1 

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 031EH 000CH 000FH
	cmp	r4,	#07h
	cmpc	r5,	#00h
	blts	_$L90

;;		NOPms(100); 
CLINEA 0000H 0001H 0325H 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);  
CLINEA 0000H 0001H 0326H 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		for(i=0; i<7; i++)
CLINEA 0000H 0001H 0327H 0003H 0014H
	mov	er4,	#0 
_$L96 :
CBLOCK 260 9 808

;;			LED_2 = 1;
CLINEA 0000H 0001H 0329H 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 032AH 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 032BH 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 032CH 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 9 813

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0327H 0003H 0014H
	add	er4,	#1 

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0327H 000CH 000FH
	cmp	r4,	#07h
	cmpc	r5,	#00h
	blts	_$L96

;;		NOPms(100); 
CLINEA 0000H 0001H 032EH 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);  
CLINEA 0000H 0001H 032FH 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		for(i=0; i<7; i++)
CLINEA 0000H 0001H 0330H 0003H 0014H
	mov	er4,	#0 
_$L102 :
CBLOCK 260 10 817

;;			LED_2 = 1;
CLINEA 0000H 0001H 0332H 0004H 000DH
	sb	0f258h.7

;;			NOPms(100);
CLINEA 0000H 0001H 0333H 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			LED_2 = 0;
CLINEA 0000H 0001H 0334H 0004H 000DH
	rb	0f258h.7

;;			NOPms(100);  
CLINEA 0000H 0001H 0335H 0004H 0010H
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 10 822

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0330H 0003H 0014H
	add	er4,	#1 

;;		for(i=0; i<7; i++)
CLINEA 0000H 0000H 0330H 000CH 000FH
	cmp	r4,	#07h
	cmpc	r5,	#00h
	blts	_$L102

;;		NOPms(100); 
CLINEA 0000H 0001H 0337H 0003H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		NOPms(100);  
CLINEA 0000H 0001H 0338H 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 260 6 825

;;	}
CLINEA 0000H 0000H 0339H 0002H 0002H
_$L81 :
CBLOCKEND 260 2 826

;;}
CLINEA 0000H 0001H 033AH 0001H 0001H
	pop	er4
	pop	pc
CBLOCKEND 260 1 826
CFUNCTIONEND 260


	rseg $$Emit_Warning$main
CFUNCTION 259

_Emit_Warning	:
CBLOCK 259 1 829

;;{
CLINEA 0000H 0001H 033DH 0001H 0001H
	push	lr
	push	er4
CBLOCK 259 2 829
CRET 0002H
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H

;;	for(i=0; i<40; i++)
CLINEA 0000H 0001H 033FH 0002H 0014H
	mov	er4,	#0 
_$L109 :
CBLOCK 259 3 832

;;		LED_2 = 1;
CLINEA 0000H 0001H 0341H 0003H 000CH
	sb	0f258h.7

;;		NOPms(100);
CLINEA 0000H 0001H 0342H 0003H 000DH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;		LED_2 = 0;
CLINEA 0000H 0001H 0343H 0003H 000CH
	rb	0f258h.7

;;		NOPms(100);  
CLINEA 0000H 0001H 0344H 0003H 000FH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms
CBLOCKEND 259 3 837

;;	for(i=0; i<40; i++)
CLINEA 0000H 0000H 033FH 0002H 0014H
	add	er4,	#1 

;;	for(i=0; i<40; i++)
CLINEA 0000H 0000H 033FH 000CH 000FH
	cmp	r4,	#028h
	cmpc	r5,	#00h
	blts	_$L109
CBLOCKEND 259 2 838

;;}
CLINEA 0000H 0001H 0346H 0001H 0001H
	pop	er4
	pop	pc
CBLOCKEND 259 1 838
CFUNCTIONEND 259


	rseg $$main_clrWDT$main
CFUNCTION 206

_main_clrWDT	:
CBLOCK 206 1 1018

;;{
CLINEA 0000H 0001H 03FAH 0001H 0001H
CBLOCK 206 2 1018

;;	do {
CLINEA 0000H 0001H 03FEH 0002H 0005H
_$L116 :
CBLOCK 206 3 1022

;;		WDTCON = 0x5Au;
CLINEA 0000H 0001H 03FFH 0003H 0011H
	mov	r0,	#05ah
	st	r0,	0f00eh
CBLOCKEND 206 3 1024

;;	} while (WDP != 1);
CLINEA 0000H 0000H 0400H 0002H 0014H
	tb	0f00eh.0
	beq	_$L116

;;	WDTCON = 0xA5u;
CLINEA 0000H 0001H 0401H 0002H 0010H
	mov	r0,	#0a5h
	st	r0,	0f00eh
CBLOCKEND 206 2 1027

;;}
CLINEA 0000H 0001H 0403H 0001H 0001H
	rt
CBLOCKEND 206 1 1027
CFUNCTIONEND 206


	rseg $$Initialization$main
CFUNCTION 207

_Initialization	:
CBLOCK 207 1 1034

;;static void Initialization(void){
CLINEA 0000H 0001H 040AH 0001H 0021H
	push	lr
CBLOCK 207 2 1034
CRET 0000H

;;	DSIO0 = 1; // 0=> Enables Synchronous Serial Port 0 (initial value).
CLINEA 0000H 0001H 040EH 0002H 0045H
	sb	0f02ah.0

;;	DUA0  = 0; // 0=> Enables the operation of UART0 (initial value).
CLINEA 0000H 0001H 040FH 0002H 0042H
	rb	0f02ah.2

;;	DUA1  = 1; // 0=> Enables Uart1 (initial value). 
CLINEA 0000H 0001H 0410H 0002H 0032H
	sb	0f02ah.3

;;	DI2C1 = 1; // 0=> Enables I2C bus Interface (Slave) (initial value).
CLINEA 0000H 0001H 0411H 0002H 0045H
	sb	0f02ah.6

;;	DI2C0 = 0; // 0=> Enables I2C bus Interface (Master) (initial value).	
CLINEA 0000H 0001H 0412H 0002H 0047H
	rb	0f02ah.7

;;	BLKCON4 = 0x00; // 0=> Enables SA-ADC
CLINEA 0000H 0001H 0414H 0002H 0026H
	mov	r0,	#00h
	st	r0,	0f02ch

;;	BLKCON6 = 0x00; // (1=disables; 0=enables) the operation of Timers 8, 9, A, E, F.
CLINEA 0000H 0001H 0415H 0002H 0052H
	st	r0,	0f02eh

;;	BLKCON7 = 0x00; // (1=disables; 0=enables) the operation of PWM (PWMC, PWMD, PWME, PWMF
CLINEA 0000H 0001H 0416H 0002H 0058H
	st	r0,	0f02fh

;;	PortA_Low();	//Initialize all 3 Ports of Port A to GPIO-Low
CLINEA 0000H 0001H 0419H 0002H 003CH
	bl	_PortA_Low

;;	PortB_Low();	//Initialize all 8 Ports of Port B to GPIO-Low
CLINEA 0000H 0001H 041AH 0002H 003CH
	bl	_PortB_Low

;;	PortC_Low();	//Initialize all 8 Ports of Port C to GPIO-Low
CLINEA 0000H 0001H 041BH 0002H 003CH
	bl	_PortC_Low

;;	PortD_Low();	//Initialize all 6 Ports of Port D to GPIO-Low
CLINEA 0000H 0001H 041CH 0002H 003CH
	bl	_PortD_Low

;;    SetOSC();
CLINEA 0000H 0001H 041FH 0005H 000DH
	bl	_SetOSC

;;	irq_di();	// Disable Interrupts
CLINEA 0000H 0001H 0423H 0002H 0020H
	bl	_irq_di

;;	irq_init();	// Initialize Interrupts (All Off and NO Requests)
CLINEA 0000H 0001H 0424H 0002H 003FH
	bl	_irq_init

;;	(void)irq_setHdr( (unsigned char)IRQ_NO_I2CMINT, _intI2c );
CLINEA 0000H 0001H 0441H 0002H 003CH
	mov	r2,	#BYTE1 OFFSET __intI2c
	mov	r3,	#BYTE2 OFFSET __intI2c
	mov	r0,	#0ch
	bl	_irq_setHdr

;;		EI2CM = 1;
CLINEA 0000H 0001H 0442H 0003H 000CH
	sb	0f012h.7

;;	(void)irq_setHdr( (unsigned char)IRQ_NO_UA0INT, _intUart );		
CLINEA 0000H 0001H 0446H 0002H 003EH
	mov	r2,	#BYTE1 OFFSET __intUart
	mov	r3,	#BYTE2 OFFSET __intUart
	mov	r0,	#0fh
	bl	_irq_setHdr

;;		EUA0 = 1; // EUA0 is the enable flag for the UART0 interrupt (1=ENABLED)
CLINEA 0000H 0001H 0447H 0003H 004AH
	sb	0f014h.0

;;	(void)irq_setHdr( (unsigned char)IRQ_NO_TM9INT, TMR89_ISR );  //Clear interrupt request flag
CLINEA 0000H 0001H 0454H 0002H 005DH
	mov	r2,	#BYTE1 OFFSET _TMR89_ISR
	mov	r3,	#BYTE2 OFFSET _TMR89_ISR
	mov	r0,	#0eh
	bl	_irq_setHdr

;;		ETM8 = 1;	  	// Enable timer 8 Interrupt (1=ENABLED
CLINEA 0000H 0001H 0455H 0003H 0035H
	sb	0f013h.2

;;		ETM9 = 1;	  	// Enable timer 9 Interrupt (1=ENABLED)
CLINEA 0000H 0001H 0456H 0003H 0036H
	sb	0f013h.3

;;		QTM8 = 1;		// timer 8 IRQ request flag
CLINEA 0000H 0001H 0457H 0003H 0028H
	sb	0f01bh.2

;;		QTM9 = 1;		// timer 9 IRQ request flag
CLINEA 0000H 0001H 0458H 0003H 0028H
	sb	0f01bh.3

;;		T8CS0 = 1;
CLINEA 0000H 0001H 0459H 0003H 000CH
	sb	0f8e2h.0

;;		T8CS1 = 1;
CLINEA 0000H 0001H 045AH 0003H 000CH
	sb	0f8e2h.1

;;		T8CS2 = 0;
CLINEA 0000H 0001H 045BH 0003H 000CH
	rb	0f8e2h.2

;;		T9CS0 = 1;
CLINEA 0000H 0001H 045CH 0003H 000CH
	sb	0f8e6h.0

;;		T9CS1 = 1;
CLINEA 0000H 0001H 045DH 0003H 000CH
	sb	0f8e6h.1

;;		T9CS2 = 0;
CLINEA 0000H 0001H 045EH 0003H 000CH
	rb	0f8e6h.2

;;		tm_init(TM_CH_NO_89);
CLINEA 0000H 0001H 045FH 0003H 0017H
	mov	r0,	#00h
	bl	_tm_init

;;		tm_set89Data(8192);				//A value of 1023 should yield 125us interrupts at 8.192 MHz
CLINEA 0000H 0000H 0150H 0002H 0025H
	mov	r0,	#00h
	st	r0,	0f8e0h

;;		tm_set89Data(8192);				//A value of 1023 should yield 125us interrupts at 8.192 MHz
CLINEA 0000H 0000H 0151H 0002H 0023H
	mov	r0,	#020h
	st	r0,	0f8e4h

;;		tm_set89Source(TM_CS_HTBCLK);
CLINEA 0000H 0000H 0186H 0002H 0015H
	sb	0f8e2h.0

;;		tm_set89Source(TM_CS_HTBCLK);
CLINEA 0000H 0000H 0187H 0002H 001AH
	rb	0f8e2h.1

;;		tm_start89();
CLINEA 0000H 0001H 00CAH 0002H 000AH
	mov	r0,	#00h
	st	r0,	0f8e1h

;;		tm_start89();
CLINEA 0000H 0000H 00CBH 0002H 000BH
	sb	0f8e3h.0

;;		T89M16 = 1;
CLINEA 0000H 0001H 0463H 0003H 000DH
	sb	0f8e2h.5

;;		HTD3 = 1;
CLINEA 0000H 0001H 0465H 0003H 000BH
	sb	0f00bh.3

;;		HTD2 = 1;
CLINEA 0000H 0001H 0466H 0003H 000BH
	sb	0f00bh.2

;;		HTD1 = 1;
CLINEA 0000H 0001H 0467H 0003H 000BH
	sb	0f00bh.1

;;		HTD0 = 1; 
CLINEA 0000H 0001H 0468H 0003H 000CH
	sb	0f00bh.0

;;	PB3DIR = 1;
CLINEA 0000H 0001H 046BH 0002H 000CH
	sb	0f259h.3

;;	PB3C1 = 0;
CLINEA 0000H 0001H 046CH 0002H 000BH
	rb	0f25bh.3

;;	PB3C0 = 0;
CLINEA 0000H 0001H 046DH 0002H 000BH
	rb	0f25ah.3

;;	PB3MD1 = 0;
CLINEA 0000H 0001H 046EH 0002H 000CH
	rb	0f25dh.3

;;	PB3MD0 = 0;
CLINEA 0000H 0001H 046FH 0002H 000CH
	rb	0f25ch.3

;;	PB3E1 = 1;
CLINEA 0000H 0001H 0470H 0002H 000BH
	sb	0f025h.7

;;	PB3E0 = 0;		//PBnE0-1 are used to choose the Rising-Edge Mode for this interrupt
CLINEA 0000H 0001H 0472H 0002H 0051H
	rb	0f024h.7

;;	PB3SM = 0;
CLINEA 0000H 0001H 0473H 0002H 000BH
	rb	0f026h.7

;;	(void)irq_setHdr( (unsigned char)IRQ_NO_PB3INT, AccelGyroDataReady_ISR );  //Clear interrupt request flag
CLINEA 0000H 0001H 0475H 0002H 006AH
	mov	r2,	#BYTE1 OFFSET _AccelGyroDataReady_ISR
	mov	r3,	#BYTE2 OFFSET _AccelGyroDataReady_ISR
	mov	r0,	#08h
	bl	_irq_setHdr

;;	EPB3 = 0;	//Enables Interrupt
CLINEA 0000H 0001H 0477H 0002H 001EH
	rb	0f011h.7

;;	QPB3 = 0;	//Enables Request Flag (need to set to start using... this is set after the UART control Stuff!)
CLINEA 0000H 0001H 0478H 0002H 006BH
	rb	0f019h.7

;;	WDTMOD = 0x03; 	// 0x03=overflow 8sec...
CLINEA 0000H 0001H 047CH 0002H 0029H
	mov	r0,	#03h
	st	r0,	0f00fh

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 047DH 0002H 001DH
	bl	_main_clrWDT

;;	(void)i2c_init(I2C_MOD_FST, (unsigned short)HSCLK_KHZ, I2C_SYN_ON);
CLINEA 0000H 0001H 0481H 0002H 0044H
	mov	r0,	#01h
	push	r0
	mov	r2,	#040h
	mov	r3,	#01fh
	bl	_i2c_init
	add	sp,	#2 

;;			     &_uartSetParam );				/* Param... 	 */
CLINEA 0000H 0001H 0487H 0009H 002DH
	mov	r0,	#BYTE1 OFFSET __uartSetParam
	mov	r1,	#BYTE2 OFFSET __uartSetParam
	push	er0
	mov	r2,	#040h
	mov	r3,	#01fh
	mov	r0,	#02h
	bl	_uart_init
	add	sp,	#2 

;;		uart_PortSet();
CLINEA 0000H 0001H 0488H 0003H 0011H
	bl	_uart_PortSet

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 0489H 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 048AH 0003H 000EH
	bl	_uart_stop

;;	irq_ei(); // Enable Interrupts
CLINEA 0000H 0001H 048CH 0002H 001FH
	bl	_irq_ei

;;		ESC1_PWM();
CLINEA 0000H 0001H 0490H 0003H 000DH
	bl	_ESC1_PWM

;;		ESC2_PWM();
CLINEA 0000H 0001H 0491H 0003H 000DH
	bl	_ESC2_PWM

;;		ESC3_PWM();
CLINEA 0000H 0001H 0492H 0003H 000DH
	bl	_ESC3_PWM

;;		ESC4_PWM();
CLINEA 0000H 0001H 0493H 0003H 000DH
	bl	_ESC4_PWM

;;		PD0DIR = 1;
CLINEA 0000H 0001H 0495H 0003H 000DH
	sb	0f269h.0

;;		PD1DIR = 1;
CLINEA 0000H 0001H 0496H 0003H 000DH
	sb	0f269h.1

;;		PD2DIR = 0;
CLINEA 0000H 0001H 0497H 0003H 000DH
	rb	0f269h.2

;;		PWMUpperLowerDiff = PWMUpperDutyLimitRun-PWMLowerDutyLimitRun;
CLINEA 0000H 0001H 0499H 0003H 0040H
	l	er0,	NEAR _PWMUpperDutyLimitRun
	l	er2,	NEAR _PWMLowerDutyLimitRun
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	NEAR _PWMUpperLowerDiff

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 049CH 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 049DH 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_PWRMGMT1REG, 1, &AccGyro_PWRMGMT1REG_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 049EH 0002H 008DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_PWRMGMT1REG_Contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_PWRMGMT1REG_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_PWRMGMT1REG
	mov	r3,	#BYTE2 OFFSET _AccGyro_PWRMGMT1REG
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 049FH 0001H 0015H
	bal	_$L159

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 049FH 0002H 004EH
_$L121 :
CBLOCK 207 3 1183

;;		main_clrWDT();
CLINEA 0000H 0001H 04A0H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 3 1185

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 049FH 0001H 0015H
_$L159 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 049FH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L121

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04A3H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04A4H 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_AccelConfig, 1, &AccGyro_AccelConfig_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04A5H 0002H 008DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_AccelConfig_Contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_AccelConfig_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_AccelConfig
	mov	r3,	#BYTE2 OFFSET _AccGyro_AccelConfig
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04A6H 0001H 0015H
	bal	_$L160

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04A6H 0002H 004EH
_$L125 :
CBLOCK 207 4 1190

;;		main_clrWDT();
CLINEA 0000H 0001H 04A7H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 4 1192

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04A6H 0001H 0015H
_$L160 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04A6H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L125

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04AAH 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04ABH 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_GyroConfig, 1, &AccGyro_GyroConfig_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04ACH 0002H 008BH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_GyroConfig_Contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_GyroConfig_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_GyroConfig
	mov	r3,	#BYTE2 OFFSET _AccGyro_GyroConfig
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04ADH 0001H 0015H
	bal	_$L161

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04ADH 0002H 004EH
_$L129 :
CBLOCK 207 5 1197

;;		main_clrWDT();
CLINEA 0000H 0001H 04AEH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 5 1199

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04ADH 0001H 0015H
_$L161 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04ADH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L129

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04B2H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04B3H 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_GyroAccel_SMPRTDIV, 1, &AccGyro_GyroAccelLPF_SMPRTDIVContents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04B4H 0002H 009DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_GyroAccelLPF_SMPRTDIVCo
	mov	r1,	#BYTE2 OFFSET _AccGyro_GyroAccelLPF_SMPRTDIVCo
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_GyroAccel_SMPRTDIV
	mov	r3,	#BYTE2 OFFSET _AccGyro_GyroAccel_SMPRTDIV
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04B5H 0001H 0015H
	bal	_$L162

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04B5H 0002H 004EH
_$L133 :
CBLOCK 207 6 1205

;;		main_clrWDT();
CLINEA 0000H 0001H 04B6H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 6 1207

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04B5H 0001H 0015H
_$L162 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04B5H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L133

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04BAH 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04BBH 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_GyroAccelLPF, 1, &AccGyro_GyroAccelLPF_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04BCH 0002H 008FH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_GyroAccelLPF_Contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_GyroAccelLPF_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_GyroAccelLPF
	mov	r3,	#BYTE2 OFFSET _AccGyro_GyroAccelLPF
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04BDH 0001H 0015H
	bal	_$L163

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04BDH 0002H 004EH
_$L137 :
CBLOCK 207 7 1213

;;		main_clrWDT();
CLINEA 0000H 0001H 04BEH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 7 1215

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04BDH 0001H 0015H
_$L163 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04BDH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L137

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04C2H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04C3H 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( MPU6050Address, &AccGyro_INTENABLEReg, 1, &AccGyro_INTENABLEReg_contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04C4H 0002H 008FH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_INTENABLEReg_contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_INTENABLEReg_contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_INTENABLEReg
	mov	r3,	#BYTE2 OFFSET _AccGyro_INTENABLEReg
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04C5H 0001H 0015H
	bal	_$L164

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04C5H 0002H 004EH
_$L141 :
CBLOCK 207 8 1221

;;		main_clrWDT();
CLINEA 0000H 0001H 04C6H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 8 1223

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04C5H 0001H 0015H
_$L164 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04C5H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L141

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04CAH 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04CBH 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( HMC5883Address, &Mag_ConfigA, 1, &Mag_ConfigA_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04CCH 0002H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _Mag_ConfigA_Contents
	mov	r1,	#BYTE2 OFFSET _Mag_ConfigA_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _Mag_ConfigA
	mov	r3,	#BYTE2 OFFSET _Mag_ConfigA
	l	r0,	NEAR _HMC5883Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04CDH 0001H 0015H
	bal	_$L165

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04CDH 0002H 004EH
_$L145 :
CBLOCK 207 9 1229

;;		main_clrWDT();
CLINEA 0000H 0001H 04CEH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 9 1231

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04CDH 0001H 0015H
_$L165 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04CDH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L145

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04D1H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04D2H 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( HMC5883Address, &Mag_ConfigB, 1, &Mag_ConfigB_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04D3H 0002H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _Mag_ConfigB_Contents
	mov	r1,	#BYTE2 OFFSET _Mag_ConfigB_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _Mag_ConfigB
	mov	r3,	#BYTE2 OFFSET _Mag_ConfigB
	l	r0,	NEAR _HMC5883Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04D4H 0001H 0015H
	bal	_$L166

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04D4H 0002H 004EH
_$L149 :
CBLOCK 207 10 1236

;;		main_clrWDT();
CLINEA 0000H 0001H 04D5H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 10 1238

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04D4H 0001H 0015H
_$L166 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04D4H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L149

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 04D8H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 04D9H 0002H 0043H
	bl	_i2c_stop

;;	i2c_startSend( HMC5883Address, &Mag_ModeReg, 1, &Mag_ModeReg_Contents, 1, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 04DAH 0002H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r0,	#BYTE1 OFFSET _Mag_ModeReg_Contents
	mov	r1,	#BYTE2 OFFSET _Mag_ModeReg_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _Mag_ModeReg
	mov	r3,	#BYTE2 OFFSET _Mag_ModeReg
	l	r0,	NEAR _HMC5883Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04DBH 0001H 0015H
	bal	_$L167

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04DBH 0002H 004EH
_$L153 :
CBLOCK 207 11 1243

;;		main_clrWDT();
CLINEA 0000H 0001H 04DCH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 11 1245

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04DBH 0001H 0015H
_$L167 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04DBH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L153

;;	EPB3 = 0;
CLINEA 0000H 0001H 04E0H 0002H 000AH
	rb	0f011h.7

;;	_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 04E3H 0002H 003BH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 04E4H 0002H 0046H
	bl	_i2c_stop

;;	I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 04E5H 0002H 0035H
	sb	0f2a4h.1

;;	i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 04E6H 0002H 007CH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04E7H 0001H 0015H
	bal	_$L168

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04E7H 0002H 0051H
_$L157 :
CBLOCK 207 12 1255

;;		main_clrWDT();
CLINEA 0000H 0001H 04E8H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 207 12 1261

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04E7H 0001H 0015H
_$L168 :

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 04E7H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L157

;;	PD1C1 = 1;
CLINEA 0000H 0001H 04F1H 0002H 000BH
	sb	0f26bh.1

;;	PD1C0 = 1;
CLINEA 0000H 0001H 04F2H 0002H 000BH
	sb	0f26ah.1

;;	PC6DIR = 1;
CLINEA 0000H 0001H 04F5H 0002H 000CH
	sb	0f261h.6

;;	PC6C0 = 1;
CLINEA 0000H 0001H 04F6H 0002H 000BH
	sb	0f262h.6

;;	PC6C1 = 1;
CLINEA 0000H 0001H 04F7H 0002H 000BH
	sb	0f263h.6

;;	PC6MD0 = 0;
CLINEA 0000H 0001H 04F8H 0002H 000CH
	rb	0f264h.6

;;	PC6MD1 = 0;
CLINEA 0000H 0001H 04F9H 0002H 000CH
	rb	0f265h.6
CBLOCKEND 207 2 1277

;;}//End Initialization
CLINEA 0000H 0001H 04FDH 0001H 0015H
	pop	pc
CBLOCKEND 207 1 1277
CFUNCTIONEND 207


	rseg $$Get_RangeData$main
CFUNCTION 219

_Get_RangeData	:
CBLOCK 219 1 1283

;;void Get_RangeData(void){
CLINEA 0000H 0001H 0503H 0001H 0019H
	push	lr
CBLOCK 219 2 1283
CRET 0000H

;;	_flgI2CFin = 0;														//reset I2C completed flag
CLINEA 0000H 0001H 0505H 0002H 0038H
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();															//Make sure I2C is not currently running
CLINEA 0000H 0001H 0506H 0002H 0043H
	bl	_i2c_stop

;;	I20MD = 0;		//Switch to I2C Standard Operation (100kbps)
CLINEA 0000H 0001H 0507H 0002H 0039H
	rb	0f2a4h.1

;;	i2c_startSend( Range_Address, &Range_TakeRangeReading, 1, &AccGyro_PWRMGMT1REG_Contents, 0, (cbfI2c)_funcI2CFin);		//Begin I2C Receive Command
CLINEA 0000H 0001H 0508H 0002H 008FH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#0 
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_PWRMGMT1REG_Contents
	mov	r1,	#BYTE2 OFFSET _AccGyro_PWRMGMT1REG_Contents
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _Range_TakeRangeReading
	mov	r3,	#BYTE2 OFFSET _Range_TakeRangeReading
	l	r0,	NEAR _Range_Address
	bl	_i2c_startSend
	add	sp,	#8 

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0509H 0001H 0001H
	bal	_$L182

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0509H 0002H 004EH
_$L172 :
CBLOCK 219 3 1289

;;		main_clrWDT();
CLINEA 0000H 0001H 050AH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 219 3 1291

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0509H 0001H 0001H
_$L182 :

;;	while(_flgI2CFin != 1){												//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0509H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L172

;;	}
CLINEA 0000H 0000H 050BH 0002H 0002H
_$L171 :

;;	while(RANGE_STAT==1);
CLINEA 0000H 0000H 050CH 000CH 000FH
	tb	0f260h.6
	bne	_$L171

;;	_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 050FH 0002H 003BH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 0510H 0002H 0046H
	bl	_i2c_stop

;;	i2c_startReceive(Range_Address, &Range_TakeRangeReading, 0, &Range_Output, 2, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 0511H 0002H 0080H
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#2 
	push	er0
	mov	r0,	#BYTE1 OFFSET _Range_Output
	mov	r1,	#BYTE2 OFFSET _Range_Output
	push	er0
	mov	er0,	#0 
	push	er0
	mov	r2,	#BYTE1 OFFSET _Range_TakeRangeReading
	mov	r3,	#BYTE2 OFFSET _Range_TakeRangeReading
	l	r0,	NEAR _Range_Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0512H 0001H 0001H
	bal	_$L183

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0512H 0002H 0051H
_$L180 :
CBLOCK 219 4 1298

;;		main_clrWDT();
CLINEA 0000H 0001H 0513H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 219 4 1300

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0512H 0001H 0001H
_$L183 :

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0512H 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L180

;;	Range_out = (Range_Output[0]<<8)+(Range_Output[1]);
CLINEA 0000H 0001H 0516H 0002H 0034H
	l	r0,	NEAR _Range_Output+01h
	mov	r1,	#00h
	l	r2,	NEAR _Range_Output
	mov	r3,	r2
	mov	r2,	#00h
	add	er0,	er2
	st	er0,	NEAR _Range_out

;;	I20MD = 1;		//Switch Back to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 0517H 0002H 003AH
	sb	0f2a4h.1
CBLOCKEND 219 2 1304

;;}
CLINEA 0000H 0001H 0518H 0001H 0001H
	pop	pc
CBLOCKEND 219 1 1304
CFUNCTIONEND 219


	rseg $$Get_PingData$main
CFUNCTION 220

_Get_PingData	:
CBLOCK 220 1 1306

;;void Get_PingData(void){
CLINEA 0000H 0001H 051AH 0001H 0018H
	push	lr
	push	xr4
CBLOCK 220 2 1306
CRET 0004H

;;	PD1DIR = 0;		// PortD Bit0 set to Output Mode...
CLINEA 0000H 0001H 051DH 0002H 0031H
	rb	0f269h.1

;;	PingSensor = 1;
CLINEA 0000H 0001H 051EH 0002H 0010H
	sb	0f268h.1

;;	NOPus();
CLINEA 0000H 0001H 051FH 0002H 0009H
	bl	_NOPus

;;	PingSensor = 0;
CLINEA 0000H 0001H 0520H 0002H 0010H
	rb	0f268h.1

;;	PD1DIR = 1;		// PortD Bit0 set to Input Mode...
CLINEA 0000H 0001H 0523H 0002H 0030H
	sb	0f269h.1

;;	while(PingSensor == 0){
CLINEA 0000H 0001H 0524H 0002H 0018H
	bal	_$L185
_$L187 :
CBLOCK 220 3 1316

;;		NOPus();
CLINEA 0000H 0001H 0525H 0003H 000AH
	bl	_NOPus
CBLOCKEND 220 3 1318

;;	}
CLINEA 0000H 0000H 0526H 0002H 0002H
_$L185 :

;;	while(PingSensor == 0){
CLINEA 0000H 0000H 0524H 000CH 000FH
	tb	0f268h.1
	beq	_$L187

;;	while(PingSensor ==1){
CLINEA 0000H 0001H 0527H 0002H 0017H
	bal	_$L189
_$L191 :
CBLOCK 220 4 1319

;;		NOPus();
CLINEA 0000H 0001H 0528H 0003H 000AH
	bl	_NOPus

;;		Ping_timer++;
CLINEA 0000H 0000H 0529H 0003H 000FH
	l	er0,	NEAR _Ping_timer
	add	er0,	#1 
	st	er0,	NEAR _Ping_timer
CBLOCKEND 220 4 1322

;;	}
CLINEA 0000H 0000H 052AH 0002H 0002H
_$L189 :

;;	while(PingSensor ==1){
CLINEA 0000H 0000H 0527H 000CH 000FH
	tb	0f268h.1
	bne	_$L191

;;	Ping_timer *= 11;	//Convert the ping timer response to us
CLINEA 0000H 0001H 052BH 0002H 003AH
	l	er0,	NEAR _Ping_timer
	mov	er2,	er0
	sllc	r1,	#02h
	sll	r0,	#02h
	add	er0,	er2
	add	er0,	er0
	add	er0,	er2
	st	er0,	NEAR _Ping_timer

;;	Ping_out = (0.0162*Ping_timer) + 0.1359; //Convert us to distance based on Datasheet
CLINEA 0000H 0001H 052CH 0002H 0055H
	mov	er2,	#0 
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	mov	r0,	#082h
	mov	r1,	#0e2h
	mov	r2,	#0c7h
	mov	r3,	#098h
	mov	r4,	#0bbh
	mov	r5,	#096h
	mov	r6,	#090h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	mov	r0,	#013h
	mov	r1,	#061h
	mov	r2,	#0c3h
	mov	r3,	#0d3h
	mov	r4,	#02bh
	mov	r5,	#065h
	mov	r6,	#0c1h
	push	qr0
	bl	__daddu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Ping_out
	st	er2,	NEAR _Ping_out+02h
CBLOCKEND 220 2 1326

;;}
CLINEA 0000H 0001H 052EH 0001H 0001H
	pop	xr4
	pop	pc
CBLOCKEND 220 1 1326
CFUNCTIONEND 220


	rseg $$Get_AccGyroData$main
CFUNCTION 221

_Get_AccGyroData	:
CBLOCK 221 1 1328

;;void Get_AccGyroData(void){
CLINEA 0000H 0001H 0530H 0001H 001BH
	push	lr
	push	xr8
	push	er4
CBLOCK 221 2 1328
CRET 0006H
CSLOCAL 43H 0002H 0000H 0002H "i" 02H 00H 01H

;;	EPB3 = 0;		//Turn off Accel/Gyro Interrupt.  This can probably be removed...
CLINEA 0000H 0001H 0538H 0002H 004DH
	rb	0f011h.7

;;	_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 053AH 0002H 003BH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;	i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 053BH 0002H 0046H
	bl	_i2c_stop

;;	I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 053CH 0002H 0035H
	sb	0f2a4h.1

;;	i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 053DH 0002H 007CH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 053EH 0001H 0001H
	bal	_$L206

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 053EH 0002H 0051H
_$L196 :
CBLOCK 221 3 1342

;;		main_clrWDT();
CLINEA 0000H 0001H 053FH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 221 3 1344

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 053EH 0001H 0001H
_$L206 :

;;	while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 053EH 000CH 000FH
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L196

;;	Accel_Xout[Accel_SavIndex] = (AccGyro_Data[0]<<8)+(AccGyro_Data[1]);
CLINEA 0000H 0001H 0543H 0002H 0045H
	l	r0,	NEAR _AccGyro_Data+01h
	mov	r1,	#00h
	l	r2,	NEAR _AccGyro_Data
	mov	r3,	r2
	mov	r2,	#00h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	l	r4,	NEAR _Accel_SavIndex
	mov	r5,	#00h
	sllc	r5,	#02h
	sll	r4,	#02h
	st	er0,	NEAR _Accel_Xout[er4]
	st	er2,	NEAR _Accel_Xout+02h[er4]

;;	Accel_Yout[Accel_SavIndex] = (AccGyro_Data[2]<<8)+(AccGyro_Data[3]);
CLINEA 0000H 0001H 0544H 0002H 0045H
	l	r0,	NEAR _AccGyro_Data+02h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+03h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _Accel_Yout[er4]
	st	er2,	NEAR _Accel_Yout+02h[er4]

;;	Accel_Zout[Accel_SavIndex] = (AccGyro_Data[4]<<8)+(AccGyro_Data[5]);
CLINEA 0000H 0001H 0545H 0002H 0045H
	l	r0,	NEAR _AccGyro_Data+04h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+05h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _Accel_Zout[er4]
	st	er2,	NEAR _Accel_Zout+02h[er4]

;;	Gyro_Xout = (AccGyro_Data[8]<<8)+(AccGyro_Data[9]);
CLINEA 0000H 0001H 054EH 0002H 0034H
	l	r0,	NEAR _AccGyro_Data+08h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+09h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _Gyro_Xout
	st	er2,	NEAR _Gyro_Xout+02h

;;	Gyro_Yout = (AccGyro_Data[10]<<8)+(AccGyro_Data[11]);
CLINEA 0000H 0001H 054FH 0002H 0036H
	l	r0,	NEAR _AccGyro_Data+0ah
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+0bh
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _Gyro_Yout
	st	er2,	NEAR _Gyro_Yout+02h

;;	Gyro_Zout = (AccGyro_Data[12]<<8)+(AccGyro_Data[13]);
CLINEA 0000H 0001H 0550H 0002H 0036H
	l	r0,	NEAR _AccGyro_Data+0ch
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+0dh
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _Gyro_Zout
	st	er2,	NEAR _Gyro_Zout+02h

;;	Accel_Xout[Accel_SavIndex] -= Accel_Xcal[0];
CLINEA 0000H 0001H 0552H 0002H 002DH
	l	er0,	NEAR _Accel_Xout[er4]
	l	er2,	NEAR _Accel_Xout+02h[er4]
	push	xr0
	l	er0,	NEAR _Accel_Xcal
	l	er2,	NEAR _Accel_Xcal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xout[er4]
	st	er2,	NEAR _Accel_Xout+02h[er4]

;;	Accel_Yout[Accel_SavIndex] -= Accel_Ycal[0];
CLINEA 0000H 0001H 0553H 0002H 002DH
	l	er0,	NEAR _Accel_Yout[er4]
	l	er2,	NEAR _Accel_Yout+02h[er4]
	push	xr0
	l	er0,	NEAR _Accel_Ycal
	l	er2,	NEAR _Accel_Ycal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Yout[er4]
	st	er2,	NEAR _Accel_Yout+02h[er4]

;;	Accel_Zout[Accel_SavIndex] -= Accel_Zcal[0];
CLINEA 0000H 0001H 0554H 0002H 002DH
	l	er0,	NEAR _Accel_Zout[er4]
	l	er2,	NEAR _Accel_Zout+02h[er4]
	push	xr0
	l	er0,	NEAR _Accel_Zcal
	l	er2,	NEAR _Accel_Zcal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zout[er4]
	st	er2,	NEAR _Accel_Zout+02h[er4]

;;	Gyro_Xout -= Gyro_Xcal;
CLINEA 0000H 0001H 0556H 0002H 0018H
	l	er0,	NEAR _Gyro_Xout
	l	er2,	NEAR _Gyro_Xout+02h
	push	xr0
	l	er0,	NEAR _Gyro_Xcal
	l	er2,	NEAR _Gyro_Xcal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Xout
	st	er2,	NEAR _Gyro_Xout+02h

;;	Gyro_Yout -= Gyro_Ycal;
CLINEA 0000H 0001H 0557H 0002H 0018H
	l	er0,	NEAR _Gyro_Yout
	l	er2,	NEAR _Gyro_Yout+02h
	push	xr0
	l	er0,	NEAR _Gyro_Ycal
	l	er2,	NEAR _Gyro_Ycal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Yout
	st	er2,	NEAR _Gyro_Yout+02h

;;	Gyro_Zout -= Gyro_Zcal;
CLINEA 0000H 0001H 0558H 0002H 0018H
	l	er0,	NEAR _Gyro_Zout
	l	er2,	NEAR _Gyro_Zout+02h
	push	xr0
	l	er0,	NEAR _Gyro_Zcal
	l	er2,	NEAR _Gyro_Zcal+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Zout
	st	er2,	NEAR _Gyro_Zout+02h

;;	for(i=0; i<AccelAvg; i++)
CLINEA 0000H 0001H 055AH 0002H 001AH
	mov	er0,	#0 
	st	er0,	NEAR _$ST0
_$L200 :
CBLOCK 221 4 1371

;;		Accel_Xout_Avg += Accel_Xout[i];
CLINEA 0000H 0001H 055CH 0003H 0022H
	mov	er4,	er0
	sllc	r5,	#02h
	sll	r4,	#02h
	l	er8,	NEAR _Accel_Xout[er4]
	l	er10,	NEAR _Accel_Xout+02h[er4]
	push	xr8
	l	er0,	NEAR _Accel_Xout_Avg
	l	er2,	NEAR _Accel_Xout_Avg+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xout_Avg
	st	er2,	NEAR _Accel_Xout_Avg+02h

;;		Accel_Yout_Avg += Accel_Yout[i];
CLINEA 0000H 0001H 055DH 0003H 0022H
	l	er8,	NEAR _Accel_Yout[er4]
	l	er10,	NEAR _Accel_Yout+02h[er4]
	push	xr8
	l	er0,	NEAR _Accel_Yout_Avg
	l	er2,	NEAR _Accel_Yout_Avg+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Yout_Avg
	st	er2,	NEAR _Accel_Yout_Avg+02h

;;		Accel_Zout_Avg += Accel_Zout[i];
CLINEA 0000H 0001H 055EH 0003H 0022H
	l	er0,	NEAR _Accel_Zout[er4]
	l	er2,	NEAR _Accel_Zout+02h[er4]
	push	xr0
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zout_Avg
	st	er2,	NEAR _Accel_Zout_Avg+02h
CBLOCKEND 221 4 1375

;;	for(i=0; i<AccelAvg; i++)
CLINEA 0000H 0000H 055AH 0002H 001AH
	l	er0,	NEAR _$ST0
	add	er0,	#1 
	st	er0,	NEAR _$ST0

;;	for(i=0; i<AccelAvg; i++)
CLINEA 0000H 0000H 055AH 000CH 000FH
	cmp	r0,	#011h
	cmpc	r1,	#00h
	blts	_$L200

;;	Accel_Xout_Avg /= AccelAvg;
CLINEA 0000H 0001H 0560H 0002H 001CH
	l	er0,	NEAR _Accel_Xout_Avg
	l	er2,	NEAR _Accel_Xout_Avg+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#088h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xout_Avg
	st	er2,	NEAR _Accel_Xout_Avg+02h

;;	Accel_Yout_Avg /= AccelAvg;
CLINEA 0000H 0001H 0561H 0002H 001CH
	l	er0,	NEAR _Accel_Yout_Avg
	l	er2,	NEAR _Accel_Yout_Avg+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#088h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Yout_Avg
	st	er2,	NEAR _Accel_Yout_Avg+02h

;;	Accel_Zout_Avg /= AccelAvg;
CLINEA 0000H 0001H 0562H 0002H 001CH
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#088h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zout_Avg
	st	er2,	NEAR _Accel_Zout_Avg+02h

;;	Accel_SavIndex++;
CLINEA 0000H 0000H 0565H 0002H 0012H
	lea	OFFSET _Accel_SavIndex
	inc	[ea]
	l	r0,	NEAR _Accel_SavIndex

;;	if(Accel_SavIndex >= AccelAvg){
CLINEA 0000H 0001H 0566H 0002H 0020H
	cmp	r0,	#011h
	blt	_$L204
CBLOCK 221 5 1382

;;		Accel_SavIndex = 0;
CLINEA 0000H 0001H 0567H 0003H 0015H
	mov	r0,	#00h
	st	r0,	NEAR _Accel_SavIndex
CBLOCKEND 221 5 1384

;;	}
CLINEA 0000H 0000H 0568H 0002H 0002H
_$L204 :

;;	EPB3 = 1;		//Turns Accel/Gyro Interrupt back on... again, this may not be necessary
CLINEA 0000H 0001H 056BH 0002H 0054H
	sb	0f011h.7

;;	AccGyro_CF_FlagCounter++;	//Counts up to the number of values are in the buffer so main loop can call CF filter function
CLINEA 0000H 0000H 056CH 0002H 0079H
	lea	OFFSET _AccGyro_CF_FlagCounter
	inc	[ea]
CBLOCKEND 221 2 1389

;;}
CLINEA 0000H 0001H 056DH 0001H 0001H
	pop	er4
	pop	xr8
	pop	pc
CBLOCKEND 221 1 1389
CFUNCTIONEND 221


	rseg $$Run_AccGyroCF$main
CFUNCTION 222

_Run_AccGyroCF	:
CBLOCK 222 1 1391

;;void Run_AccGyroCF(void){
CLINEA 0000H 0001H 056FH 0001H 0019H
	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-08
	push	xr4
CBLOCK 222 2 1391
CRET 000EH
CSLOCAL 43H 0002H 0001H 0002H "i" 02H 00H 01H
CSLOCAL 43H 0001H 0002H 0002H "I2CCont" 02H 00H 00H

;;	CF_Gyro_CurrentCount = CF_Gyro_Counter * .001;		//Timer in Seconds (.007 used to convert 128Hz TBC to seconds)
CLINEA 0000H 0001H 0575H 0002H 006FH
	l	er0,	NEAR _CF_Gyro_Counter
	l	er2,	NEAR _CF_Gyro_Counter+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#0fch
	mov	r1,	#0a9h
	mov	r2,	#0f1h
	mov	r3,	#0d2h
	mov	r4,	#04dh
	mov	r5,	#062h
	mov	r6,	#050h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Gyro_CurrentCount
	st	er2,	NEAR _CF_Gyro_CurrentCount+02h

;;	CF_Gyro_Counter = 0;
CLINEA 0000H 0001H 0576H 0002H 0015H
	mov	er0,	#0 
	st	er0,	NEAR _CF_Gyro_Counter
	st	er0,	NEAR _CF_Gyro_Counter+02h

;;	CF_Gyro_YPitch = CF_YPitch + ((Gyro_Xout/AccGyro_GyroScaling) * CF_Gyro_CurrentCount);
CLINEA 0000H 0001H 0578H 0002H 0057H
	l	er0,	NEAR _Gyro_Xout
	l	er2,	NEAR _Gyro_Xout+02h
	push	xr0
	l	er0,	NEAR _AccGyro_GyroScaling
	l	er2,	NEAR _AccGyro_GyroScaling+02h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	l	er0,	NEAR _CF_Gyro_CurrentCount
	l	er2,	NEAR _CF_Gyro_CurrentCount+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	l	er0,	NEAR _CF_YPitch
	l	er2,	NEAR _CF_YPitch+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Gyro_YPitch
	st	er2,	NEAR _CF_Gyro_YPitch+02h

;;	CF_Gyro_XRoll = CF_XRoll - ((Gyro_Yout/AccGyro_GyroScaling) * CF_Gyro_CurrentCount);	
CLINEA 0000H 0001H 0579H 0002H 0056H
	l	er0,	NEAR _Gyro_Yout
	l	er2,	NEAR _Gyro_Yout+02h
	push	xr0
	l	er0,	NEAR _AccGyro_GyroScaling
	l	er2,	NEAR _AccGyro_GyroScaling+02h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	l	er0,	NEAR _CF_Gyro_CurrentCount
	l	er2,	NEAR _CF_Gyro_CurrentCount+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _CF_XRoll
	l	er6,	NEAR _CF_XRoll+02h
	push	qr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Gyro_XRoll
	st	er2,	NEAR _CF_Gyro_XRoll+02h

;;	CF_Accel_ForceMagApprox = abs(Accel_Xout_Avg) + abs(Accel_Yout_Avg) + abs(Accel_Zout_Avg);
CLINEA 0000H 0000H 057BH 0002H 005BH
	l	er0,	NEAR _Accel_Xout_Avg
	l	er2,	NEAR _Accel_Xout_Avg+02h
	push	xr0
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	bl	_abs
	mov	er4,	er0
	l	er0,	NEAR _Accel_Yout_Avg
	l	er2,	NEAR _Accel_Yout_Avg+02h
	push	xr0
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	bl	_abs
	add	er4,	er0
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	bl	_abs
	mov	er2,	er0
	mov	er0,	er4
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	st	er0,	NEAR _CF_Accel_ForceMagApprox
	st	er2,	NEAR _CF_Accel_ForceMagApprox+02h

;;	if (CF_Accel_ForceMagApprox > 16384 && CF_Accel_ForceMagApprox < 32768)
CLINEA 0000H 0001H 057CH 0002H 0048H
	push	xr0
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#046h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bgt	_$M10
	b	_$L208
_$M10 :
	l	er0,	NEAR _CF_Accel_ForceMagApprox
	l	er2,	NEAR _CF_Accel_ForceMagApprox+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#047h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$M11
	b	_$L208
_$M11 :
CBLOCK 222 3 1405

;;        CF_Accel_YPitch = atan2(Accel_Yout_Avg, Accel_Zout_Avg) * (57.29);	//57.29 = 180deg/pi
CLINEA 0000H 0000H 057FH 0009H 005EH
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_Yout_Avg
	l	er2,	NEAR _Accel_Yout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	er0,	fp
	add	er0,	#-8
	bl	_atan2
	add	sp,	#16
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#085h
	mov	r1,	#0ebh
	mov	r2,	#051h
	mov	r3,	#0b8h
	mov	r4,	#01eh
	mov	r5,	#0a5h
	mov	r6,	#04ch
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Accel_YPitch
	st	er2,	NEAR _CF_Accel_YPitch+02h

;;        CF_YPitch = (CF_Gyro_YPitch * CF_HPF) + (CF_Accel_YPitch * CF_LPF);
CLINEA 0000H 0001H 0580H 0009H 004BH
	l	er0,	NEAR _CF_Gyro_YPitch
	l	er2,	NEAR _CF_Gyro_YPitch+02h
	push	xr0
	l	er0,	NEAR _CF_HPF
	l	er2,	NEAR _CF_HPF+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _CF_Accel_YPitch
	l	er6,	NEAR _CF_Accel_YPitch+02h
	push	xr4
	l	er4,	NEAR _CF_LPF
	l	er6,	NEAR _CF_LPF+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_YPitch
	st	er2,	NEAR _CF_YPitch+02h

;;        CF_Accel_XRoll = atan2(Accel_Xout_Avg, Accel_Zout_Avg) * (57.29);
CLINEA 0000H 0000H 0583H 0009H 0049H
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_Xout_Avg
	l	er2,	NEAR _Accel_Xout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	er0,	fp
	add	er0,	#-8
	bl	_atan2
	add	sp,	#16
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#085h
	mov	r1,	#0ebh
	mov	r2,	#051h
	mov	r3,	#0b8h
	mov	r4,	#01eh
	mov	r5,	#0a5h
	mov	r6,	#04ch
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Accel_XRoll
	st	er2,	NEAR _CF_Accel_XRoll+02h

;;        CF_XRoll = (CF_Gyro_XRoll * CF_HPF) + (CF_Accel_XRoll * CF_LPF);
CLINEA 0000H 0001H 0584H 0009H 0048H
	l	er0,	NEAR _CF_Gyro_XRoll
	l	er2,	NEAR _CF_Gyro_XRoll+02h
	push	xr0
	l	er0,	NEAR _CF_HPF
	l	er2,	NEAR _CF_HPF+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _CF_Accel_XRoll
	l	er6,	NEAR _CF_Accel_XRoll+02h
	push	xr4
	l	er4,	NEAR _CF_LPF
	l	er6,	NEAR _CF_LPF+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
CBLOCKEND 222 3 1413

;;	else{
CLINEA 0000H 0001H 0586H 0002H 0006H
	b	_$L215
_$L208 :
CBLOCK 222 4 1414

;;        CF_Accel_YPitch = atan2(Accel_Yout_Avg, Accel_Zout_Avg) * (57.29);	//57.29 = 180deg/pi
CLINEA 0000H 0000H 0588H 0009H 005EH
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_Yout_Avg
	l	er2,	NEAR _Accel_Yout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	er0,	fp
	add	er0,	#-8
	bl	_atan2
	add	sp,	#16
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#085h
	mov	r1,	#0ebh
	mov	r2,	#051h
	mov	r3,	#0b8h
	mov	r4,	#01eh
	mov	r5,	#0a5h
	mov	r6,	#04ch
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Accel_YPitch
	st	er2,	NEAR _CF_Accel_YPitch+02h

;;		CF_YPitch = CF_Gyro_YPitch;
CLINEA 0000H 0001H 0589H 0003H 001DH
	l	er0,	NEAR _CF_Gyro_YPitch
	l	er2,	NEAR _CF_Gyro_YPitch+02h
	st	er0,	NEAR _CF_YPitch
	st	er2,	NEAR _CF_YPitch+02h

;;        CF_Accel_XRoll = atan2(Accel_Xout_Avg, Accel_Zout_Avg) * (57.29);
CLINEA 0000H 0000H 058CH 0009H 0049H
	l	er0,	NEAR _Accel_Zout_Avg
	l	er2,	NEAR _Accel_Zout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_Xout_Avg
	l	er2,	NEAR _Accel_Xout_Avg+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	er0,	fp
	add	er0,	#-8
	bl	_atan2
	add	sp,	#16
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#085h
	mov	r1,	#0ebh
	mov	r2,	#051h
	mov	r3,	#0b8h
	mov	r4,	#01eh
	mov	r5,	#0a5h
	mov	r6,	#04ch
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Accel_XRoll
	st	er2,	NEAR _CF_Accel_XRoll+02h

;;		CF_XRoll = CF_Gyro_XRoll;
CLINEA 0000H 0001H 058DH 0003H 001BH
	l	er0,	NEAR _CF_Gyro_XRoll
	l	er2,	NEAR _CF_Gyro_XRoll+02h
CBLOCKEND 222 4 1422

;;	}
CLINEA 0000H 0000H 058EH 0002H 0002H
_$L215 :
	st	er0,	NEAR _CF_XRoll
	st	er2,	NEAR _CF_XRoll+02h

;;	Accel_PID_GoCounter++;		//Counts up to 4 to trigger the PID loop to start.
CLINEA 0000H 0000H 05AFH 0002H 004BH
	lea	OFFSET _Accel_PID_GoCounter
	inc	[ea]
CBLOCKEND 222 2 1457

;;}
CLINEA 0000H 0001H 05B1H 0001H 0001H
	pop	xr4
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 222 1 1457
CFUNCTIONEND 222


	rseg $$ClearVariables$main
CFUNCTION 224

_ClearVariables	:
CBLOCK 224 1 1500

;;void ClearVariables(void){
CLINEA 0000H 0001H 05DCH 0001H 001AH
CBLOCK 224 2 1500

;;	Temp_out = 0;
CLINEA 0000H 0001H 05DDH 0002H 000EH
	mov	er0,	#0 
	st	er0,	NEAR _Temp_out
	st	er0,	NEAR _Temp_out+02h

;;	Mag_Xout = 0;
CLINEA 0000H 0001H 05DEH 0002H 000EH
	st	er0,	NEAR _Mag_Xout
	st	er0,	NEAR _Mag_Xout+02h

;;	Mag_Yout = 0;
CLINEA 0000H 0001H 05DFH 0002H 000EH
	st	er0,	NEAR _Mag_Yout
	st	er0,	NEAR _Mag_Yout+02h

;;	Mag_Zout = 0;
CLINEA 0000H 0001H 05E0H 0002H 000EH
	st	er0,	NEAR _Mag_Zout
	st	er0,	NEAR _Mag_Zout+02h

;;	Mag_Angle = 0;
CLINEA 0000H 0001H 05E1H 0002H 000FH
	st	er0,	NEAR _Mag_Angle
	st	er0,	NEAR _Mag_Angle+02h

;;	Ping_timer = 0;
CLINEA 0000H 0001H 05E2H 0002H 0010H
	st	er0,	NEAR _Ping_timer

;;	Ping_out = 0;
CLINEA 0000H 0001H 05E3H 0002H 000EH
	st	er0,	NEAR _Ping_out
	st	er0,	NEAR _Ping_out+02h

;;	Range_out = 0;
CLINEA 0000H 0001H 05E4H 0002H 000FH
	st	er0,	NEAR _Range_out
CBLOCKEND 224 2 1509

;;}
CLINEA 0000H 0001H 05E5H 0001H 0001H
	rt
CBLOCKEND 224 1 1509
CFUNCTIONEND 224


	rseg $$ReturnSensorData$main
CFUNCTION 225

_ReturnSensorData	:
CBLOCK 225 1 1511

;;void ReturnSensorData(void){
CLINEA 0000H 0001H 05E7H 0001H 001CH
	push	lr
CBLOCK 225 2 1511
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "i" 02H 00H 01H

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 05E9H 0002H 0017H
	mov	er0,	#0 
_$L220 :
CBLOCK 225 3 1514

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 05EBH 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 225 3 1516

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 05E9H 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 05E9H 000CH 000FH
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L220

;;	sprintf(SensorReturn, "%f,%f,%f,%f,%f,%f,%f,%u", Accel_Xout, Accel_Yout, Accel_Zout, Gyro_Xout, Gyro_Yout, Gyro_Zout, Mag_Angle,Range_out);
CLINEA 0000H 0001H 05EEH 0002H 008CH
	l	er0,	NEAR _Range_out
	push	er0
	l	er0,	NEAR _Mag_Angle
	l	er2,	NEAR _Mag_Angle+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Gyro_Zout
	l	er2,	NEAR _Gyro_Zout+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Gyro_Yout
	l	er2,	NEAR _Gyro_Yout+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Gyro_Xout
	l	er2,	NEAR _Gyro_Xout+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#BYTE1 OFFSET _Accel_Zout
	mov	r1,	#BYTE2 OFFSET _Accel_Zout
	push	er0
	mov	r0,	#BYTE1 OFFSET _Accel_Yout
	mov	r1,	#BYTE2 OFFSET _Accel_Yout
	push	er0
	mov	r0,	#BYTE1 OFFSET _Accel_Xout
	mov	r1,	#BYTE2 OFFSET _Accel_Xout
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S224
	mov	r1,	#BYTE2 OFFSET $$S224
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#44

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 05F0H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 05F1H 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 05F4H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 05F5H 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 05F6H 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 05F7H 0001H 0001H
	bal	_$L229

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 05F7H 0002H 0019H
_$L227 :
CBLOCK 225 4 1527

;;		main_clrWDT();
CLINEA 0000H 0001H 05F8H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 225 4 1529

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 05F7H 0001H 0001H
_$L229 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 05F7H 000CH 000FH
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L227
CBLOCKEND 225 2 1530

;;}
CLINEA 0000H 0001H 05FAH 0001H 0001H
	pop	pc
CBLOCKEND 225 1 1530
CFUNCTIONEND 225


	rseg $$ReturnAccelData$main
CFUNCTION 226

_ReturnAccelData	:
CBLOCK 226 1 1532

;;void ReturnAccelData(void){
CLINEA 0000H 0001H 05FCH 0001H 001BH
	push	lr
CBLOCK 226 2 1532
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "i" 02H 00H 01H

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 05FEH 0002H 0017H
	mov	er0,	#0 
_$L233 :
CBLOCK 226 3 1535

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0600H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 226 3 1537

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 05FEH 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 05FEH 000CH 000FH
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L233

;;	sprintf(SensorReturn, "%f,%f,%f", Accel_Xout, Accel_Yout, Accel_Zout);
CLINEA 0000H 0001H 0604H 0002H 0047H
	mov	r0,	#BYTE1 OFFSET _Accel_Zout
	mov	r1,	#BYTE2 OFFSET _Accel_Zout
	push	er0
	mov	r0,	#BYTE1 OFFSET _Accel_Yout
	mov	r1,	#BYTE2 OFFSET _Accel_Yout
	push	er0
	mov	r0,	#BYTE1 OFFSET _Accel_Xout
	mov	r1,	#BYTE2 OFFSET _Accel_Xout
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S237
	mov	r1,	#BYTE2 OFFSET $$S237
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#10

;;	SensorReturn[148] = 0x0D;	//CR
CLINEA 0000H 0001H 0606H 0002H 001FH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;	//LF
CLINEA 0000H 0001H 0607H 0002H 001FH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 060AH 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 060BH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 060CH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 060DH 0001H 0001H
	bal	_$L242

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 060DH 0002H 0019H
_$L240 :
CBLOCK 226 4 1549

;;		main_clrWDT();
CLINEA 0000H 0001H 060EH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 226 4 1551

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 060DH 0001H 0001H
_$L242 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 060DH 000CH 000FH
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L240
CBLOCKEND 226 2 1552

;;}
CLINEA 0000H 0001H 0610H 0001H 0001H
	pop	pc
CBLOCKEND 226 1 1552
CFUNCTIONEND 226


	rseg $$ReturnMagData$main
CFUNCTION 227

_ReturnMagData	:
CBLOCK 227 1 1554

;;void ReturnMagData(void){
CLINEA 0000H 0001H 0612H 0001H 0019H
	push	lr
CBLOCK 227 2 1554
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "i" 02H 00H 01H

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0614H 0002H 0017H
	mov	er0,	#0 
_$L246 :
CBLOCK 227 3 1557

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0616H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 227 3 1559

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0614H 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0614H 000CH 000FH
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L246

;;	sprintf(SensorReturn, "%f", Mag_Angle);
CLINEA 0000H 0001H 0618H 0002H 0028H
	l	er0,	NEAR _Mag_Angle
	l	er2,	NEAR _Mag_Angle+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#12

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 061AH 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 061BH 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 061EH 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 061FH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 0620H 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0621H 0001H 0001H
	bal	_$L255

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0621H 0002H 0019H
_$L253 :
CBLOCK 227 4 1569

;;		main_clrWDT();
CLINEA 0000H 0001H 0622H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 227 4 1571

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0621H 0001H 0001H
_$L255 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0621H 000CH 000FH
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L253
CBLOCKEND 227 2 1572

;;}
CLINEA 0000H 0001H 0624H 0001H 0001H
	pop	pc
CBLOCKEND 227 1 1572
CFUNCTIONEND 227


	rseg $$CalibrateMotors$main
CFUNCTION 228

_CalibrateMotors	:
CBLOCK 228 1 1580

;;void CalibrateMotors(void){
CLINEA 0000H 0001H 062CH 0001H 001BH
CBLOCK 228 2 1580
CLOCAL 4BH 0002H 0000H 0002H "i" 02H 00H 01H

;;	PFRUN = 0;
CLINEA 0000H 0001H 0668H 0002H 000BH
	rb	0f973h.0

;;	PERUN = 0;
CLINEA 0000H 0001H 0669H 0002H 000BH
	rb	0f937h.0

;;	PDRUN = 0;
CLINEA 0000H 0001H 066AH 0002H 000BH
	rb	0f927h.0

;;	PCRUN = 0;
CLINEA 0000H 0001H 066BH 0002H 000BH
	rb	0f917h.0

;;	PWF0D = PWMSafeDuty; //Can't be running to change
CLINEA 0000H 0001H 066DH 0002H 0032H
	l	er0,	NEAR _PWMSafeDuty
	st	er0,	0f962h

;;	PWED = PWMSafeDuty;
CLINEA 0000H 0001H 066EH 0002H 0014H
	st	er0,	0f932h

;;	PWDD = PWMSafeDuty;
CLINEA 0000H 0001H 066FH 0002H 0014H
	st	er0,	0f922h

;;	PWCD = PWMSafeDuty;
CLINEA 0000H 0001H 0670H 0002H 0014H
	st	er0,	0f912h

;;	PFRUN = 1;
CLINEA 0000H 0001H 0672H 0002H 000BH
	sb	0f973h.0

;;	PERUN = 1;
CLINEA 0000H 0001H 0673H 0002H 000BH
	sb	0f937h.0

;;	PDRUN = 1;
CLINEA 0000H 0001H 0674H 0002H 000BH
	sb	0f927h.0

;;	PCRUN = 1;
CLINEA 0000H 0001H 0675H 0002H 000BH
	sb	0f917h.0

;;	CF_Gyro_Counter = 0;
CLINEA 0000H 0001H 0678H 0002H 0015H
	mov	er0,	#0 
	st	er0,	NEAR _CF_Gyro_Counter
	st	er0,	NEAR _CF_Gyro_Counter+02h

;;	Accel_PID_XRollCounter_I = 0;
CLINEA 0000H 0001H 0679H 0002H 001EH
	st	er0,	NEAR _Accel_PID_XRollCounter_I

;;	Accel_PID_XRollCounter_D = 0;
CLINEA 0000H 0001H 067AH 0002H 001EH
	st	er0,	NEAR _Accel_PID_XRollCounter_D

;;	Accel_PID_YPitchCounter_I = 0;
CLINEA 0000H 0001H 067BH 0002H 001FH
	st	er0,	NEAR _Accel_PID_YPitchCounter_I

;;	Accel_PID_YPitchCounter_D = 0;
CLINEA 0000H 0001H 067CH 0002H 001FH
	st	er0,	NEAR _Accel_PID_YPitchCounter_D

;;	Range_PIDCounter = 0;
CLINEA 0000H 0001H 067DH 0002H 0016H
	st	er0,	NEAR _Range_PIDCounter
CBLOCKEND 228 2 1681

;;}
CLINEA 0000H 0001H 0691H 0001H 0001H
	rt
CBLOCKEND 228 1 1681
CFUNCTIONEND 228


	rseg $$CalibrateGyro$main
CFUNCTION 229

_CalibrateGyro	:
CBLOCK 229 1 1684

;;void CalibrateGyro(void){
CLINEA 0000H 0001H 0694H 0001H 0019H
	push	lr
	push	er4
CBLOCK 229 2 1684
CRET 0002H
CLOCAL 47H 0002H 0026H 0002H "i" 02H 00H 01H

;;	if(!isDemoing)
CLINEA 0000H 0000H 0696H 0002H 000FH
	l	er0,	NEAR _isDemoing
	beq	_$M18
	b	_$L274
_$M18 :
CBLOCK 229 3 1687

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0699H 0007H 000CH
	mov	er0,	#0 

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0699H 0015H 0017H
_$L264 :
CBLOCK 229 4 1690

;;			SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 069BH 0004H 001AH
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 229 4 1692

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0699H 0015H 0017H
	add	er0,	#1 

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0699H 000EH 0013H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L264

;;		sprintf(SensorReturn, "Gyro Calibration: Please Keep the Quad Flat and Return Any 2 chars to Start");
CLINEA 0000H 0001H 069DH 0003H 0067H
	mov	r0,	#BYTE1 OFFSET $$S268
	mov	r1,	#BYTE2 OFFSET $$S268
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;		SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 069FH 0003H 001BH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;		SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 06A0H 0003H 001BH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 06A2H 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 06A3H 0003H 000EH
	bl	_uart_stop

;;		uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 06A4H 0003H 0032H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06A5H 0001H 0001H
	bal	_$L302

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06A5H 0003H 001AH
_$L271 :
CBLOCK 229 5 1701

;;			NOP1000();
CLINEA 0000H 0001H 06A6H 0004H 000DH
	bl	_NOP1000

;;			main_clrWDT();
CLINEA 0000H 0001H 06A7H 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 229 5 1704

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06A5H 0001H 0001H
_$L302 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06A5H 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L271

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 06ABH 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 06ACH 0003H 000EH
	bl	_uart_stop

;;		uart_startReceive(RecWorld, 2, _funcUartFin);
CLINEA 0000H 0001H 06ADH 0003H 002FH
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	er2,	#2 
	mov	r0,	#BYTE1 OFFSET _RecWorld
	mov	r1,	#BYTE2 OFFSET _RecWorld
	bl	_uart_startReceive
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06AEH 0001H 0001H
	bal	_$L303

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06AEH 0003H 001AH
_$L275 :
CBLOCK 229 6 1710

;;			main_clrWDT();
CLINEA 0000H 0001H 06AFH 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 229 6 1712

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06AEH 0001H 0001H
_$L303 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06AEH 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L275

;;		}
CLINEA 0000H 0000H 06B0H 0003H 0003H
_$L274 :
CBLOCKEND 229 3 1713

;;	i = 0;
CLINEA 0000H 0001H 06B2H 0002H 0007H
	mov	er4,	#0 

;;	EPB3 = 1;					//Enable Accel/Gyro Interrupt Pin
CLINEA 0000H 0001H 06B4H 0002H 0030H
	sb	0f011h.7

;;	while(i < 10){
CLINEA 0000H 0000H 06B5H 0002H 000FH
_$L279 :
CBLOCK 229 7 1717

;;		if(AccGyro_ReadFlag >= 1){		//Triggered by External Interrupt (flag set in AccelGyroDataReady_ISR)
CLINEA 0000H 0001H 06B6H 0003H 0064H
	l	r0,	NEAR _AccGyro_ReadFlag
	cmp	r0,	#01h
	bge	_$M19
	b	_$L281
_$M19 :
CBLOCK 229 8 1718

;;			_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 06BAH 0004H 003DH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;			i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 06BBH 0004H 0048H
	bl	_i2c_stop

;;			I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 06BCH 0004H 0037H
	sb	0f2a4h.1

;;			i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 06BDH 0004H 007EH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;			while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 06BEH 0001H 0001H
	bal	_$L304

;;			while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 06BEH 0004H 0053H
_$L285 :
CBLOCK 229 9 1726

;;				main_clrWDT();	
CLINEA 0000H 0001H 06BFH 0005H 0013H
	bl	_main_clrWDT
CBLOCKEND 229 9 1728

;;			while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 06BEH 0001H 0001H
_$L304 :

;;			while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 06BEH 000EH 0013H
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L285

;;			Gyro_Xcal += (AccGyro_Data[8]<<8)+(AccGyro_Data[9]);
CLINEA 0000H 0001H 06C4H 0004H 0037H
	l	r0,	NEAR _AccGyro_Data+08h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+09h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	l	er0,	NEAR _Gyro_Xcal
	l	er2,	NEAR _Gyro_Xcal+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Xcal
	st	er2,	NEAR _Gyro_Xcal+02h

;;			Gyro_Ycal += (AccGyro_Data[10]<<8)+(AccGyro_Data[11]);
CLINEA 0000H 0001H 06C5H 0004H 0039H
	l	r0,	NEAR _AccGyro_Data+0ah
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+0bh
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	l	er0,	NEAR _Gyro_Ycal
	l	er2,	NEAR _Gyro_Ycal+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Ycal
	st	er2,	NEAR _Gyro_Ycal+02h

;;			Gyro_Zcal += (AccGyro_Data[12]<<8)+(AccGyro_Data[13]);
CLINEA 0000H 0001H 06C6H 0004H 0039H
	l	r0,	NEAR _AccGyro_Data+0ch
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+0dh
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	l	er0,	NEAR _Gyro_Zcal
	l	er2,	NEAR _Gyro_Zcal+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Zcal
	st	er2,	NEAR _Gyro_Zcal+02h

;;			Accel_Xcal[0] += (AccGyro_Data[0]<<8)+(AccGyro_Data[1]);
CLINEA 0000H 0001H 06C7H 0004H 003BH
	l	r0,	NEAR _AccGyro_Data+01h
	mov	r1,	#00h
	l	r2,	NEAR _AccGyro_Data
	mov	r3,	r2
	mov	r2,	#00h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	l	er0,	NEAR _Accel_Xcal
	l	er2,	NEAR _Accel_Xcal+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal
	st	er2,	NEAR _Accel_Xcal+02h

;;			Accel_Ycal[0] += (AccGyro_Data[2]<<8)+(AccGyro_Data[3]);
CLINEA 0000H 0001H 06C8H 0004H 003BH
	l	r0,	NEAR _AccGyro_Data+02h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+03h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	l	er0,	NEAR _Accel_Ycal
	l	er2,	NEAR _Accel_Ycal+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal
	st	er2,	NEAR _Accel_Ycal+02h

;;			i++;
CLINEA 0000H 0000H 06C9H 0004H 0007H
	add	er4,	#1 
CBLOCKEND 229 8 1738

;;		}
CLINEA 0000H 0000H 06CAH 0003H 0003H
_$L281 :
CBLOCKEND 229 7 1739

;;	while(i < 10){
CLINEA 0000H 0000H 06B5H 000EH 0013H
	cmp	r4,	#0ah
	cmpc	r5,	#00h
	bges	_$M20
	b	_$L279
_$M20 :

;;	Gyro_Xcal /= 10;
CLINEA 0000H 0001H 06CCH 0002H 0011H
	l	er0,	NEAR _Gyro_Xcal
	l	er2,	NEAR _Gyro_Xcal+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Xcal
	st	er2,	NEAR _Gyro_Xcal+02h

;;	Gyro_Ycal /= 10;
CLINEA 0000H 0001H 06CDH 0002H 0011H
	l	er0,	NEAR _Gyro_Ycal
	l	er2,	NEAR _Gyro_Ycal+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Ycal
	st	er2,	NEAR _Gyro_Ycal+02h

;;	Gyro_Zcal /= 10;
CLINEA 0000H 0001H 06CEH 0002H 0011H
	l	er0,	NEAR _Gyro_Zcal
	l	er2,	NEAR _Gyro_Zcal+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Gyro_Zcal
	st	er2,	NEAR _Gyro_Zcal+02h

;;	EPB3 = 0;					//Enable Accel/Gyro Interrupt Pin
CLINEA 0000H 0001H 06D1H 0002H 0030H
	rb	0f011h.7

;;	if(!isDemoing)
CLINEA 0000H 0000H 06E9H 0002H 000FH
	l	er0,	NEAR _isDemoing
	bne	_$L299
CBLOCK 229 10 1770

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0001H 06ECH 0007H 000CH
	mov	er0,	#0 

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 06ECH 0015H 0017H
_$L293 :
CBLOCK 229 11 1773

;;			SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 06EEH 0004H 001AH
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 229 11 1775

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 06ECH 0015H 0017H
	add	er0,	#1 

;;		for(i = 0; i<150; i++)
CLINEA 0000H 0000H 06ECH 000EH 0013H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L293

;;		sprintf(SensorReturn, "Gyro Calibration Complete!");
CLINEA 0000H 0001H 06F0H 0003H 0036H
	mov	r0,	#BYTE1 OFFSET $$S297
	mov	r1,	#BYTE2 OFFSET $$S297
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;		SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 06F1H 0003H 001BH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;		SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 06F2H 0003H 001BH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 06F4H 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 06F5H 0003H 000EH
	bl	_uart_stop

;;		uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 06F6H 0003H 0032H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06F7H 0001H 0001H
	bal	_$L305

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06F7H 0003H 001AH
_$L300 :
CBLOCK 229 12 1783

;;			NOP1000();
CLINEA 0000H 0001H 06F8H 0004H 000DH
	bl	_NOP1000

;;			main_clrWDT();
CLINEA 0000H 0001H 06F9H 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 229 12 1786

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06F7H 0001H 0001H
_$L305 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 06F7H 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L300

;;		}
CLINEA 0000H 0000H 06FAH 0003H 0003H
_$L299 :
CBLOCKEND 229 10 1787
CBLOCKEND 229 2 1788

;;}
CLINEA 0000H 0001H 06FCH 0001H 0001H
	pop	er4
	pop	pc
CBLOCKEND 229 1 1788
CFUNCTIONEND 229


	rseg $$CalibrateAccel$main
CFUNCTION 230

_CalibrateAccel	:
CBLOCK 230 1 1790

;;void CalibrateAccel(void){
CLINEA 0000H 0001H 06FEH 0001H 001AH
	push	lr
	push	er8
CBLOCK 230 2 1790
CRET 0002H
CLOCAL 47H 0002H 0028H 0002H "i" 02H 00H 01H

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0702H 0002H 0017H
	mov	er0,	#0 
_$L309 :
CBLOCK 230 3 1795

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0704H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 230 3 1797

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0702H 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0702H 000EH 0013H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L309

;;	sprintf(SensorReturn, "Accel Calibration: Keep Quad Flat! Return any 2 chars to Start");
CLINEA 0000H 0001H 0706H 0002H 0059H
	mov	r0,	#BYTE1 OFFSET $$S313
	mov	r1,	#BYTE2 OFFSET $$S313
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 0707H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 0708H 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 070AH 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 070BH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 070CH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 070DH 0001H 0001H
	bal	_$L399

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 070DH 0002H 0019H
_$L316 :
CBLOCK 230 4 1805

;;		NOP1000();
CLINEA 0000H 0001H 070EH 0003H 000CH
	bl	_NOP1000

;;		main_clrWDT();
CLINEA 0000H 0001H 070FH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 4 1808

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 070DH 0001H 0001H
_$L399 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 070DH 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L316

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 0712H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 0713H 0002H 000DH
	bl	_uart_stop

;;	uart_startReceive(RecWorld, 2, _funcUartFin);
CLINEA 0000H 0001H 0714H 0002H 002EH
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	er2,	#2 
	mov	r0,	#BYTE1 OFFSET _RecWorld
	mov	r1,	#BYTE2 OFFSET _RecWorld
	bl	_uart_startReceive
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0715H 0001H 0001H
	bal	_$L400

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0715H 0002H 0019H
_$L320 :
CBLOCK 230 5 1813

;;		main_clrWDT();
CLINEA 0000H 0001H 0716H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 5 1815

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0715H 0001H 0001H
_$L400 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0715H 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L320

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0001H 0719H 0006H 000BH
	mov	er8,	#0 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0719H 0013H 0015H
_$L324 :
CBLOCK 230 6 1817

;;		_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 071DH 0003H 003CH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;		i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 071EH 0003H 0047H
	bl	_i2c_stop

;;		I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 071FH 0003H 0036H
	sb	0f2a4h.1

;;		i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 0720H 0003H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0721H 0001H 0001H
	bal	_$L401

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0721H 0003H 0052H
_$L330 :
CBLOCK 230 7 1825

;;			main_clrWDT();	
CLINEA 0000H 0001H 0722H 0004H 0012H
	bl	_main_clrWDT
CBLOCKEND 230 7 1827

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0721H 0001H 0001H
_$L401 :

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0721H 000DH 0011H
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L330

;;		Accel_Xcal[1] += (AccGyro_Data[0]<<8)+(AccGyro_Data[1]);
CLINEA 0000H 0001H 0728H 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+01h
	mov	r1,	#00h
	l	r2,	NEAR _AccGyro_Data
	mov	r3,	r2
	mov	r2,	#00h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Xcal+04h
	l	er2,	NEAR _Accel_Xcal+06h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal+04h
	st	er2,	NEAR _Accel_Xcal+06h

;;		Accel_Ycal[1] += (AccGyro_Data[2]<<8)+(AccGyro_Data[3]);
CLINEA 0000H 0001H 0729H 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+02h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+03h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Ycal+04h
	l	er2,	NEAR _Accel_Ycal+06h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal+04h
	st	er2,	NEAR _Accel_Ycal+06h
CBLOCKEND 230 6 1834

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0719H 0013H 0015H
	add	er8,	#1 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0719H 000DH 0011H
	cmp	r8,	#0ah
	cmpc	r9,	#00h
	bges	_$M22
	b	_$L324
_$M22 :

;;	Accel_Xcal[1] /= 10;
CLINEA 0000H 0001H 072BH 0002H 0015H
	l	er0,	NEAR _Accel_Xcal+04h
	l	er2,	NEAR _Accel_Xcal+06h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal+04h
	st	er2,	NEAR _Accel_Xcal+06h

;;	Accel_Ycal[1] /= 10;
CLINEA 0000H 0001H 072CH 0002H 0015H
	l	er0,	NEAR _Accel_Ycal+04h
	l	er2,	NEAR _Accel_Ycal+06h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal+04h
	st	er2,	NEAR _Accel_Ycal+06h

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 072EH 0002H 0017H
	mov	er0,	#0 
_$L334 :
CBLOCK 230 8 1839

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0730H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 230 8 1841

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 072EH 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 072EH 000DH 0012H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L334

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0734H 0006H 000BH
	mov	er0,	#0 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0734H 0014H 0016H
_$L340 :
CBLOCK 230 9 1845

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0736H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 230 9 1847

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0734H 0014H 0016H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0734H 000DH 0012H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L340

;;	sprintf(SensorReturn, "Accel Calibration: Tilt the Quad 90deg in the ROLL Direction! Return any 2 chars to Start");
CLINEA 0000H 0001H 0738H 0002H 0074H
	mov	r0,	#BYTE1 OFFSET $$S344
	mov	r1,	#BYTE2 OFFSET $$S344
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 0739H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 073AH 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 073CH 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 073DH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 073EH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 073FH 0001H 0001H
	bal	_$L402

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 073FH 0002H 0019H
_$L347 :
CBLOCK 230 10 1855

;;		NOP1000();
CLINEA 0000H 0001H 0740H 0003H 000CH
	bl	_NOP1000

;;		main_clrWDT();
CLINEA 0000H 0001H 0741H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 10 1858

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 073FH 0001H 0001H
_$L402 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 073FH 000DH 0012H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L347

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 0744H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 0745H 0002H 000DH
	bl	_uart_stop

;;	uart_startReceive(RecWorld, 2, _funcUartFin);
CLINEA 0000H 0001H 0746H 0002H 002EH
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	er2,	#2 
	mov	r0,	#BYTE1 OFFSET _RecWorld
	mov	r1,	#BYTE2 OFFSET _RecWorld
	bl	_uart_startReceive
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0747H 0001H 0001H
	bal	_$L403

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0747H 0002H 0019H
_$L351 :
CBLOCK 230 11 1863

;;		main_clrWDT();
CLINEA 0000H 0001H 0748H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 11 1865

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0747H 0001H 0001H
_$L403 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0747H 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L351

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0001H 074BH 0006H 000BH
	mov	er8,	#0 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 074BH 0013H 0015H
_$L355 :
CBLOCK 230 12 1867

;;		_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 074FH 0003H 003CH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;		i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 0750H 0003H 0047H
	bl	_i2c_stop

;;		I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 0751H 0003H 0036H
	sb	0f2a4h.1

;;		i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 0752H 0003H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0753H 0001H 0001H
	bal	_$L404

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0753H 0003H 0052H
_$L361 :
CBLOCK 230 13 1875

;;			main_clrWDT();	
CLINEA 0000H 0001H 0754H 0004H 0012H
	bl	_main_clrWDT
CBLOCKEND 230 13 1877

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0753H 0001H 0001H
_$L404 :

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0753H 000DH 0011H
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L361

;;		Accel_Zcal[1] += (AccGyro_Data[4]<<8)+(AccGyro_Data[5]);
CLINEA 0000H 0001H 075AH 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+04h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+05h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Zcal+04h
	l	er2,	NEAR _Accel_Zcal+06h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zcal+04h
	st	er2,	NEAR _Accel_Zcal+06h

;;		Accel_Ycal[2] += (AccGyro_Data[2]<<8)+(AccGyro_Data[3]);
CLINEA 0000H 0001H 075BH 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+02h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+03h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Ycal+08h
	l	er2,	NEAR _Accel_Ycal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal+08h
	st	er2,	NEAR _Accel_Ycal+0ah
CBLOCKEND 230 12 1884

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 074BH 0013H 0015H
	add	er8,	#1 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 074BH 000DH 0011H
	cmp	r8,	#0ah
	cmpc	r9,	#00h
	bges	_$M23
	b	_$L355
_$M23 :

;;	Accel_Zcal[1] /= 10;
CLINEA 0000H 0001H 075DH 0002H 0015H
	l	er0,	NEAR _Accel_Zcal+04h
	l	er2,	NEAR _Accel_Zcal+06h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zcal+04h
	st	er2,	NEAR _Accel_Zcal+06h

;;	Accel_Ycal[2] /= 10;
CLINEA 0000H 0001H 075EH 0002H 0015H
	l	er0,	NEAR _Accel_Ycal+08h
	l	er2,	NEAR _Accel_Ycal+0ah
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal+08h
	st	er2,	NEAR _Accel_Ycal+0ah

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0761H 0002H 0017H
	mov	er0,	#0 
_$L365 :
CBLOCK 230 14 1890

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0763H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 230 14 1892

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0761H 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0761H 000DH 0011H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L365

;;	sprintf(SensorReturn, "Accel Calibration: Tilt the Quad 90deg in the PITCH direction! Return any 2 chars to Start");
CLINEA 0000H 0001H 0765H 0002H 0075H
	mov	r0,	#BYTE1 OFFSET $$S369
	mov	r1,	#BYTE2 OFFSET $$S369
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 0766H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 0767H 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 0769H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 076AH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 076BH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 076CH 0001H 0001H
	bal	_$L405

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 076CH 0002H 0019H
_$L372 :
CBLOCK 230 15 1900

;;		NOP1000();
CLINEA 0000H 0001H 076DH 0003H 000CH
	bl	_NOP1000

;;		main_clrWDT();
CLINEA 0000H 0001H 076EH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 15 1903

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 076CH 0001H 0001H
_$L405 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 076CH 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L372

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 0771H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 0772H 0002H 000DH
	bl	_uart_stop

;;	uart_startReceive(RecWorld, 2, _funcUartFin);
CLINEA 0000H 0001H 0773H 0002H 002EH
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	er2,	#2 
	mov	r0,	#BYTE1 OFFSET _RecWorld
	mov	r1,	#BYTE2 OFFSET _RecWorld
	bl	_uart_startReceive
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0774H 0001H 0001H
	bal	_$L406

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0774H 0002H 0019H
_$L376 :
CBLOCK 230 16 1908

;;		main_clrWDT();
CLINEA 0000H 0001H 0775H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 16 1910

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0774H 0001H 0001H
_$L406 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0774H 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L376

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0001H 0778H 0006H 000BH
	mov	er8,	#0 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0778H 0013H 0015H
_$L380 :
CBLOCK 230 17 1912

;;		_flgI2CFin = 0;																	//reset I2C completed Flag
CLINEA 0000H 0001H 077CH 0003H 003CH
	mov	r0,	#00h
	st	r0,	NEAR __flgI2CFin

;;		i2c_stop();																		//Make sure I2C is not currently running
CLINEA 0000H 0001H 077DH 0003H 0047H
	bl	_i2c_stop

;;		I20MD = 1;		//Switch to I2C Fast Operation (400kbps)
CLINEA 0000H 0001H 077EH 0003H 0036H
	sb	0f2a4h.1

;;		i2c_startReceive(MPU6050Address, &AccGyro_ReadData, 1, &AccGyro_Data, 14, (cbfI2c)_funcI2CFin);	//Begin I2C Receive Command
CLINEA 0000H 0001H 077FH 0003H 007DH
	mov	r0,	#BYTE1 OFFSET __funcI2CFin
	mov	r1,	#BYTE2 OFFSET __funcI2CFin
	push	er0
	mov	er0,	#14
	push	er0
	mov	r0,	#BYTE1 OFFSET _AccGyro_Data
	mov	r1,	#BYTE2 OFFSET _AccGyro_Data
	push	er0
	mov	er0,	#1 
	push	er0
	mov	r2,	#BYTE1 OFFSET _AccGyro_ReadData
	mov	r3,	#BYTE2 OFFSET _AccGyro_ReadData
	l	r0,	NEAR _MPU6050Address
	bl	_i2c_startReceive
	add	sp,	#8 

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0780H 0001H 0001H
	bal	_$L407

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0780H 0003H 0052H
_$L386 :
CBLOCK 230 18 1920

;;			main_clrWDT();	
CLINEA 0000H 0001H 0781H 0004H 0012H
	bl	_main_clrWDT
CBLOCKEND 230 18 1922

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0780H 0001H 0001H
_$L407 :

;;		while(_flgI2CFin != 1){															//Wait for I2C commands to finish transfer
CLINEA 0000H 0000H 0780H 000DH 0011H
	l	r0,	NEAR __flgI2CFin
	cmp	r0,	#01h
	bne	_$L386

;;		Accel_Zcal[2] += (AccGyro_Data[4]<<8)+(AccGyro_Data[5]);
CLINEA 0000H 0001H 0787H 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+04h
	mov	r1,	#00h
	mov	r3,	r0
	mov	r2,	#00h
	l	r0,	NEAR _AccGyro_Data+05h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Zcal+08h
	l	er2,	NEAR _Accel_Zcal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zcal+08h
	st	er2,	NEAR _Accel_Zcal+0ah

;;		Accel_Xcal[2] += (AccGyro_Data[0]<<8)+(AccGyro_Data[1]);
CLINEA 0000H 0001H 0788H 0003H 003AH
	l	r0,	NEAR _AccGyro_Data+01h
	mov	r1,	#00h
	l	r2,	NEAR _AccGyro_Data
	mov	r3,	r2
	mov	r2,	#00h
	add	er0,	er2
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	xr0
	l	er0,	NEAR _Accel_Xcal+08h
	l	er2,	NEAR _Accel_Xcal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal+08h
	st	er2,	NEAR _Accel_Xcal+0ah
CBLOCKEND 230 17 1929

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0778H 0013H 0015H
	add	er8,	#1 

;;	for(i = 0; i<10; i++){
CLINEA 0000H 0000H 0778H 000DH 0011H
	cmp	r8,	#0ah
	cmpc	r9,	#00h
	bges	_$M24
	b	_$L380
_$M24 :

;;	Accel_Zcal[2] /= 10;
CLINEA 0000H 0001H 078AH 0002H 0015H
	l	er0,	NEAR _Accel_Zcal+08h
	l	er2,	NEAR _Accel_Zcal+0ah
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zcal+08h
	st	er2,	NEAR _Accel_Zcal+0ah

;;	Accel_Xcal[2] /= 10;
CLINEA 0000H 0001H 078BH 0002H 0015H
	l	er0,	NEAR _Accel_Xcal+08h
	l	er2,	NEAR _Accel_Xcal+0ah
	push	xr0
	mov	er0,	#0 
	mov	r2,	#020h
	mov	r3,	#041h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal+08h
	st	er2,	NEAR _Accel_Xcal+0ah

;;	Accel_Xcal[0] = (Accel_Xcal[1]+Accel_Xcal[2])/2;
CLINEA 0000H 0001H 078EH 0002H 0031H
	l	er0,	NEAR _Accel_Xcal+04h
	l	er2,	NEAR _Accel_Xcal+06h
	push	xr0
	l	er0,	NEAR _Accel_Xcal+08h
	l	er2,	NEAR _Accel_Xcal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#040h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Xcal
	st	er2,	NEAR _Accel_Xcal+02h

;;	Accel_Ycal[0] = (Accel_Ycal[1]+Accel_Ycal[2])/2;
CLINEA 0000H 0001H 078FH 0002H 0031H
	l	er0,	NEAR _Accel_Ycal+04h
	l	er2,	NEAR _Accel_Ycal+06h
	push	xr0
	l	er0,	NEAR _Accel_Ycal+08h
	l	er2,	NEAR _Accel_Ycal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#040h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Ycal
	st	er2,	NEAR _Accel_Ycal+02h

;;	Accel_Zcal[0] = (Accel_Zcal[1]+Accel_Zcal[2])/2;
CLINEA 0000H 0001H 0790H 0002H 0031H
	l	er0,	NEAR _Accel_Zcal+04h
	l	er2,	NEAR _Accel_Zcal+06h
	push	xr0
	l	er0,	NEAR _Accel_Zcal+08h
	l	er2,	NEAR _Accel_Zcal+0ah
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#040h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_Zcal
	st	er2,	NEAR _Accel_Zcal+02h

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0793H 0002H 0017H
	mov	er0,	#0 
_$L390 :
CBLOCK 230 19 1940

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0795H 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 230 19 1942

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0793H 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0793H 000DH 0011H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L390

;;	sprintf(SensorReturn, "Accel Calibration Complete!");
CLINEA 0000H 0001H 0797H 0002H 0036H
	mov	r0,	#BYTE1 OFFSET $$S394
	mov	r1,	#BYTE2 OFFSET $$S394
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#4 

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 0798H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 0799H 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 079BH 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 079CH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 079DH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 079EH 0001H 0001H
	bal	_$L408

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 079EH 0002H 0019H
_$L397 :
CBLOCK 230 20 1950

;;		NOP1000();
CLINEA 0000H 0001H 079FH 0003H 000CH
	bl	_NOP1000

;;		main_clrWDT();
CLINEA 0000H 0001H 07A0H 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 230 20 1953

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 079EH 0001H 0001H
_$L408 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 079EH 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L397
CBLOCKEND 230 2 1954

;;}
CLINEA 0000H 0001H 07A2H 0001H 0001H
	pop	er8
	pop	pc
CBLOCKEND 230 1 1954
CFUNCTIONEND 230


	rseg $$SerialOutCoefficients$main
CFUNCTION 231

_SerialOutCoefficients	:
CBLOCK 231 1 1958

;;{
CLINEA 0000H 0001H 07A6H 0001H 0001H
	push	lr
CBLOCK 231 2 1958
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "j" 02H 00H 01H

;;		for(j = 0; j<150; j++)
CLINEA 0000H 0001H 07A9H 0003H 0018H
	mov	er0,	#0 
_$L412 :
CBLOCK 231 3 1962

;;			SensorReturn[j] = 0x20;
CLINEA 0000H 0001H 07ABH 0004H 001AH
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 231 3 1964

;;		for(j = 0; j<150; j++)
CLINEA 0000H 0000H 07A9H 0003H 0018H
	add	er0,	#1 

;;		for(j = 0; j<150; j++)
CLINEA 0000H 0000H 07A9H 000DH 0011H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L412

;;		sprintf(SensorReturn, "Current Settings: kp=%f,ki=%f,kd=%f,a1=%f,a2=%f,Pb=%u,Db=%u", Accel_PID_XRoll_kp, Accel_PID_XRoll_ki, Accel_PID_XRoll_kd, CF_HPF, CF_LPF,Accel_PID_PBounds_Var_Pos,Accel_PID_DBounds_Var_Pos);
CLINEA 0000H 0001H 07AEH 0003H 00D7H
	l	er0,	NEAR _Accel_PID_DBounds_Var_Pos
	push	er0
	l	er0,	NEAR _Accel_PID_PBounds_Var_Pos
	push	er0
	l	er0,	NEAR _CF_LPF
	l	er2,	NEAR _CF_LPF+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _CF_HPF
	l	er2,	NEAR _CF_HPF+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_kd
	l	er2,	NEAR _Accel_PID_XRoll_kd+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_ki
	l	er2,	NEAR _Accel_PID_XRoll_ki+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_kp
	l	er2,	NEAR _Accel_PID_XRoll_kp+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#BYTE1 OFFSET $$S416
	mov	r1,	#BYTE2 OFFSET $$S416
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#48

;;		SensorReturn[148] = 0x0D;	//CR
CLINEA 0000H 0001H 07B0H 0003H 0020H
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;		SensorReturn[149] = 0x0A;	//LF
CLINEA 0000H 0001H 07B1H 0003H 0020H
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 07B4H 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 07B5H 0003H 000EH
	bl	_uart_stop

;;		uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 07B6H 0003H 0032H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07B7H 0001H 0001H
	bal	_$L421

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07B7H 0003H 001AH
_$L419 :
CBLOCK 231 4 1975

;;			main_clrWDT();
CLINEA 0000H 0001H 07B8H 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 231 4 1977

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07B7H 0001H 0001H
_$L421 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07B7H 000DH 0011H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L419
CBLOCKEND 231 2 1978

;;}
CLINEA 0000H 0001H 07BAH 0001H 0001H
	pop	pc
CBLOCKEND 231 1 1978
CFUNCTIONEND 231


	rseg $$UARTTunePID$main
CFUNCTION 232

_UARTTunePID	:
CBLOCK 232 1 1982

;;{
CLINEA 0000H 0001H 07BEH 0001H 0001H
	push	lr
CBLOCK 232 2 1982
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "k" 02H 00H 01H
CLOCAL 4BH 0002H 0000H 0002H "i" 02H 00H 01H
CLOCAL 4BH 0002H 0000H 0002H "j" 02H 00H 01H

;;		for (k=0;k<7;k++)
CLINEA 0000H 0001H 07C5H 0008H 000BH
	mov	er0,	#0 

;;		for (k=0;k<7;k++)
CLINEA 0000H 0000H 07C5H 0010H 0012H
_$L426 :
CBLOCK 232 3 1990

;;			RecWorld[k] = 0;	//ie: to set ki to 1.5 =>send ki1.50000
CLINEA 0000H 0001H 07C7H 0004H 003BH
	mov	r2,	#00h
	st	r2,	NEAR _RecWorld[er0]
CBLOCKEND 232 3 1992

;;		for (k=0;k<7;k++)
CLINEA 0000H 0000H 07C5H 0010H 0012H
	add	er0,	#1 

;;		for (k=0;k<7;k++)
CLINEA 0000H 0000H 07C5H 000CH 000FH
	cmp	r0,	#07h
	cmpc	r1,	#00h
	blts	_$L426

;;		ETM8 = 0; //Turn OFF TIMER8/9 ISR for this function...
CLINEA 0000H 0001H 07CAH 0003H 0038H
	rb	0f013h.2

;;		ETM9 = 0; //Turn OFF TIMER8/9 ISR for this function...
CLINEA 0000H 0001H 07CBH 0003H 0038H
	rb	0f013h.3

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 07CEH 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 07CFH 0003H 000EH
	bl	_uart_stop

;;		uart_startReceive(RecWorld, 8, _funcUartFin);
CLINEA 0000H 0001H 07D0H 0003H 002FH
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	er2,	#8 
	mov	r0,	#BYTE1 OFFSET _RecWorld
	mov	r1,	#BYTE2 OFFSET _RecWorld
	bl	_uart_startReceive
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07D1H 0001H 0001H
	bal	_$L477

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07D1H 0003H 001AH
_$L432 :
CBLOCK 232 4 2001

;;			main_clrWDT();
CLINEA 0000H 0001H 07D2H 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 232 4 2003

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07D1H 0001H 0001H
_$L477 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 07D1H 000CH 000FH
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L432

;;		if(RecWorld[0] == 0x70){		//if RECWORLD == "pi"
CLINEA 0000H 0001H 0801H 0003H 0031H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#070h
	beq	_$M27
	b	_$L436
_$M27 :
CBLOCK 232 5 2049

;;			if(RecWorld[1] == 0x69){
CLINEA 0000H 0001H 0802H 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#069h
	beq	_$M28
	b	_$L436
_$M28 :
CBLOCK 232 6 2050

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 0803H 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 0804H 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 0805H 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0806H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0807H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0808H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0809H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_XRoll_kp = NewVar;
CLINEA 0000H 0001H 080AH 0005H 0020H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _Accel_PID_XRoll_kp
	st	er2,	NEAR _Accel_PID_XRoll_kp+02h

;;				Accel_PID_YPitch_kp = NewVar;
CLINEA 0000H 0001H 080BH 0005H 0021H
	st	er0,	NEAR _Accel_PID_YPitch_kp
	st	er2,	NEAR _Accel_PID_YPitch_kp+02h

;;				Accel_PID_XRoll_ki = NewVar/2;
CLINEA 0000H 0001H 080CH 0005H 0022H
	push	xr0
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#040h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_XRoll_ki
	st	er2,	NEAR _Accel_PID_XRoll_ki+02h

;;				Accel_PID_YPitch_ki = NewVar/2;
CLINEA 0000H 0001H 080DH 0005H 0023H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#00h
	mov	r3,	#040h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_YPitch_ki
	st	er2,	NEAR _Accel_PID_YPitch_ki+02h
CBLOCKEND 232 6 2062

;;			}
CLINEA 0000H 0000H 080EH 0004H 0004H
_$L436 :
CBLOCKEND 232 5 2063

;;		if(RecWorld[0] == 0x70){		//if RECWORLD == "pb"
CLINEA 0000H 0001H 0811H 0003H 0031H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#070h
	beq	_$M29
	b	_$L440
_$M29 :
CBLOCK 232 7 2065

;;			if(RecWorld[1] == 0x62){
CLINEA 0000H 0001H 0812H 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#062h
	bne	_$L440
CBLOCK 232 8 2066

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 0813H 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 0814H 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 0815H 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0816H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0817H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0818H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0819H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_PBounds_Var_Pos = NewVar;
CLINEA 0000H 0001H 081AH 0005H 0027H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	push	xr0
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	NEAR _Accel_PID_PBounds_Var_Pos

;;				Accel_PID_PBounds_Var_Neg = -1* NewVar;
CLINEA 0000H 0001H 081BH 0005H 002BH
	l	er0,	NEAR _NewVar
	push	xr0
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#0bfh
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	NEAR _Accel_PID_PBounds_Var_Neg
CBLOCKEND 232 8 2077

;;			}
CLINEA 0000H 0000H 081DH 0004H 0004H
_$L440 :
CBLOCKEND 232 7 2078

;;		if(RecWorld[0] == 0x64){			//if RECWORLD == "db"
CLINEA 0000H 0001H 0820H 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#064h
	beq	_$M30
	b	_$L444
_$M30 :
CBLOCK 232 9 2080

;;			if(RecWorld[1] == 0x62){
CLINEA 0000H 0001H 0821H 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#062h
	bne	_$L444
CBLOCK 232 10 2081

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 0822H 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 0823H 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 0824H 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0825H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0826H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0827H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0828H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_DBounds_Var_Pos = NewVar;
CLINEA 0000H 0001H 0829H 0005H 0027H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	push	xr0
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	NEAR _Accel_PID_DBounds_Var_Pos

;;				Accel_PID_DBounds_Var_Neg = -1 * NewVar;
CLINEA 0000H 0001H 082AH 0005H 002CH
	l	er0,	NEAR _NewVar
	push	xr0
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#0bfh
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	NEAR _Accel_PID_DBounds_Var_Neg
CBLOCKEND 232 10 2092

;;			}
CLINEA 0000H 0000H 082CH 0004H 0004H
_$L444 :
CBLOCKEND 232 9 2093

;;		if(RecWorld[0] == 0x6B){			//if RECWORLD == "kp"
CLINEA 0000H 0001H 082FH 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#06bh
	bne	_$L448
CBLOCK 232 11 2095

;;			if(RecWorld[1] == 0x70){
CLINEA 0000H 0001H 0830H 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#070h
	bne	_$L448
CBLOCK 232 12 2096

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 0831H 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 0832H 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 0833H 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0834H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0835H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0836H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0837H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_XRoll_kp = NewVar;
CLINEA 0000H 0001H 0838H 0005H 0020H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _Accel_PID_XRoll_kp
	st	er2,	NEAR _Accel_PID_XRoll_kp+02h

;;				Accel_PID_YPitch_kp = NewVar;
CLINEA 0000H 0001H 0839H 0005H 0021H
	st	er0,	NEAR _Accel_PID_YPitch_kp
	st	er2,	NEAR _Accel_PID_YPitch_kp+02h
CBLOCKEND 232 12 2106

;;			}
CLINEA 0000H 0000H 083AH 0004H 0004H
_$L448 :
CBLOCKEND 232 11 2107

;;		if(RecWorld[0] == 0x6B){			//if RECWORLD == "ki"
CLINEA 0000H 0001H 083DH 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#06bh
	bne	_$L452
CBLOCK 232 13 2109

;;			if(RecWorld[1] == 0x69){
CLINEA 0000H 0001H 083EH 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#069h
	bne	_$L452
CBLOCK 232 14 2110

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 083FH 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 0840H 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 0841H 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0842H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0843H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0844H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0845H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_XRoll_ki = NewVar;
CLINEA 0000H 0001H 0846H 0005H 0020H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _Accel_PID_XRoll_ki
	st	er2,	NEAR _Accel_PID_XRoll_ki+02h

;;				Accel_PID_YPitch_ki = NewVar;
CLINEA 0000H 0001H 0847H 0005H 0021H
	st	er0,	NEAR _Accel_PID_YPitch_ki
	st	er2,	NEAR _Accel_PID_YPitch_ki+02h
CBLOCKEND 232 14 2120

;;			}
CLINEA 0000H 0000H 0848H 0004H 0004H
_$L452 :
CBLOCKEND 232 13 2121

;;		if(RecWorld[0] == 0x6B){			//if RECWORLD == "kd"
CLINEA 0000H 0001H 084BH 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#06bh
	bne	_$L456
CBLOCK 232 15 2123

;;			if(RecWorld[1] == 0x64){
CLINEA 0000H 0001H 084CH 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#064h
	bne	_$L456
CBLOCK 232 16 2124

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 084DH 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 084EH 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 084FH 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 0850H 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 0851H 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0852H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0853H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				Accel_PID_XRoll_kd = NewVar;
CLINEA 0000H 0001H 0854H 0005H 0020H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _Accel_PID_XRoll_kd
	st	er2,	NEAR _Accel_PID_XRoll_kd+02h

;;				Accel_PID_YPitch_kd = NewVar;
CLINEA 0000H 0001H 0855H 0005H 0021H
	st	er0,	NEAR _Accel_PID_YPitch_kd
	st	er2,	NEAR _Accel_PID_YPitch_kd+02h
CBLOCKEND 232 16 2134

;;			}
CLINEA 0000H 0000H 0856H 0004H 0004H
_$L456 :
CBLOCKEND 232 15 2135

;;		if(RecWorld[0] == 0x61){			//if RECWORLD == "a1"
CLINEA 0000H 0001H 0859H 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#061h
	beq	_$M31
	b	_$L460
_$M31 :
CBLOCK 232 17 2137

;;			if(RecWorld[1] == 0x31){
CLINEA 0000H 0001H 085AH 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#031h
	bne	_$L460
CBLOCK 232 18 2138

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 085BH 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 085CH 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 085DH 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 085EH 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 085FH 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 0860H 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 0861H 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				CF_HPF = NewVar;
CLINEA 0000H 0001H 0862H 0005H 0014H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _CF_HPF
	st	er2,	NEAR _CF_HPF+02h

;;				CF_LPF = 1-NewVar;
CLINEA 0000H 0001H 0863H 0005H 0016H
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#03fh
	push	xr0
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_LPF
	st	er2,	NEAR _CF_LPF+02h
CBLOCKEND 232 18 2148

;;			}
CLINEA 0000H 0000H 0864H 0004H 0004H
_$L460 :
CBLOCKEND 232 17 2149

;;		if(RecWorld[0] == 0x61){			//if RECWORLD == "a2"
CLINEA 0000H 0001H 0867H 0003H 0032H
	l	r0,	NEAR _RecWorld
	cmp	r0,	#061h
	beq	_$M32
	b	_$L464
_$M32 :
CBLOCK 232 19 2151

;;			if(RecWorld[1] == 0x32){
CLINEA 0000H 0001H 0868H 0004H 001BH
	l	r0,	NEAR _RecWorld+01h
	cmp	r0,	#032h
	bne	_$L464
CBLOCK 232 20 2152

;;				NewVar_Str[0] = RecWorld[2];
CLINEA 0000H 0001H 0869H 0005H 0020H
	l	r0,	NEAR _RecWorld+02h
	st	r0,	NEAR _NewVar_Str

;;				NewVar_Str[1] = RecWorld[3];
CLINEA 0000H 0001H 086AH 0005H 0020H
	l	r0,	NEAR _RecWorld+03h
	st	r0,	NEAR _NewVar_Str+01h

;;				NewVar_Str[2] = RecWorld[4];
CLINEA 0000H 0001H 086BH 0005H 0020H
	l	r0,	NEAR _RecWorld+04h
	st	r0,	NEAR _NewVar_Str+02h

;;				NewVar_Str[3] = RecWorld[5];
CLINEA 0000H 0001H 086CH 0005H 0020H
	l	r0,	NEAR _RecWorld+05h
	st	r0,	NEAR _NewVar_Str+03h

;;				NewVar_Str[4] = RecWorld[6];
CLINEA 0000H 0001H 086DH 0005H 0020H
	l	r0,	NEAR _RecWorld+06h
	st	r0,	NEAR _NewVar_Str+04h

;;				NewVar_Str[5] = RecWorld[7];
CLINEA 0000H 0001H 086EH 0005H 0020H
	l	r0,	NEAR _RecWorld+07h
	st	r0,	NEAR _NewVar_Str+05h

;;				sscanf(NewVar_Str, "%f", &NewVar);
CLINEA 0000H 0001H 086FH 0005H 0026H
	mov	r0,	#BYTE1 OFFSET _NewVar
	mov	r1,	#BYTE2 OFFSET _NewVar
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S250
	mov	r1,	#BYTE2 OFFSET $$S250
	push	er0
	mov	r0,	#BYTE1 OFFSET _NewVar_Str
	mov	r1,	#BYTE2 OFFSET _NewVar_Str
	push	er0
	bl	_sscanf_nn
	add	sp,	#6 

;;				CF_HPF = 1-NewVar;
CLINEA 0000H 0001H 0870H 0005H 0016H
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#03fh
	push	xr0
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_HPF
	st	er2,	NEAR _CF_HPF+02h

;;				CF_LPF = NewVar;
CLINEA 0000H 0001H 0871H 0005H 0014H
	l	er0,	NEAR _NewVar
	l	er2,	NEAR _NewVar+02h
	st	er0,	NEAR _CF_LPF
	st	er2,	NEAR _CF_LPF+02h
CBLOCKEND 232 20 2162

;;			}
CLINEA 0000H 0000H 0872H 0004H 0004H
_$L464 :
CBLOCKEND 232 19 2163

;;		for(k = 0; k<150; k++)
CLINEA 0000H 0001H 0875H 0007H 000CH
	mov	er0,	#0 

;;		for(k = 0; k<150; k++)
CLINEA 0000H 0000H 0875H 0015H 0017H
_$L468 :
CBLOCK 232 21 2166

;;			SensorReturn[k] = 0x20;
CLINEA 0000H 0001H 0877H 0004H 001AH
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 232 21 2168

;;		for(k = 0; k<150; k++)
CLINEA 0000H 0000H 0875H 0015H 0017H
	add	er0,	#1 

;;		for(k = 0; k<150; k++)
CLINEA 0000H 0000H 0875H 000EH 0013H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L468

;;		sprintf(SensorReturn, "    New Settings: kp=%f,ki=%f,kd=%f,a1=%f,a2=%f,Pb=%u,Db=%u", Accel_PID_XRoll_kp, Accel_PID_XRoll_ki, Accel_PID_XRoll_kd, CF_HPF, CF_LPF,Accel_PID_PBounds_Var_Pos,Accel_PID_DBounds_Var_Pos);
CLINEA 0000H 0001H 087AH 0003H 00D7H
	l	er0,	NEAR _Accel_PID_DBounds_Var_Pos
	push	er0
	l	er0,	NEAR _Accel_PID_PBounds_Var_Pos
	push	er0
	l	er0,	NEAR _CF_LPF
	l	er2,	NEAR _CF_LPF+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _CF_HPF
	l	er2,	NEAR _CF_HPF+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_kd
	l	er2,	NEAR _Accel_PID_XRoll_kd+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_ki
	l	er2,	NEAR _Accel_PID_XRoll_ki+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Accel_PID_XRoll_kp
	l	er2,	NEAR _Accel_PID_XRoll_kp+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#BYTE1 OFFSET $$S472
	mov	r1,	#BYTE2 OFFSET $$S472
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#48

;;		SensorReturn[148] = 0x0D;	//CR
CLINEA 0000H 0001H 087CH 0003H 0020H
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;		SensorReturn[149] = 0x0A;	//LF
CLINEA 0000H 0001H 087DH 0003H 0020H
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;		_flgUartFin = 0;
CLINEA 0000H 0001H 0880H 0003H 0012H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;		uart_stop();
CLINEA 0000H 0001H 0881H 0003H 000EH
	bl	_uart_stop

;;		uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 0882H 0003H 0032H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 0883H 0001H 0001H
	bal	_$L478

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 0883H 0003H 001AH
_$L475 :
CBLOCK 232 22 2179

;;			main_clrWDT();
CLINEA 0000H 0001H 0884H 0004H 0011H
	bl	_main_clrWDT
CBLOCKEND 232 22 2181

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 0883H 0001H 0001H
_$L478 :

;;		while(_flgUartFin != 1){
CLINEA 0000H 0000H 0883H 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L475

;;		ETM8 = 1;	//Turn TIMER8/9 ISR Back ON
CLINEA 0000H 0001H 0887H 0003H 0027H
	sb	0f013h.2

;;		ETM9 = 1;	//Turn TIMER8/9 ISR Back ON		
CLINEA 0000H 0001H 0888H 0003H 0029H
	sb	0f013h.3
CBLOCKEND 232 2 2185

;;}
CLINEA 0000H 0001H 0889H 0001H 0001H
	pop	pc
CBLOCKEND 232 1 2185
CFUNCTIONEND 232


	rseg $$SoftStart$main
CFUNCTION 233

_SoftStart	:
CBLOCK 233 1 2189

;;{
CLINEA 0000H 0001H 088DH 0001H 0001H
	push	lr
CBLOCK 233 2 2189
CRET 0000H

;;	PWED += PWMtoRPMOffset_Mot2;	
CLINEA 0000H 0001H 0891H 0002H 001EH
	l	er0,	0f932h
	l	er2,	NEAR _PWMtoRPMOffset_Mot2
	add	er0,	er2
	st	er0,	0f932h

;;	PWDD += PWMtoRPMOffset_Mot3;	
CLINEA 0000H 0001H 0892H 0002H 001EH
	l	er0,	0f922h
	l	er2,	NEAR _PWMtoRPMOffset_Mot3
	add	er0,	er2
	st	er0,	0f922h

;;	PWCD += PWMtoRPMOffset_Mot4;
CLINEA 0000H 0001H 0893H 0002H 001DH
	l	er0,	0f912h
	l	er2,	NEAR _PWMtoRPMOffset_Mot4
	add	er0,	er2
	st	er0,	0f912h

;;	while(PWF0D < PWMIdleDutyRun){
CLINEA 0000H 0001H 0894H 0002H 001FH
	bal	_$L480
_$L482 :
CBLOCK 233 3 2196

;;		NOPms(50);
CLINEA 0000H 0001H 0895H 0003H 000CH
	mov	er0,	#50
	bl	_NOPms

;;		PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0896H 0003H 001BH
	rb	0f973h.0

;;		PERUN = 0;
CLINEA 0000H 0001H 0897H 0003H 000CH
	rb	0f937h.0

;;		PDRUN = 0;
CLINEA 0000H 0001H 0898H 0003H 000CH
	rb	0f927h.0

;;		PCRUN = 0;
CLINEA 0000H 0001H 0899H 0003H 000CH
	rb	0f917h.0

;;		PWF0D += 1; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 089AH 0003H 0041H
	l	er0,	0f962h
	add	er0,	#1 
	st	er0,	0f962h

;;		PWED += 1;	
CLINEA 0000H 0001H 089BH 0003H 000DH
	l	er0,	0f932h
	add	er0,	#1 
	st	er0,	0f932h

;;		PWDD += 1;	
CLINEA 0000H 0001H 089CH 0003H 000DH
	l	er0,	0f922h
	add	er0,	#1 
	st	er0,	0f922h

;;		PWCD += 1;
CLINEA 0000H 0001H 089DH 0003H 000CH
	l	er0,	0f912h
	add	er0,	#1 
	st	er0,	0f912h

;;		PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 089FH 0003H 001AH
	sb	0f973h.0

;;		PERUN = 1;
CLINEA 0000H 0001H 08A0H 0003H 000CH
	sb	0f937h.0

;;		PDRUN = 1;
CLINEA 0000H 0001H 08A1H 0003H 000CH
	sb	0f927h.0

;;		PCRUN = 1;
CLINEA 0000H 0001H 08A2H 0003H 000CH
	sb	0f917h.0
CBLOCKEND 233 3 2211

;;	}
CLINEA 0000H 0000H 08A3H 0002H 0002H
_$L480 :

;;	while(PWF0D < PWMIdleDutyRun){
CLINEA 0000H 0000H 0894H 000EH 0013H
	l	er0,	0f962h
	l	er2,	NEAR _PWMIdleDutyRun
	cmp	er0,	er2
	blt	_$L482

;;	while(PrePIDCount < 10){
CLINEA 0000H 0000H 08A4H 0001H 0001H
	bal	_$L494

;;	while(PrePIDCount < 10){
CLINEA 0000H 0000H 08A4H 0002H 0019H
_$L486 :
CBLOCK 233 4 2212

;;		if(AccGyro_ReadFlag >= 1){		//Triggered by External Interrupt (flag set in AccelGyroDataReady_ISR)
CLINEA 0000H 0001H 08A5H 0003H 0064H
	l	r0,	NEAR _AccGyro_ReadFlag
	cmp	r0,	#01h
	blt	_$L488
CBLOCK 233 5 2213

;;			Get_AccGyroData();
CLINEA 0000H 0001H 08A7H 0004H 0015H
	bl	_Get_AccGyroData

;;			AccGyro_ReadFlag = 0;
CLINEA 0000H 0001H 08A9H 0004H 0018H
	mov	r0,	#00h
	st	r0,	NEAR _AccGyro_ReadFlag
CBLOCKEND 233 5 2218

;;		}
CLINEA 0000H 0000H 08AAH 0003H 0003H
_$L488 :

;;		if(AccGyro_CF_FlagCounter > 0){	//This Value is incremented after Get_AccGyroData(); is called
CLINEA 0000H 0001H 08ABH 0003H 0060H
	l	r0,	NEAR _AccGyro_CF_FlagCounter
	cmp	r0,	#00h
	ble	_$L490
CBLOCK 233 6 2219

;;			Run_AccGyroCF();
CLINEA 0000H 0001H 08ADH 0004H 0013H
	bl	_Run_AccGyroCF

;;			AccGyro_CF_FlagCounter--;	//Decremented because this value is not a static 1/0... number shows number of items in buffer that have not gone though the CF yet
CLINEA 0000H 0000H 08AFH 0004H 00A0H
	lea	OFFSET _AccGyro_CF_FlagCounter
	dec	[ea]
CBLOCKEND 233 6 2224

;;		}
CLINEA 0000H 0000H 08B0H 0003H 0003H
_$L490 :

;;		if(Accel_PID_GoCounter>= 1){		//This increments in the Run_AccGyroCF()... I don't know if this is the best trigger.. but for now, it works.  Calls GetAccGyroData and AccGyroCF once within the routine.
CLINEA 0000H 0001H 08B1H 0003H 00CAH
	l	r0,	NEAR _Accel_PID_GoCounter
	cmp	r0,	#01h
	blt	_$L492
CBLOCK 233 7 2225

;;			AccelSensorControlPID_P(); 		
CLINEA 0000H 0001H 08B3H 0004H 0020H
	bl	_AccelSensorControlPID_P

;;			AccelSensorControlPID_I(); 		
CLINEA 0000H 0001H 08B4H 0004H 0020H
	bl	_AccelSensorControlPID_I

;;			AccelSensorControlPID_D(); 		
CLINEA 0000H 0001H 08B5H 0004H 0020H
	bl	_AccelSensorControlPID_D

;;			Accel_PID_GoCounter = 0;
CLINEA 0000H 0001H 08B7H 0004H 001BH
	mov	r0,	#00h
	st	r0,	NEAR _Accel_PID_GoCounter

;;			PrePIDCount++;			//Comment this out to always loop (i.e.: no shut-down...)
CLINEA 0000H 0000H 08B8H 0004H 004DH
	lea	OFFSET _PrePIDCount
	inc	[ea]
CBLOCKEND 233 7 2233

;;		}
CLINEA 0000H 0000H 08B9H 0003H 0003H
_$L492 :

;;		main_clrWDT();
CLINEA 0000H 0001H 08BAH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 233 4 2235

;;	while(PrePIDCount < 10){
CLINEA 0000H 0000H 08A4H 0001H 0001H
_$L494 :

;;	while(PrePIDCount < 10){
CLINEA 0000H 0000H 08A4H 000EH 0013H
	l	r0,	NEAR _PrePIDCount
	cmp	r0,	#0ah
	blt	_$L486

;;	Accel_PID_XRollErrSum = 0;
CLINEA 0000H 0001H 08BCH 0002H 001BH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollErrSum
	st	er0,	NEAR _Accel_PID_XRollErrSum+02h

;;	Accel_PID_YPitchErrSum = 0;	
CLINEA 0000H 0001H 08BDH 0002H 001DH
	st	er0,	NEAR _Accel_PID_YPitchErrSum
	st	er0,	NEAR _Accel_PID_YPitchErrSum+02h
CBLOCKEND 233 2 2238

;;}
CLINEA 0000H 0001H 08BEH 0001H 0001H
	pop	pc
CBLOCKEND 233 1 2238
CFUNCTIONEND 233


	rseg $$RampUpMotorTest$main
CFUNCTION 234

_RampUpMotorTest	:
CBLOCK 234 1 2243

;;void RampUpMotorTest(void){
CLINEA 0000H 0001H 08C3H 0001H 001BH
CBLOCK 234 2 2243

;;	if(PWMCounter < PWMSensorResPerInc){
CLINEA 0000H 0001H 08C4H 0002H 0025H
	l	r0,	NEAR _PWMCounter
	l	r1,	NEAR _PWMSensorResPerInc
	cmp	r0,	r1
	bge	_$L496
CBLOCK 234 3 2244

;;		PWMCounter++;
CLINEA 0000H 0000H 08C5H 0003H 000FH
	add	r0,	#01h
	st	r0,	NEAR _PWMCounter
CBLOCKEND 234 3 2246

;;	else{
CLINEA 0000H 0001H 08C7H 0002H 0006H
	rt
_$L496 :
CBLOCK 234 4 2247

;;		if(PWED < PWMUpperDutyLimitCalib){
CLINEA 0000H 0001H 08C8H 0003H 0024H
	l	er0,	0f932h
	l	er2,	NEAR _PWMUpperDutyLimitCalib
	cmp	er0,	er2
	blt	_$M35
	b	_$L505
_$M35 :
CBLOCK 234 5 2248

;;			if(PWMflag == 0){
CLINEA 0000H 0001H 08C9H 0004H 0014H
	l	r0,	NEAR _PWMflag
	bne	_$L501
CBLOCK 234 6 2249

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 08CAH 0005H 001DH
	rb	0f973h.0

;;				PERUN = 0;
CLINEA 0000H 0001H 08CBH 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 08CCH 0005H 000EH
	rb	0f927h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 08CDH 0005H 000EH
	rb	0f917h.0

;;				PWF0D += MotorStep; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 08CEH 0005H 0049H
	l	er0,	0f962h
	l	er2,	NEAR _MotorStep
	add	er0,	er2
	st	er0,	0f962h

;;				PWED += MotorStep;
CLINEA 0000H 0001H 08CFH 0005H 0016H
	l	er0,	0f932h
	add	er0,	er2
	st	er0,	0f932h

;;				PWDD += MotorStep;
CLINEA 0000H 0001H 08D0H 0005H 0016H
	l	er0,	0f922h
	add	er0,	er2
	st	er0,	0f922h

;;				PWCD += MotorStep;
CLINEA 0000H 0001H 08D1H 0005H 0016H
	l	er0,	0f912h
	add	er0,	er2
	st	er0,	0f912h

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 08D2H 0005H 001CH
	sb	0f973h.0

;;				PERUN = 1;
CLINEA 0000H 0001H 08D3H 0005H 000EH
	sb	0f937h.0

;;				PDRUN = 1;
CLINEA 0000H 0001H 08D4H 0005H 000EH
	sb	0f927h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 08D5H 0005H 000EH
	sb	0f917h.0
CBLOCKEND 234 6 2262

;;			}
CLINEA 0000H 0000H 08D6H 0004H 0004H
_$L501 :

;;			if(PWMflag == 1){
CLINEA 0000H 0001H 08D7H 0004H 0014H
	l	r0,	NEAR _PWMflag
	cmp	r0,	#01h
	bne	_$L505
CBLOCK 234 7 2263

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 08D8H 0005H 001DH
	rb	0f973h.0

;;				PERUN = 0;
CLINEA 0000H 0001H 08D9H 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 08DAH 0005H 000EH
	rb	0f927h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 08DBH 0005H 000EH
	rb	0f917h.0

;;				PWF0D -= MotorStep; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 08DCH 0005H 0049H
	l	er0,	0f962h
	l	er2,	NEAR _MotorStep
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f962h

;;				PWED -= MotorStep;
CLINEA 0000H 0001H 08DDH 0005H 0016H
	l	er0,	0f932h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f932h

;;				PWDD -= MotorStep;
CLINEA 0000H 0001H 08DEH 0005H 0016H
	l	er0,	0f922h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f922h

;;				PWCD -= MotorStep;
CLINEA 0000H 0001H 08DFH 0005H 0016H
	l	er0,	0f912h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f912h

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 08E0H 0005H 001CH
	sb	0f973h.0

;;				PERUN = 1;
CLINEA 0000H 0001H 08E1H 0005H 000EH
	sb	0f937h.0

;;				PDRUN = 1;
CLINEA 0000H 0001H 08E2H 0005H 000EH
	sb	0f927h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 08E3H 0005H 000EH
	sb	0f917h.0

;;				if(PWED <= PWMSafeDuty){
CLINEA 0000H 0001H 08E4H 0005H 001CH
	l	er0,	0f932h
	l	er2,	NEAR _PWMSafeDuty
	cmp	er0,	er2
	bgt	_$L505
CBLOCK 234 8 2276

;;					PWMflag = 2;
CLINEA 0000H 0001H 08E5H 0006H 0011H
	mov	r0,	#02h
	st	r0,	NEAR _PWMflag
CBLOCKEND 234 8 2278

;;				}
CLINEA 0000H 0000H 08E6H 0005H 0005H
_$L505 :
CBLOCKEND 234 7 2279
CBLOCKEND 234 5 2280

;;		if(PWED >= PWMUpperDutyLimitCalib){
CLINEA 0000H 0001H 08E9H 0003H 0025H
	l	er0,	0f932h
	l	er2,	NEAR _PWMUpperDutyLimitCalib
	cmp	er0,	er2
	blt	_$L507
CBLOCK 234 9 2281

;;			PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 08EAH 0004H 001CH
	rb	0f973h.0

;;			PERUN = 0;
CLINEA 0000H 0001H 08EBH 0004H 000DH
	rb	0f937h.0

;;			PDRUN = 0;
CLINEA 0000H 0001H 08ECH 0004H 000DH
	rb	0f927h.0

;;			PCRUN = 0;
CLINEA 0000H 0001H 08EDH 0004H 000DH
	rb	0f917h.0

;;			PWF0D -= MotorStep; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 08EEH 0004H 0048H
	l	er0,	0f962h
	l	er2,	NEAR _MotorStep
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f962h

;;			PWED -= MotorStep;
CLINEA 0000H 0001H 08EFH 0004H 0015H
	l	er0,	0f932h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f932h

;;			PWDD -= MotorStep;
CLINEA 0000H 0001H 08F0H 0004H 0015H
	l	er0,	0f922h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f922h

;;			PWCD -= MotorStep;
CLINEA 0000H 0001H 08F1H 0004H 0015H
	l	er0,	0f912h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f912h

;;			PWMflag = 1;
CLINEA 0000H 0001H 08F2H 0004H 000FH
	mov	r0,	#01h
	st	r0,	NEAR _PWMflag

;;			PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 08F3H 0004H 001BH
	sb	0f973h.0

;;			PERUN = 1;
CLINEA 0000H 0001H 08F4H 0004H 000DH
	sb	0f937h.0

;;			PDRUN = 1;
CLINEA 0000H 0001H 08F5H 0004H 000DH
	sb	0f927h.0

;;			PCRUN = 1;
CLINEA 0000H 0001H 08F6H 0004H 000DH
	sb	0f917h.0
CBLOCKEND 234 9 2295

;;		}
CLINEA 0000H 0000H 08F7H 0003H 0003H
_$L507 :

;;		PWMCounter = 0;
CLINEA 0000H 0001H 08F8H 0003H 0011H
	mov	r0,	#00h
	st	r0,	NEAR _PWMCounter
CBLOCKEND 234 4 2297

;;	}
CLINEA 0000H 0000H 08F9H 0002H 0002H
CBLOCKEND 234 2 2298

;;}
CLINEA 0000H 0001H 08FAH 0001H 0001H
	rt
CBLOCKEND 234 1 2298
CFUNCTIONEND 234


	rseg $$DistanceSensorControl$main
CFUNCTION 235

_DistanceSensorControl	:
CBLOCK 235 1 2299

;;void DistanceSensorControl(void){
CLINEA 0000H 0001H 08FBH 0001H 0021H
	push	lr
CBLOCK 235 2 2299
CRET 0000H

;;	if((Range_out < Range_ZHiThres)||(Range_out > Range_Ceiling)){	//65 = 4Ft Level, 240 accounts for sensor error when too close to ground.
CLINEA 0000H 0001H 08FCH 0002H 0089H
	l	er0,	NEAR _Range_out
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_ZHiThres
	l	er2,	NEAR _Range_ZHiThres+02h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L511
	l	er0,	NEAR _Range_out
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_Ceiling
	l	er2,	NEAR _Range_Ceiling+02h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L510
_$L511 :
CBLOCK 235 3 2300

;;		PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 08FDH 0003H 001BH
	rb	0f973h.0

;;		PERUN = 0;
CLINEA 0000H 0001H 08FEH 0003H 000CH
	rb	0f937h.0

;;		PDRUN = 0;
CLINEA 0000H 0001H 08FFH 0003H 000CH
	rb	0f927h.0

;;		PCRUN = 0;
CLINEA 0000H 0001H 0900H 0003H 000CH
	rb	0f917h.0

;;		PWF0D += MotorStep; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0901H 0003H 0047H
	l	er0,	0f962h
	l	er2,	NEAR _MotorStep
	add	er0,	er2
	st	er0,	0f962h

;;		PWED += MotorStep;
CLINEA 0000H 0001H 0902H 0003H 0014H
	l	er0,	0f932h
	add	er0,	er2
	st	er0,	0f932h

;;		PWDD += MotorStep;
CLINEA 0000H 0001H 0903H 0003H 0014H
	l	er0,	0f922h
	add	er0,	er2
	st	er0,	0f922h

;;		PWCD += MotorStep;
CLINEA 0000H 0001H 0904H 0003H 0014H
	l	er0,	0f912h
	add	er0,	er2
	st	er0,	0f912h

;;		PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0905H 0003H 001AH
	sb	0f973h.0

;;		PERUN = 1;
CLINEA 0000H 0001H 0906H 0003H 000CH
	sb	0f937h.0

;;		PDRUN = 1;
CLINEA 0000H 0001H 0907H 0003H 000CH
	sb	0f927h.0

;;		PCRUN = 1;
CLINEA 0000H 0001H 0908H 0003H 000CH
	sb	0f917h.0
CBLOCKEND 235 3 2313

;;	}			
CLINEA 0000H 0000H 0909H 0002H 0005H
_$L510 :

;;	if(Range_out > 75){	//4Ft Level
CLINEA 0000H 0001H 090AH 0002H 0020H
	l	er0,	NEAR _Range_out
	cmp	r0,	#04bh
	cmpc	r1,	#00h
	ble	_$L517
CBLOCK 235 4 2314

;;		PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 090BH 0003H 001BH
	rb	0f973h.0

;;		PERUN = 0;
CLINEA 0000H 0001H 090CH 0003H 000CH
	rb	0f937h.0

;;		PDRUN = 0;
CLINEA 0000H 0001H 090DH 0003H 000CH
	rb	0f927h.0

;;		PCRUN = 0;
CLINEA 0000H 0001H 090EH 0003H 000CH
	rb	0f917h.0

;;		PWF0D -= MotorStep; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 090FH 0003H 0047H
	l	er0,	0f962h
	l	er2,	NEAR _MotorStep
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f962h

;;		PWED -= MotorStep;
CLINEA 0000H 0001H 0910H 0003H 0014H
	l	er0,	0f932h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f932h

;;		PWDD -= MotorStep;
CLINEA 0000H 0001H 0911H 0003H 0014H
	l	er0,	0f922h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f922h

;;		PWCD -= MotorStep;
CLINEA 0000H 0001H 0912H 0003H 0014H
	l	er0,	0f912h
	sub	r0,	r2
	subc	r1,	r3
	st	er0,	0f912h

;;		PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0913H 0003H 001AH
	sb	0f973h.0

;;		PERUN = 1;
CLINEA 0000H 0001H 0914H 0003H 000CH
	sb	0f937h.0

;;		PDRUN = 1;
CLINEA 0000H 0001H 0915H 0003H 000CH
	sb	0f927h.0

;;		PCRUN = 1;
CLINEA 0000H 0001H 0916H 0003H 000CH
	sb	0f917h.0
CBLOCKEND 235 4 2327

;;	}
CLINEA 0000H 0000H 0917H 0002H 0002H
_$L517 :
CBLOCKEND 235 2 2371

;;}
CLINEA 0000H 0001H 0943H 0001H 0001H
	pop	pc
CBLOCKEND 235 1 2371
CFUNCTIONEND 235


	rseg $$AccelSensorControlPID_P$main
CFUNCTION 238

_AccelSensorControlPID_P	:
CBLOCK 238 1 2556

;;void AccelSensorControlPID_P(void){
CLINEA 0000H 0001H 09FCH 0001H 0023H
	push	lr
	push	xr4
CBLOCK 238 2 2556
CRET 0004H
CLOCAL 4BH 0002H 0000H 0002H "i" 02H 00H 01H
CSLOCAL 43H 0004H 0003H 0002H "Accel_PID_XRollOutput" 02H 00H 03H
CSLOCAL 43H 0004H 0004H 0002H "Accel_PID_YPitchOutput" 02H 00H 03H

;;		Accel_PID_XRollError = -CF_XRoll;	//Setpoint - Error (in this case setpoint is 0)
CLINEA 0000H 0001H 0A11H 0003H 0053H
	l	er0,	NEAR _CF_XRoll
	l	er2,	NEAR _CF_XRoll+02h
	push	xr0
	bl	__fnegu8sw
	pop	xr0
	st	er0,	NEAR _Accel_PID_XRollError
	st	er2,	NEAR _Accel_PID_XRollError+02h

;;		testP = Accel_PID_XRollOutput;
CLINEA 0000H 0001H 0A1BH 0003H 0020H
	push	xr0
	l	er0,	NEAR _Accel_PID_XRoll_kp
	l	er2,	NEAR _Accel_PID_XRoll_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	push	xr0
	bl	__ftolu8sw
	pop	er4
	add	sp,	#2 
	st	er4,	NEAR _testP

;;		Accel_PID_XRollOutput += (Accel_PID_XRoll_ki*Accel_PID_XRollErrSum);
CLINEA 0000H 0001H 0A1CH 0003H 0046H
	l	er4,	NEAR _Accel_PID_XRollErrSum
	l	er6,	NEAR _Accel_PID_XRollErrSum+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_XRoll_ki
	l	er6,	NEAR _Accel_PID_XRoll_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST3
	st	er2,	NEAR _$ST3+02h

;;		Accel_PID_YPitchError = -CF_YPitch;		//Setpoint - Error (in this case setpoint is 0)
CLINEA 0000H 0001H 0A21H 0003H 0056H
	l	er0,	NEAR _CF_YPitch
	l	er2,	NEAR _CF_YPitch+02h
	push	xr0
	bl	__fnegu8sw
	pop	xr0
	st	er0,	NEAR _Accel_PID_YPitchError
	st	er2,	NEAR _Accel_PID_YPitchError+02h

;;		Accel_PID_YPitchOutput = (Accel_PID_YPitch_kp*Accel_PID_YPitchError) + (Accel_PID_YPitch_ki*Accel_PID_YPitchErrSum);
CLINEA 0000H 0001H 0A2CH 0003H 0076H
	push	xr0
	l	er0,	NEAR _Accel_PID_YPitch_kp
	l	er2,	NEAR _Accel_PID_YPitch_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Accel_PID_YPitchErrSum
	l	er6,	NEAR _Accel_PID_YPitchErrSum+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_YPitch_ki
	l	er6,	NEAR _Accel_PID_YPitch_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST4
	st	er2,	NEAR _$ST4+02h

;;		if(PrePIDCount >= 10){
CLINEA 0000H 0001H 0A2EH 0003H 0018H
	l	r0,	NEAR _PrePIDCount
	cmp	r0,	#0ah
	bge	_$M38
	b	_$L527
_$M38 :
CBLOCK 238 3 2606

;;			if(Accel_PID_XRollError > 0){
CLINEA 0000H 0001H 0A2FH 0004H 0020H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L522
CBLOCK 238 4 2607

;;				PERUN = 0;
CLINEA 0000H 0001H 0A31H 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0A32H 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun + Accel_PID_XRollOutput + PWMtoRPMOffset_Mot2;	
CLINEA 0000H 0001H 0A35H 0005H 0049H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST3
	l	er2,	NEAR _$ST3+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot2
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun;
CLINEA 0000H 0001H 0A38H 0005H 001AH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0A39H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0A3CH 0005H 000EH
CBLOCKEND 238 4 2622

;;			else{
CLINEA 0000H 0001H 0A3FH 0004H 0008H
	bal	_$L524
_$L522 :
CBLOCK 238 5 2623

;;				PERUN = 0;
CLINEA 0000H 0001H 0A41H 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0A42H 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0A45H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun - Accel_PID_XRollOutput + PWMtoRPMOffset_Mot4;
CLINEA 0000H 0001H 0A47H 0005H 0048H
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST3
	l	er2,	NEAR _$ST3+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot4
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0A48H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0A4BH 0005H 000EH
CBLOCKEND 238 5 2637

;;			}
CLINEA 0000H 0000H 0A4DH 0004H 0004H
_$L524 :
	sb	0f937h.0
	sb	0f927h.0

;;			if(Accel_PID_YPitchError > 0){
CLINEA 0000H 0001H 0A4EH 0004H 0021H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L525
CBLOCK 238 6 2638

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0A4FH 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0A52H 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun + Accel_PID_YPitchOutput; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0A53H 0005H 0068H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST4
	l	er2,	NEAR _$ST4+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0A55H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0A57H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0A58H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0A5BH 0005H 000EH
	sb	0f917h.0
CBLOCKEND 238 6 2652

;;			else{
CLINEA 0000H 0001H 0A5DH 0004H 0008H
	bal	_$L527
_$L525 :
CBLOCK 238 7 2653

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0A5EH 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0A61H 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0A62H 0005H 004FH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun - Accel_PID_YPitchOutput + PWMtoRPMOffset_Mot3;	
CLINEA 0000H 0001H 0A64H 0005H 004AH
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST4
	l	er2,	NEAR _$ST4+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot3
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0A66H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0A67H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0A6AH 0005H 000EH
	sb	0f917h.0
CBLOCKEND 238 7 2667

;;			}
CLINEA 0000H 0000H 0A6BH 0004H 0004H
_$L527 :
CBLOCKEND 238 3 2668
CBLOCKEND 238 2 2697

;;}
CLINEA 0000H 0001H 0A89H 0001H 0001H
	pop	xr4
	pop	pc
CBLOCKEND 238 1 2697
CFUNCTIONEND 238


	rseg $$AccelSensorControlPID_I$main
CFUNCTION 239

_AccelSensorControlPID_I	:
CBLOCK 239 1 2699

;;void AccelSensorControlPID_I(void){
CLINEA 0000H 0001H 0A8BH 0001H 0023H
	push	lr
	push	xr4
CBLOCK 239 2 2699
CRET 0004H
CLOCAL 4BH 0002H 0000H 0002H "i" 02H 00H 01H
CSLOCAL 43H 0004H 0005H 0002H "Accel_PID_XRollCurrentCount" 02H 00H 03H
CSLOCAL 43H 0004H 0006H 0002H "Accel_PID_XRollOutput" 02H 00H 03H
CSLOCAL 43H 0004H 0007H 0002H "Accel_PID_YPitchCurrentCount" 02H 00H 03H
CSLOCAL 43H 0004H 0008H 0002H "Accel_PID_YPitchOutput" 02H 00H 03H

;;		Accel_PID_XRollCurrentCount = Accel_PID_XRollCounter_I * .001;	//Timer in Seconds
CLINEA 0000H 0001H 0AA0H 0003H 0053H
	l	er0,	NEAR _Accel_PID_XRollCounter_I
	mov	er2,	#0 
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	mov	r0,	#0fch
	mov	r1,	#0a9h
	mov	r2,	#0f1h
	mov	r3,	#0d2h
	mov	r4,	#04dh
	mov	r5,	#062h
	mov	r6,	#050h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST5
	st	er2,	NEAR _$ST5+02h

;;		Accel_PID_XRollCounter_I = 0;
CLINEA 0000H 0001H 0AA1H 0003H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollCounter_I

;;		Accel_PID_XRollErrSum += (Accel_PID_XRollError * Accel_PID_XRollCurrentCount);
CLINEA 0000H 0001H 0AA4H 0003H 0050H
	l	er0,	NEAR _$ST5
	push	xr0
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	l	er0,	NEAR _Accel_PID_XRollErrSum
	l	er2,	NEAR _Accel_PID_XRollErrSum+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_XRollErrSum
	st	er2,	NEAR _Accel_PID_XRollErrSum+02h

;;		testI = (Accel_PID_XRoll_ki*Accel_PID_XRollErrSum);
CLINEA 0000H 0001H 0AA8H 0003H 0035H
	push	xr0
	l	er0,	NEAR _Accel_PID_XRoll_ki
	l	er2,	NEAR _Accel_PID_XRoll_ki+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	NEAR _testI

;;		Accel_PID_XRollOutput += testI;
CLINEA 0000H 0001H 0AA9H 0003H 0021H
	l	er4,	NEAR _Accel_PID_XRollError
	l	er6,	NEAR _Accel_PID_XRollError+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_XRoll_kp
	l	er6,	NEAR _Accel_PID_XRoll_kp+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	mov	r2,	r1
	extbw	er2
	mov	r2,	r3
	push	xr0
	bl	__fildu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST6
	st	er2,	NEAR _$ST6+02h

;;		Accel_PID_YPitchCurrentCount = Accel_PID_YPitchCounter_I * .001;		//Timer in Seconds
CLINEA 0000H 0001H 0AAEH 0003H 0056H
	l	er0,	NEAR _Accel_PID_YPitchCounter_I
	mov	er2,	#0 
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	mov	r0,	#0fch
	mov	r1,	#0a9h
	mov	r2,	#0f1h
	mov	r3,	#0d2h
	mov	r4,	#04dh
	mov	r5,	#062h
	mov	r6,	#050h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST7
	st	er2,	NEAR _$ST7+02h

;;		Accel_PID_YPitchCounter_I = 0;
CLINEA 0000H 0001H 0AAFH 0003H 0020H
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchCounter_I

;;		Accel_PID_YPitchErrSum += (Accel_PID_YPitchError * Accel_PID_YPitchCurrentCount);
CLINEA 0000H 0001H 0AB3H 0003H 0053H
	l	er0,	NEAR _$ST7
	push	xr0
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	l	er0,	NEAR _Accel_PID_YPitchErrSum
	l	er2,	NEAR _Accel_PID_YPitchErrSum+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_YPitchErrSum
	st	er2,	NEAR _Accel_PID_YPitchErrSum+02h

;;		Accel_PID_YPitchOutput = (Accel_PID_YPitch_kp*Accel_PID_YPitchError) + (Accel_PID_YPitch_ki*Accel_PID_YPitchErrSum);
CLINEA 0000H 0001H 0AB7H 0003H 0076H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	l	er0,	NEAR _Accel_PID_YPitch_kp
	l	er2,	NEAR _Accel_PID_YPitch_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Accel_PID_YPitchErrSum
	l	er6,	NEAR _Accel_PID_YPitchErrSum+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_YPitch_ki
	l	er6,	NEAR _Accel_PID_YPitch_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST8
	st	er2,	NEAR _$ST8+02h

;;		if(PrePIDCount >= 10){
CLINEA 0000H 0001H 0AB9H 0003H 0018H
	l	r0,	NEAR _PrePIDCount
	cmp	r0,	#0ah
	bge	_$M40
	b	_$L536
_$M40 :
CBLOCK 239 3 2745

;;			if(Accel_PID_XRollError > 0){
CLINEA 0000H 0001H 0ABAH 0004H 0020H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L531
CBLOCK 239 4 2746

;;				PERUN = 0;
CLINEA 0000H 0001H 0ABCH 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0ABDH 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun + Accel_PID_XRollOutput + PWMtoRPMOffset_Mot2;	
CLINEA 0000H 0001H 0AC0H 0005H 0049H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST6
	l	er2,	NEAR _$ST6+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot2
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun;
CLINEA 0000H 0001H 0AC3H 0005H 001AH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0AC4H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0AC7H 0005H 000EH
CBLOCKEND 239 4 2761

;;			else{
CLINEA 0000H 0001H 0ACAH 0004H 0008H
	bal	_$L533
_$L531 :
CBLOCK 239 5 2762

;;				PERUN = 0;
CLINEA 0000H 0001H 0ACCH 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0ACDH 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0AD0H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun - Accel_PID_XRollOutput + PWMtoRPMOffset_Mot4;
CLINEA 0000H 0001H 0AD2H 0005H 0048H
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST6
	l	er2,	NEAR _$ST6+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot4
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0AD3H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0AD6H 0005H 000EH
CBLOCKEND 239 5 2776

;;			}
CLINEA 0000H 0000H 0AD8H 0004H 0004H
_$L533 :
	sb	0f937h.0
	sb	0f927h.0

;;			if(Accel_PID_YPitchError > 0){
CLINEA 0000H 0001H 0AD9H 0004H 0021H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L534
CBLOCK 239 6 2777

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0ADAH 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0ADDH 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun + Accel_PID_YPitchOutput; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0ADEH 0005H 0068H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST8
	l	er2,	NEAR _$ST8+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0AE0H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0AE2H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0AE3H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0AE6H 0005H 000EH
	sb	0f917h.0
CBLOCKEND 239 6 2791

;;			else{
CLINEA 0000H 0001H 0AE8H 0004H 0008H
	bal	_$L536
_$L534 :
CBLOCK 239 7 2792

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0AE9H 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0AECH 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0AEDH 0005H 004FH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun - Accel_PID_YPitchOutput + PWMtoRPMOffset_Mot3;	
CLINEA 0000H 0001H 0AEFH 0005H 004AH
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST8
	l	er2,	NEAR _$ST8+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot3
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0AF1H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0AF2H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0AF5H 0005H 000EH
	sb	0f917h.0
CBLOCKEND 239 7 2806

;;			}
CLINEA 0000H 0000H 0AF6H 0004H 0004H
_$L536 :
CBLOCKEND 239 3 2807
CBLOCKEND 239 2 2836

;;}
CLINEA 0000H 0001H 0B14H 0001H 0001H
	pop	xr4
	pop	pc
CBLOCKEND 239 1 2836
CFUNCTIONEND 239


	rseg $$AccelSensorControlPID_D$main
CFUNCTION 240

_AccelSensorControlPID_D	:
CBLOCK 240 1 2838

;;void AccelSensorControlPID_D(void){
CLINEA 0000H 0001H 0B16H 0001H 0023H
	push	lr
	push	xr8
	push	xr4
CBLOCK 240 2 2838
CRET 0008H
CLOCAL 4BH 0002H 0000H 0002H "i" 02H 00H 01H
CSLOCAL 43H 0004H 0009H 0002H "Accel_PID_XRollCurrentCount" 02H 00H 03H
CSLOCAL 43H 0004H 000AH 0002H "Accel_PID_XRollOutput" 02H 00H 03H
CSLOCAL 43H 0004H 000BH 0002H "Accel_PID_YPitchCurrentCount" 02H 00H 03H
CSLOCAL 43H 0004H 000CH 0002H "Accel_PID_YPitchOutput" 02H 00H 03H

;;		Accel_PID_XRollCurrentCount = Accel_PID_XRollCounter_D * .001;	//Timer in Seconds
CLINEA 0000H 0001H 0B2CH 0003H 0053H
	l	er0,	NEAR _Accel_PID_XRollCounter_D
	mov	er2,	#0 
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	mov	r0,	#0fch
	mov	r1,	#0a9h
	mov	r2,	#0f1h
	mov	r3,	#0d2h
	mov	r4,	#04dh
	mov	r5,	#062h
	mov	r6,	#050h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST9
	st	er2,	NEAR _$ST9+02h

;;		Accel_PID_XRollCounter_D = 0;
CLINEA 0000H 0001H 0B2DH 0003H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollCounter_D

;;		Accel_PID_XRolldErr	/= Accel_PID_XRollCurrentCount;
CLINEA 0000H 0001H 0B31H 0003H 0035H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	l	er0,	NEAR _Accel_PID_XRollErrPrev
	l	er2,	NEAR _Accel_PID_XRollErrPrev+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	l	er0,	NEAR _$ST9
	l	er2,	NEAR _$ST9+02h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_XRolldErr
	st	er2,	NEAR _Accel_PID_XRolldErr+02h

;;		if( Accel_PID_XRollError<0)
CLINEA 0000H 0001H 0B33H 0003H 001DH
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L540
CBLOCK 240 3 2868

;;			if(Accel_PID_XRollErrPrev>=0)
CLINEA 0000H 0001H 0B35H 0004H 0020H
	l	er0,	NEAR _Accel_PID_XRollErrPrev
	l	er2,	NEAR _Accel_PID_XRollErrPrev+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L540
CBLOCK 240 4 2870

;;				Accel_PID_XRollErrSum = 0;
CLINEA 0000H 0001H 0B37H 0005H 001EH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollErrSum
	st	er0,	NEAR _Accel_PID_XRollErrSum+02h
CBLOCKEND 240 4 2872

;;			}
CLINEA 0000H 0000H 0B38H 0004H 0004H
_$L540 :
CBLOCKEND 240 3 2873

;;		if( Accel_PID_XRollError>=0)
CLINEA 0000H 0001H 0B3BH 0003H 001EH
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L544
CBLOCK 240 5 2876

;;			if(Accel_PID_XRollErrPrev<0)
CLINEA 0000H 0001H 0B3DH 0004H 001FH
	l	er0,	NEAR _Accel_PID_XRollErrPrev
	l	er2,	NEAR _Accel_PID_XRollErrPrev+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L544
CBLOCK 240 6 2878

;;				Accel_PID_XRollErrSum = 0;
CLINEA 0000H 0001H 0B3FH 0005H 001EH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollErrSum
	st	er0,	NEAR _Accel_PID_XRollErrSum+02h
CBLOCKEND 240 6 2880

;;			}
CLINEA 0000H 0000H 0B40H 0004H 0004H
_$L544 :
CBLOCKEND 240 5 2881

;;		Accel_PID_XRollErrPrev = Accel_PID_XRollError;
CLINEA 0000H 0001H 0B43H 0003H 0030H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	st	er0,	NEAR _Accel_PID_XRollErrPrev
	st	er2,	NEAR _Accel_PID_XRollErrPrev+02h

;;		testD = (Accel_PID_XRoll_kd*Accel_PID_XRolldErr);
CLINEA 0000H 0001H 0B50H 0003H 0033H
	l	er0,	NEAR _Accel_PID_XRoll_kd
	l	er2,	NEAR _Accel_PID_XRoll_kd+02h
	push	xr0
	l	er0,	NEAR _Accel_PID_XRolldErr
	l	er2,	NEAR _Accel_PID_XRolldErr+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er8
	add	sp,	#2 
	st	er8,	NEAR _testD

;;		Accel_PID_XRollOutput += testD;
CLINEA 0000H 0001H 0B52H 0003H 0021H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	l	er0,	NEAR _Accel_PID_XRoll_kp
	l	er2,	NEAR _Accel_PID_XRoll_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Accel_PID_XRollErrSum
	l	er6,	NEAR _Accel_PID_XRollErrSum+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_XRoll_ki
	l	er6,	NEAR _Accel_PID_XRoll_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr4
	mov	r2,	r9
	extbw	er2
	mov	r2,	r3
	mov	er10,	er2
	push	xr8
	bl	__fildu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST10
	st	er2,	NEAR _$ST10+02h

;;		Accel_PID_YPitchCurrentCount = Accel_PID_YPitchCounter_D * .001;		//Timer in Seconds
CLINEA 0000H 0001H 0B56H 0003H 0056H
	l	er0,	NEAR _Accel_PID_YPitchCounter_D
	mov	er2,	#0 
	push	xr0
	add	sp,	#-4
	bl	__dildu8sw
	mov	r0,	#0fch
	mov	r1,	#0a9h
	mov	r2,	#0f1h
	mov	r3,	#0d2h
	mov	r4,	#04dh
	mov	r5,	#062h
	mov	r6,	#050h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST11
	st	er2,	NEAR _$ST11+02h

;;		Accel_PID_YPitchCounter_D = 0;
CLINEA 0000H 0001H 0B57H 0003H 0020H
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchCounter_D

;;		Accel_PID_YPitchdErr /= Accel_PID_YPitchCurrentCount;
CLINEA 0000H 0001H 0B5CH 0003H 0037H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	l	er0,	NEAR _Accel_PID_YPitchErrPrev
	l	er2,	NEAR _Accel_PID_YPitchErrPrev+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	l	er0,	NEAR _$ST11
	l	er2,	NEAR _$ST11+02h
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Accel_PID_YPitchdErr
	st	er2,	NEAR _Accel_PID_YPitchdErr+02h

;;		if( Accel_PID_YPitchError<0)
CLINEA 0000H 0001H 0B5EH 0003H 001EH
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L548
CBLOCK 240 7 2911

;;			if(Accel_PID_YPitchErrPrev>=0) 
CLINEA 0000H 0001H 0B60H 0004H 0022H
	l	er0,	NEAR _Accel_PID_YPitchErrPrev
	l	er2,	NEAR _Accel_PID_YPitchErrPrev+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L548
CBLOCK 240 8 2913

;;				Accel_PID_YPitchErrSum = 0;
CLINEA 0000H 0001H 0B62H 0005H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchErrSum
	st	er0,	NEAR _Accel_PID_YPitchErrSum+02h
CBLOCKEND 240 8 2915

;;			}
CLINEA 0000H 0000H 0B63H 0004H 0004H
_$L548 :
CBLOCKEND 240 7 2916

;;		if( Accel_PID_YPitchError>=0)
CLINEA 0000H 0001H 0B65H 0003H 001FH
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L552
CBLOCK 240 9 2918

;;			if(Accel_PID_YPitchErrPrev<0)
CLINEA 0000H 0001H 0B67H 0004H 0020H
	l	er0,	NEAR _Accel_PID_YPitchErrPrev
	l	er2,	NEAR _Accel_PID_YPitchErrPrev+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L552
CBLOCK 240 10 2920

;;				Accel_PID_YPitchErrSum = 0;
CLINEA 0000H 0001H 0B69H 0005H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchErrSum
	st	er0,	NEAR _Accel_PID_YPitchErrSum+02h
CBLOCKEND 240 10 2922

;;			}
CLINEA 0000H 0000H 0B6AH 0004H 0004H
_$L552 :
CBLOCKEND 240 9 2923

;;		Accel_PID_YPitchErrPrev = Accel_PID_YPitchError;
CLINEA 0000H 0001H 0B6DH 0003H 0032H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	st	er0,	NEAR _Accel_PID_YPitchErrPrev
	st	er2,	NEAR _Accel_PID_YPitchErrPrev+02h

;;		Accel_PID_YPitchOutput = (Accel_PID_YPitch_kp*Accel_PID_YPitchError) + (Accel_PID_YPitch_ki*Accel_PID_YPitchErrSum) + (Accel_PID_YPitch_kd*Accel_PID_YPitchdErr);
CLINEA 0000H 0001H 0B78H 0003H 00A3H
	push	xr0
	l	er0,	NEAR _Accel_PID_YPitch_kp
	l	er2,	NEAR _Accel_PID_YPitch_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Accel_PID_YPitchErrSum
	l	er6,	NEAR _Accel_PID_YPitchErrSum+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_YPitch_ki
	l	er6,	NEAR _Accel_PID_YPitch_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Accel_PID_YPitch_kd
	l	er6,	NEAR _Accel_PID_YPitch_kd+02h
	push	xr4
	l	er4,	NEAR _Accel_PID_YPitchdErr
	l	er6,	NEAR _Accel_PID_YPitchdErr+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _$ST12
	st	er2,	NEAR _$ST12+02h

;;		if(PrePIDCount >= 10){
CLINEA 0000H 0001H 0B7AH 0003H 0018H
	l	r0,	NEAR _PrePIDCount
	cmp	r0,	#0ah
	bge	_$M42
	b	_$L561
_$M42 :
CBLOCK 240 11 2938

;;			if(Accel_PID_XRollError > 0){
CLINEA 0000H 0001H 0B7BH 0004H 0020H
	l	er0,	NEAR _Accel_PID_XRollError
	l	er2,	NEAR _Accel_PID_XRollError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L556
CBLOCK 240 12 2939

;;				PERUN = 0;
CLINEA 0000H 0001H 0B7DH 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0B7EH 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun + Accel_PID_XRollOutput + PWMtoRPMOffset_Mot2;	
CLINEA 0000H 0001H 0B81H 0005H 0049H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST10
	l	er2,	NEAR _$ST10+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot2
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun;
CLINEA 0000H 0001H 0B84H 0005H 001AH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0B85H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0B88H 0005H 000EH
CBLOCKEND 240 12 2954

;;			else{
CLINEA 0000H 0001H 0B8BH 0004H 0008H
	bal	_$L558
_$L556 :
CBLOCK 240 13 2955

;;				PERUN = 0;
CLINEA 0000H 0001H 0B8DH 0005H 000EH
	rb	0f937h.0

;;				PDRUN = 0;
CLINEA 0000H 0001H 0B8EH 0005H 000EH
	rb	0f927h.0

;;				PWED = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0B91H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f932h

;;				PWDD = PWMIdleDutyRun - Accel_PID_XRollOutput + PWMtoRPMOffset_Mot4;
CLINEA 0000H 0001H 0B93H 0005H 0048H
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST10
	l	er2,	NEAR _$ST10+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot4
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f922h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0B94H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PDRUN = 1;
CLINEA 0000H 0001H 0B97H 0005H 000EH
CBLOCKEND 240 13 2969

;;			}
CLINEA 0000H 0000H 0B99H 0004H 0004H
_$L558 :
	sb	0f937h.0
	sb	0f927h.0

;;			if(Accel_PID_YPitchError > 0){
CLINEA 0000H 0001H 0B9AH 0004H 0021H
	l	er0,	NEAR _Accel_PID_YPitchError
	l	er2,	NEAR _Accel_PID_YPitchError+02h
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L559
CBLOCK 240 14 2970

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0B9BH 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0B9EH 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun + Accel_PID_YPitchOutput; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0B9FH 0005H 0068H
	l	er0,	NEAR _PWMIdleDutyRun
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST12
	l	er2,	NEAR _$ST12+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun;	
CLINEA 0000H 0001H 0BA1H 0005H 001BH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0BA3H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0BA4H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0BA7H 0005H 000EH
	sb	0f917h.0
CBLOCKEND 240 14 2984

;;			else{
CLINEA 0000H 0001H 0BA9H 0004H 0008H
	bal	_$L561
_$L559 :
CBLOCK 240 15 2985

;;				PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0BAAH 0005H 001DH
	rb	0f973h.0

;;				PCRUN = 0;
CLINEA 0000H 0001H 0BADH 0005H 000EH
	rb	0f917h.0

;;				PWF0D = PWMIdleDutyRun; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0BAEH 0005H 004FH
	l	er0,	NEAR _PWMIdleDutyRun
	st	er0,	0f962h

;;				PWCD = PWMIdleDutyRun - Accel_PID_YPitchOutput + PWMtoRPMOffset_Mot3;	
CLINEA 0000H 0001H 0BB0H 0005H 004AH
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _$ST12
	l	er2,	NEAR _$ST12+02h
	push	xr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr4
	l	er0,	NEAR _PWMtoRPMOffset_Mot3
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	push	qr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f912h

;;				CheckSafetyLimit();
CLINEA 0000H 0001H 0BB2H 0005H 0017H
	bl	_CheckSafetyLimit

;;				PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0BB3H 0005H 001CH
	sb	0f973h.0

;;				PCRUN = 1;
CLINEA 0000H 0001H 0BB6H 0005H 000EH
	sb	0f917h.0
CBLOCKEND 240 15 2999

;;			}
CLINEA 0000H 0000H 0BB7H 0004H 0004H
_$L561 :
CBLOCKEND 240 11 3000
CBLOCKEND 240 2 3030

;;}
CLINEA 0000H 0001H 0BD6H 0001H 0001H
	pop	xr4
	pop	xr8
	pop	pc
CBLOCKEND 240 1 3030
CFUNCTIONEND 240


	rseg $$RangeSensorControlPID$main
CFUNCTION 241

_RangeSensorControlPID	:
CBLOCK 241 1 3031

;;void RangeSensorControlPID(void){
CLINEA 0000H 0001H 0BD7H 0001H 0021H
	push	lr
	push	xr8
	push	xr4
CBLOCK 241 2 3031
CRET 0008H
CLOCAL 47H 0002H 0024H 0002H "i" 02H 00H 01H

;;	Range_PIDError = Range_PIDSetpoint - Range_out;
CLINEA 0000H 0001H 0BDCH 0002H 0030H
	l	er0,	NEAR _Range_out
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	pop	xr0
	l	er4,	NEAR _Range_PIDSetpoint
	l	er6,	NEAR _Range_PIDSetpoint+02h
	push	qr0
	bl	__fsubu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Range_PIDError
	st	er2,	NEAR _Range_PIDError+02h

;;	Range_PIDCurrentCount = Range_PIDCounter * .007;		//Timer in Seconds (.007 used to convert 128Hz TBC to seconds)
CLINEA 0000H 0001H 0BDFH 0002H 0071H
	l	er4,	NEAR _Range_PIDCounter
	mov	er6,	#0 
	push	xr4
	add	sp,	#-4
	bl	__dildu8sw
	mov	r4,	#079h
	mov	r5,	#0e9h
	mov	r6,	#026h
	mov	r7,	#031h
	mov	r8,	#08h
	mov	r9,	#0ach
	mov	r10,	#07ch
	mov	r11,	#03fh
	push	xr8
	push	xr4
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr4
	st	er4,	NEAR _Range_PIDCurrentCount
	st	er6,	NEAR _Range_PIDCurrentCount+02h

;;	Range_PIDCounter = 0;
CLINEA 0000H 0001H 0BE0H 0002H 0016H
	mov	er4,	#0 
	st	er4,	NEAR _Range_PIDCounter

;;	Range_PIDErrSum += (Range_PIDError * Range_PIDCurrentCount);
CLINEA 0000H 0001H 0BE3H 0002H 003DH
	push	xr0
	l	er4,	NEAR _Range_PIDCurrentCount
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	l	er4,	NEAR _Range_PIDErrSum
	l	er6,	NEAR _Range_PIDErrSum+02h
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr4
	st	er4,	NEAR _Range_PIDErrSum
	st	er6,	NEAR _Range_PIDErrSum+02h

;;	Range_PIDdErr	/= Range_PIDCurrentCount;
CLINEA 0000H 0001H 0BE7H 0002H 0028H
	push	xr0
	l	er4,	NEAR _Range_PIDErrPrev
	l	er6,	NEAR _Range_PIDErrPrev+02h
	push	xr4
	bl	__fsubu8sw
	add	sp,	#4 
	l	er4,	NEAR _Range_PIDCurrentCount
	l	er6,	NEAR _Range_PIDCurrentCount+02h
	push	xr4
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr4
	st	er4,	NEAR _Range_PIDdErr
	st	er6,	NEAR _Range_PIDdErr+02h

;;	Range_PIDErrPrev = Range_PIDError;
CLINEA 0000H 0001H 0BE8H 0002H 0023H
	st	er0,	NEAR _Range_PIDErrPrev
	st	er2,	NEAR _Range_PIDErrPrev+02h

;;	Range_PIDOutput = (Range_PID_kp*Range_PIDError) + (Range_PID_ki*Range_PIDErrSum) + (Range_PID_kd*Range_PIDdErr);
CLINEA 0000H 0001H 0BEBH 0002H 0071H
	push	xr0
	l	er0,	NEAR _Range_PID_kp
	l	er2,	NEAR _Range_PID_kp+02h
	push	xr0
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Range_PIDErrSum
	l	er6,	NEAR _Range_PIDErrSum+02h
	push	xr4
	l	er4,	NEAR _Range_PID_ki
	l	er6,	NEAR _Range_PID_ki+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	l	er4,	NEAR _Range_PID_kd
	l	er6,	NEAR _Range_PID_kd+02h
	push	xr4
	l	er4,	NEAR _Range_PIDdErr
	l	er6,	NEAR _Range_PIDdErr+02h
	push	xr4
	bl	__fmulu8sw
	add	sp,	#4 
	pop	xr4
	push	xr0
	push	xr4
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _Range_PIDOutput
	st	er2,	NEAR _Range_PIDOutput+02h

;;	PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0BEFH 0002H 001AH
	rb	0f973h.0

;;	PERUN = 0;
CLINEA 0000H 0001H 0BF0H 0002H 000BH
	rb	0f937h.0

;;	PDRUN = 0;
CLINEA 0000H 0001H 0BF1H 0002H 000BH
	rb	0f927h.0

;;	PCRUN = 0;
CLINEA 0000H 0001H 0BF2H 0002H 000BH
	rb	0f917h.0

;;	PWF0D += Range_PIDOutput; 		//Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0BF3H 0002H 004EH
	l	er0,	0f962h
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_PIDOutput
	l	er2,	NEAR _Range_PIDOutput+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f962h

;;	PWED += Range_PIDOutput;	
CLINEA 0000H 0001H 0BF4H 0002H 001AH
	l	er0,	0f932h
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_PIDOutput
	l	er2,	NEAR _Range_PIDOutput+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f932h

;;	PWDD += Range_PIDOutput;	
CLINEA 0000H 0001H 0BF5H 0002H 001AH
	l	er0,	0f922h
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_PIDOutput
	l	er2,	NEAR _Range_PIDOutput+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f922h

;;	PWCD += Range_PIDOutput;
CLINEA 0000H 0001H 0BF6H 0002H 0019H
	l	er0,	0f912h
	mov	er2,	#0 
	push	xr0
	bl	__fuldu8sw
	l	er0,	NEAR _Range_PIDOutput
	l	er2,	NEAR _Range_PIDOutput+02h
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	bl	__ftolu8sw
	pop	er0
	add	sp,	#2 
	st	er0,	0f912h

;;	CheckSafetyLimit();
CLINEA 0000H 0001H 0BF7H 0002H 0014H
	bl	_CheckSafetyLimit

;;	PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0BF8H 0002H 0019H
	sb	0f973h.0

;;	PERUN = 1;
CLINEA 0000H 0001H 0BF9H 0002H 000BH
	sb	0f937h.0

;;	PDRUN = 1;
CLINEA 0000H 0001H 0BFAH 0002H 000BH
	sb	0f927h.0

;;	PCRUN = 1;
CLINEA 0000H 0001H 0BFBH 0002H 000BH
	sb	0f917h.0

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0001H 0BFDH 0002H 0017H
	mov	er0,	#0 
_$L565 :
CBLOCK 241 3 3070

;;		SensorReturn[i] = 0x20;
CLINEA 0000H 0001H 0BFFH 0003H 0019H
	mov	r2,	#020h
	st	r2,	NEAR _SensorReturn[er0]
CBLOCKEND 241 3 3072

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0BFDH 0002H 0017H
	add	er0,	#1 

;;	for(i = 0; i<150; i++)
CLINEA 0000H 0000H 0BFDH 000EH 0013H
	cmp	r0,	#096h
	cmpc	r1,	#00h
	blts	_$L565

;;	sprintf(SensorReturn, "%f,%f,%f", Range_out, Range_PIDCurrentCount,Range_PIDOutput);
CLINEA 0000H 0001H 0C03H 0002H 0055H
	l	er0,	NEAR _Range_PIDOutput
	l	er2,	NEAR _Range_PIDOutput+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Range_PIDCurrentCount
	l	er2,	NEAR _Range_PIDCurrentCount+02h
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	l	er0,	NEAR _Range_out
	push	er0
	mov	r0,	#BYTE1 OFFSET $$S237
	mov	r1,	#BYTE2 OFFSET $$S237
	push	er0
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	push	er0
	bl	_sprintf_nn
	add	sp,	#22

;;	SensorReturn[148] = 0x0D;
CLINEA 0000H 0001H 0C05H 0002H 001AH
	mov	r0,	#0dh
	st	r0,	NEAR _SensorReturn+094h

;;	SensorReturn[149] = 0x0A;
CLINEA 0000H 0001H 0C06H 0002H 001AH
	mov	r0,	#0ah
	st	r0,	NEAR _SensorReturn+095h

;;	_flgUartFin = 0;
CLINEA 0000H 0001H 0C09H 0002H 0011H
	mov	r0,	#00h
	st	r0,	NEAR __flgUartFin

;;	uart_stop();
CLINEA 0000H 0001H 0C0AH 0002H 000DH
	bl	_uart_stop

;;	uart_startSend(SensorReturn, 150, _funcUartFin);
CLINEA 0000H 0001H 0C0BH 0002H 0031H
	mov	r0,	#BYTE1 OFFSET __funcUartFin
	mov	r1,	#BYTE2 OFFSET __funcUartFin
	push	er0
	mov	r2,	#096h
	mov	r3,	#00h
	mov	r0,	#BYTE1 OFFSET _SensorReturn
	mov	r1,	#BYTE2 OFFSET _SensorReturn
	bl	_uart_startSend
	add	sp,	#2 

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0C0CH 0001H 0001H
	bal	_$L573

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0C0CH 0002H 0019H
_$L571 :
CBLOCK 241 4 3084

;;		main_clrWDT();
CLINEA 0000H 0001H 0C0DH 0003H 0010H
	bl	_main_clrWDT
CBLOCKEND 241 4 3086

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0C0CH 0001H 0001H
_$L573 :

;;	while(_flgUartFin != 1){
CLINEA 0000H 0000H 0C0CH 000EH 0013H
	l	r0,	NEAR __flgUartFin
	cmp	r0,	#01h
	bne	_$L571
CBLOCKEND 241 2 3088

;;}
CLINEA 0000H 0001H 0C10H 0001H 0001H
	pop	xr4
	pop	xr8
	pop	pc
CBLOCKEND 241 1 3088
CFUNCTIONEND 241


	rseg $$CheckSafetyLimit$main
CFUNCTION 242

_CheckSafetyLimit	:
CBLOCK 242 1 3090

;;void CheckSafetyLimit(void){	
CLINEA 0000H 0001H 0C12H 0001H 001DH
CBLOCK 242 2 3090

;;	if(PWED > PWMUpperDutyLimitRun){
CLINEA 0000H 0001H 0C14H 0002H 0021H
	l	er0,	0f932h
	l	er2,	NEAR _PWMUpperDutyLimitRun
	cmp	er0,	er2
	ble	_$L575
CBLOCK 242 3 3092

;;		PWED = PWMUpperDutyLimitRun;
CLINEA 0000H 0001H 0C15H 0003H 001EH
	st	er2,	0f932h
CBLOCKEND 242 3 3094

;;	}
CLINEA 0000H 0000H 0C16H 0002H 0002H
_$L575 :

;;	if(PWED < PWMLowerDutyLimitRun){
CLINEA 0000H 0001H 0C17H 0002H 0021H
	l	er0,	0f932h
	l	er2,	NEAR _PWMLowerDutyLimitRun
	cmp	er0,	er2
	bge	_$L577
CBLOCK 242 4 3095

;;		PWED = PWMLowerDutyLimitRun;
CLINEA 0000H 0001H 0C18H 0003H 001EH
	st	er2,	0f932h
CBLOCKEND 242 4 3097

;;	}
CLINEA 0000H 0000H 0C19H 0002H 0002H
_$L577 :

;;	if(PWF0D > PWMUpperDutyLimitRun){
CLINEA 0000H 0001H 0C1AH 0002H 0022H
	l	er0,	0f962h
	l	er2,	NEAR _PWMUpperDutyLimitRun
	cmp	er0,	er2
	ble	_$L579
CBLOCK 242 5 3098

;;		PWF0D = PWMUpperDutyLimitRun;
CLINEA 0000H 0001H 0C1BH 0003H 001FH
	st	er2,	0f962h
CBLOCKEND 242 5 3100

;;	}
CLINEA 0000H 0000H 0C1CH 0002H 0002H
_$L579 :

;;	if(PWF0D < PWMLowerDutyLimitRun){
CLINEA 0000H 0001H 0C1DH 0002H 0022H
	l	er0,	0f962h
	l	er2,	NEAR _PWMLowerDutyLimitRun
	cmp	er0,	er2
	bge	_$L581
CBLOCK 242 6 3101

;;		PWF0D = PWMLowerDutyLimitRun;
CLINEA 0000H 0001H 0C1EH 0003H 001FH
	st	er2,	0f962h
CBLOCKEND 242 6 3103

;;	}
CLINEA 0000H 0000H 0C1FH 0002H 0002H
_$L581 :

;;	if(PWDD > PWMUpperDutyLimitRun){
CLINEA 0000H 0001H 0C20H 0002H 0021H
	l	er0,	0f922h
	l	er2,	NEAR _PWMUpperDutyLimitRun
	cmp	er0,	er2
	ble	_$L583
CBLOCK 242 7 3104

;;		PWDD = PWMUpperDutyLimitRun;
CLINEA 0000H 0001H 0C21H 0003H 001EH
	st	er2,	0f922h
CBLOCKEND 242 7 3106

;;	}
CLINEA 0000H 0000H 0C22H 0002H 0002H
_$L583 :

;;	if(PWDD < PWMLowerDutyLimitRun){
CLINEA 0000H 0001H 0C23H 0002H 0021H
	l	er0,	0f922h
	l	er2,	NEAR _PWMLowerDutyLimitRun
	cmp	er0,	er2
	bge	_$L585
CBLOCK 242 8 3107

;;		PWDD = PWMLowerDutyLimitRun;
CLINEA 0000H 0001H 0C24H 0003H 001EH
	st	er2,	0f922h
CBLOCKEND 242 8 3109

;;	}
CLINEA 0000H 0000H 0C25H 0002H 0002H
_$L585 :

;;	if(PWCD > PWMUpperDutyLimitRun){
CLINEA 0000H 0001H 0C26H 0002H 0021H
	l	er0,	0f912h
	l	er2,	NEAR _PWMUpperDutyLimitRun
	cmp	er0,	er2
	ble	_$L587
CBLOCK 242 9 3110

;;		PWCD = PWMUpperDutyLimitRun;
CLINEA 0000H 0001H 0C27H 0003H 001EH
	st	er2,	0f912h
CBLOCKEND 242 9 3112

;;	}
CLINEA 0000H 0000H 0C28H 0002H 0002H
_$L587 :

;;	if(PWCD < PWMLowerDutyLimitRun){
CLINEA 0000H 0001H 0C29H 0002H 0021H
	l	er0,	0f912h
	l	er2,	NEAR _PWMLowerDutyLimitRun
	cmp	er0,	er2
	bge	_$L589
CBLOCK 242 10 3113

;;		PWCD = PWMLowerDutyLimitRun;
CLINEA 0000H 0001H 0C2AH 0003H 001EH
	st	er2,	0f912h
CBLOCKEND 242 10 3115

;;	}
CLINEA 0000H 0000H 0C2BH 0002H 0002H
_$L589 :
CBLOCKEND 242 2 3116

;;}
CLINEA 0000H 0001H 0C2CH 0001H 0001H
	rt
CBLOCKEND 242 1 3116
CFUNCTIONEND 242


	rseg $$CheckSafetyLimitUnscaled$main
CFUNCTION 243

_CheckSafetyLimitUnscaled	:
CBLOCK 243 1 3118

;;void CheckSafetyLimitUnscaled(void){	
CLINEA 0000H 0001H 0C2EH 0001H 0025H
CBLOCK 243 2 3118

;;	if(Accel_PID_Motor1 > (49151)){
CLINEA 0000H 0001H 0C30H 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor1
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0bfh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bles	_$L592
CBLOCK 243 3 3120

;;		Accel_PID_Motor1 = 49151;
CLINEA 0000H 0001H 0C31H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#0bfh
	st	er0,	NEAR _Accel_PID_Motor1
CBLOCKEND 243 3 3122

;;	}
CLINEA 0000H 0000H 0C32H 0002H 0002H
_$L592 :

;;	if(Accel_PID_Motor1 < 16383){
CLINEA 0000H 0001H 0C33H 0002H 001EH
	l	er0,	NEAR _Accel_PID_Motor1
	cmp	r0,	#0ffh
	cmpc	r1,	#03fh
	bge	_$L594
CBLOCK 243 4 3123

;;		Accel_PID_Motor1 = 16383;
CLINEA 0000H 0001H 0C34H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#03fh
	st	er0,	NEAR _Accel_PID_Motor1
CBLOCKEND 243 4 3125

;;	}
CLINEA 0000H 0000H 0C35H 0002H 0002H
_$L594 :

;;	if(Accel_PID_Motor2 > (49151)){
CLINEA 0000H 0001H 0C36H 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor2
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0bfh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bles	_$L596
CBLOCK 243 5 3126

;;		Accel_PID_Motor2 = 49151;
CLINEA 0000H 0001H 0C37H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#0bfh
	st	er0,	NEAR _Accel_PID_Motor2
CBLOCKEND 243 5 3128

;;	}
CLINEA 0000H 0000H 0C38H 0002H 0002H
_$L596 :

;;	if(Accel_PID_Motor2 < (16383)){
CLINEA 0000H 0001H 0C39H 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor2
	cmp	r0,	#0ffh
	cmpc	r1,	#03fh
	bge	_$L598
CBLOCK 243 6 3129

;;		Accel_PID_Motor2 = 16383;
CLINEA 0000H 0001H 0C3AH 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#03fh
	st	er0,	NEAR _Accel_PID_Motor2
CBLOCKEND 243 6 3131

;;	}
CLINEA 0000H 0000H 0C3BH 0002H 0002H
_$L598 :

;;	if(Accel_PID_Motor3 > (49151)){
CLINEA 0000H 0001H 0C3CH 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor3
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0bfh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bles	_$L600
CBLOCK 243 7 3132

;;		Accel_PID_Motor3 = 49151;
CLINEA 0000H 0001H 0C3DH 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#0bfh
	st	er0,	NEAR _Accel_PID_Motor3
CBLOCKEND 243 7 3134

;;	}
CLINEA 0000H 0000H 0C3EH 0002H 0002H
_$L600 :

;;	if(Accel_PID_Motor3 < (16383)){
CLINEA 0000H 0001H 0C3FH 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor3
	cmp	r0,	#0ffh
	cmpc	r1,	#03fh
	bge	_$L602
CBLOCK 243 8 3135

;;		Accel_PID_Motor3 = 16383;
CLINEA 0000H 0001H 0C40H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#03fh
	st	er0,	NEAR _Accel_PID_Motor3
CBLOCKEND 243 8 3137

;;	}
CLINEA 0000H 0000H 0C41H 0002H 0002H
_$L602 :

;;	if(Accel_PID_Motor4 > (49151)){
CLINEA 0000H 0001H 0C42H 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor4
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0bfh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	bles	_$L604
CBLOCK 243 9 3138

;;		Accel_PID_Motor4 = 49151;
CLINEA 0000H 0001H 0C43H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#0bfh
	st	er0,	NEAR _Accel_PID_Motor4
CBLOCKEND 243 9 3140

;;	}
CLINEA 0000H 0000H 0C44H 0002H 0002H
_$L604 :

;;	if(Accel_PID_Motor4 < (16383)){
CLINEA 0000H 0001H 0C45H 0002H 0020H
	l	er0,	NEAR _Accel_PID_Motor4
	cmp	r0,	#0ffh
	cmpc	r1,	#03fh
	bge	_$L606
CBLOCK 243 10 3141

;;		Accel_PID_Motor4 = 16383;
CLINEA 0000H 0001H 0C46H 0003H 001BH
	mov	r0,	#0ffh
	mov	r1,	#03fh
	st	er0,	NEAR _Accel_PID_Motor4
CBLOCKEND 243 10 3143

;;	}
CLINEA 0000H 0000H 0C47H 0002H 0002H
_$L606 :
CBLOCKEND 243 2 3144

;;}
CLINEA 0000H 0001H 0C48H 0001H 0001H
	rt
CBLOCKEND 243 1 3144
CFUNCTIONEND 243


	rseg $$Shutdown$main
CFUNCTION 244

_Shutdown	:
CBLOCK 244 1 3146

;;void Shutdown(void){
CLINEA 0000H 0001H 0C4AH 0001H 0014H
	push	lr
CBLOCK 244 2 3146
CRET 0000H

;;	if((PWED > PWMSafeDuty)||(PWF0D > PWMSafeDuty)||(PWDD > PWMSafeDuty)||(PWCD > PWMSafeDuty)){
CLINEA 0000H 0001H 0C4BH 0002H 005DH
	l	er0,	0f932h
	l	er2,	NEAR _PWMSafeDuty
	cmp	er0,	er2
	bgt	_$L610
	l	er0,	0f962h
	cmp	er0,	er2
	bgt	_$L610
	l	er0,	0f922h
	cmp	er0,	er2
	bgt	_$L610
	l	er0,	0f912h
	cmp	er0,	er2
	bgt	_$M47
	b	_$L623
_$M47 :
_$L610 :
CBLOCK 244 3 3147
CBLOCK 244 4 3148

;;			main_clrWDT();					
CLINEA 0000H 0001H 0C4DH 0004H 0016H
	bl	_main_clrWDT

;;			PFRUN = 0;	//Turn OFF PWM
CLINEA 0000H 0001H 0C4EH 0004H 001CH
	rb	0f973h.0

;;			PERUN = 0;
CLINEA 0000H 0001H 0C4FH 0004H 000DH
	rb	0f937h.0

;;			PDRUN = 0;
CLINEA 0000H 0001H 0C50H 0004H 000DH
	rb	0f927h.0

;;			PCRUN = 0;
CLINEA 0000H 0001H 0C51H 0004H 000DH
	rb	0f917h.0

;;			PWF0D -= 10; //Can't be running to change (Only this variable)
CLINEA 0000H 0001H 0C52H 0004H 0041H
	l	er0,	0f962h
	add	er0,	#-10
	st	er0,	0f962h

;;			PWED -= 10;
CLINEA 0000H 0001H 0C53H 0004H 000EH
	l	er0,	0f932h
	add	er0,	#-10
	st	er0,	0f932h

;;			PWDD -= 10;
CLINEA 0000H 0001H 0C54H 0004H 000EH
	l	er0,	0f922h
	add	er0,	#-10
	st	er0,	0f922h

;;			PWCD -= 10;
CLINEA 0000H 0001H 0C55H 0004H 000EH
	l	er0,	0f912h
	add	er0,	#-10
	st	er0,	0f912h

;;			PFRUN = 1;	//Turn ON PWM
CLINEA 0000H 0001H 0C56H 0004H 001BH
	sb	0f973h.0

;;			PERUN = 1;
CLINEA 0000H 0001H 0C57H 0004H 000DH
	sb	0f937h.0

;;			PDRUN = 1;
CLINEA 0000H 0001H 0C58H 0004H 000DH
	sb	0f927h.0

;;			PCRUN = 1;
CLINEA 0000H 0001H 0C59H 0004H 000DH
	sb	0f917h.0

;;			NOPms(100);
CLINEA 0000H 0001H 0C5AH 0004H 000EH
	mov	r0,	#064h
	mov	r1,	#00h
	bl	_NOPms

;;			if(PWED <= PWMSafeDuty){
CLINEA 0000H 0001H 0C5CH 0004H 001BH
	l	er0,	0f932h
	l	er2,	NEAR _PWMSafeDuty
	cmp	er0,	er2
	bgt	_$L626
CBLOCK 244 5 3164

;;				PWED = PWMSafeDuty;
CLINEA 0000H 0001H 0C5DH 0005H 0017H
	st	er2,	0f932h
CBLOCKEND 244 5 3166

;;			}
CLINEA 0000H 0000H 0C5EH 0004H 0004H
_$L626 :

;;			if(PWF0D <= PWMSafeDuty){
CLINEA 0000H 0001H 0C5FH 0004H 001CH
	l	er0,	0f962h
	cmp	er0,	er2
	bgt	_$L628
CBLOCK 244 6 3167

;;				PWF0D = PWMSafeDuty;
CLINEA 0000H 0001H 0C60H 0005H 0018H
	st	er2,	0f962h
CBLOCKEND 244 6 3169

;;			}
CLINEA 0000H 0000H 0C61H 0004H 0004H
_$L628 :

;;			if(PWDD <= PWMSafeDuty){
CLINEA 0000H 0001H 0C62H 0004H 001BH
	l	er0,	0f922h
	cmp	er0,	er2
	bgt	_$L630
CBLOCK 244 7 3170

;;				PWDD = PWMSafeDuty;
CLINEA 0000H 0001H 0C63H 0005H 0017H
	st	er2,	0f922h
CBLOCKEND 244 7 3172

;;			}
CLINEA 0000H 0000H 0C64H 0004H 0004H
_$L630 :

;;			if(PWCD <= PWMSafeDuty){
CLINEA 0000H 0001H 0C65H 0004H 001BH
	l	er0,	0f912h
	cmp	er0,	er2
	bgt	_$L632
CBLOCK 244 8 3173

;;				PWCD = PWMSafeDuty;
CLINEA 0000H 0001H 0C66H 0005H 0017H
	st	er2,	0f912h
CBLOCKEND 244 8 3175

;;			}
CLINEA 0000H 0000H 0C67H 0004H 0004H
_$L632 :
CBLOCKEND 244 4 3177

;;		}while((PWED > PWMSafeDuty)||(PWF0D > PWMSafeDuty)||(PWDD > PWMSafeDuty)||(PWCD > PWMSafeDuty));
CLINEA 0000H 0000H 0C69H 0003H 0062H
	l	er0,	0f932h
	cmp	er0,	er2
	ble	_$M48
	b	_$L610
_$M48 :
	l	er0,	0f962h
	cmp	er0,	er2
	ble	_$M49
	b	_$L610
_$M49 :
	l	er0,	0f922h
	cmp	er0,	er2
	ble	_$M50
	b	_$L610
_$M50 :
	l	er0,	0f912h
	cmp	er0,	er2
	ble	_$M51
	b	_$L610
_$M51 :
_$L623 :
CBLOCKEND 244 3 3178

;;	Accel_PID_Motor1 = 16383;
CLINEA 0000H 0001H 0C6BH 0002H 001AH
	mov	r0,	#0ffh
	mov	r1,	#03fh
	st	er0,	NEAR _Accel_PID_Motor1

;;	Accel_PID_Motor2 = 16383;
CLINEA 0000H 0001H 0C6CH 0002H 001AH
	st	er0,	NEAR _Accel_PID_Motor2

;;	Accel_PID_Motor3 = 16383;
CLINEA 0000H 0001H 0C6DH 0002H 001AH
	st	er0,	NEAR _Accel_PID_Motor3

;;	Accel_PID_Motor4 = 16383;
CLINEA 0000H 0001H 0C6EH 0002H 001AH
	st	er0,	NEAR _Accel_PID_Motor4
CBLOCKEND 244 2 3184

;;}
CLINEA 0000H 0001H 0C70H 0001H 0001H
	pop	pc
CBLOCKEND 244 1 3184
CFUNCTIONEND 244


	rseg $$ESC1_PWM$main
CFUNCTION 215

_ESC1_PWM	:
CBLOCK 215 1 3188

;;void ESC1_PWM(void){
CLINEA 0000H 0001H 0C74H 0001H 0014H
CBLOCK 215 2 3188

;;      PC0DIR = 0;       // PortB Bit0 set to Output Mode...
CLINEA 0000H 0001H 0C83H 0007H 003BH
	rb	0f261h.0

;;      PC0C1  = 1;       // PortB Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0C86H 0007H 003BH
	sb	0f263h.0

;;      PC0C0  = 1;       
CLINEA 0000H 0001H 0C87H 0007H 0018H
	sb	0f262h.0

;;      PC0MD1  = 1;            // PortC Bit0 set to PWM Output (1,0)...
CLINEA 0000H 0001H 0C8AH 0007H 0046H
	sb	0f265h.0

;;      PC0MD0  = 0;      
CLINEA 0000H 0001H 0C8BH 0007H 0018H
	rb	0f264h.0

;;      PFCS1 = 0;        //00= LS; 01=HS; 10=PLL
CLINEA 0000H 0001H 0C8FH 0007H 002FH
	rb	0f972h.1

;;      PFCS0 = 1;
CLINEA 0000H 0001H 0C90H 0007H 0010H
	sb	0f972h.0

;;      PWFP = PWMPeriod;            // Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
CLINEA 0000H 0001H 0C93H 0007H 0092H
	l	er0,	NEAR _PWMPeriod
	st	er0,	0f960h

;;      PWF0D =    PWMSafeDuty;           //12    ~  0.25 % duty cycle @ 160Hz
CLINEA 0000H 0001H 0C9DH 0007H 004CH
	l	er0,	NEAR _PWMSafeDuty
	st	er0,	0f962h

;;      PFRUN = 0;        // OFF to start
CLINEA 0000H 0001H 0C9FH 0007H 0027H
	rb	0f973h.0
CBLOCKEND 215 2 3232

;;}
CLINEA 0000H 0001H 0CA0H 0001H 0001H
	rt
CBLOCKEND 215 1 3232
CFUNCTIONEND 215


	rseg $$ESC2_PWM$main
CFUNCTION 216

_ESC2_PWM	:
CBLOCK 216 1 3237

;;void ESC2_PWM(void){
CLINEA 0000H 0001H 0CA5H 0001H 0014H
CBLOCK 216 2 3237

;;      PB2DIR = 0;       // PortB Bit0 set to Output Mode...
CLINEA 0000H 0001H 0CB4H 0007H 003BH
	rb	0f259h.2

;;      PB2C1  = 1;       // PortB Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0CB7H 0007H 003BH
	sb	0f25bh.2

;;      PB2C0  = 1;       
CLINEA 0000H 0001H 0CB8H 0007H 0018H
	sb	0f25ah.2

;;      PB2MD1  = 0;            // PortB Bit0 set to PWM Output (0,1)...
CLINEA 0000H 0001H 0CBBH 0007H 0046H
	rb	0f25dh.2

;;      PB2MD0  = 1;      
CLINEA 0000H 0001H 0CBCH 0007H 0018H
	sb	0f25ch.2

;;      PECS1 = 0;        //00= LS; 01=HS; 10=PLL
CLINEA 0000H 0001H 0CC0H 0007H 002FH
	rb	0f936h.1

;;      PECS0 = 1;
CLINEA 0000H 0001H 0CC1H 0007H 0010H
	sb	0f936h.0

;;      PWEP = PWMPeriod;            // Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
CLINEA 0000H 0001H 0CC4H 0007H 0092H
	l	er0,	NEAR _PWMPeriod
	st	er0,	0f930h

;;      PWED =    PWMSafeDuty;           //12    ~  0.25 % duty cycle @ 160Hz
CLINEA 0000H 0001H 0CCEH 0007H 004BH
	l	er0,	NEAR _PWMSafeDuty
	st	er0,	0f932h

;;      PERUN = 0;        // OFF to start
CLINEA 0000H 0001H 0CD0H 0007H 0027H
	rb	0f937h.0
CBLOCKEND 216 2 3281

;;}
CLINEA 0000H 0001H 0CD1H 0001H 0001H
	rt
CBLOCKEND 216 1 3281
CFUNCTIONEND 216


	rseg $$ESC3_PWM$main
CFUNCTION 217

_ESC3_PWM	:
CBLOCK 217 1 3287

;;void ESC3_PWM(void){
CLINEA 0000H 0001H 0CD7H 0001H 0014H
CBLOCK 217 2 3287

;;      PA1DIR = 0;       // PortB Bit0 set to Output Mode...
CLINEA 0000H 0001H 0CE6H 0007H 003BH
	rb	0f251h.1

;;      PA1C1  = 1;       // PortB Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0CE9H 0007H 003BH
	sb	0f253h.1

;;      PA1C0  = 1;       
CLINEA 0000H 0001H 0CEAH 0007H 0018H
	sb	0f252h.1

;;      PA1MD1  = 0;            // PortB Bit0 set to PWM Output (0,1)...
CLINEA 0000H 0001H 0CEDH 0007H 0046H
	rb	0f255h.1

;;      PA1MD0  = 1;      
CLINEA 0000H 0001H 0CEEH 0007H 0018H
	sb	0f254h.1

;;      PDCS1 = 0;        //00= LS; 01=HS; 10=PLL
CLINEA 0000H 0001H 0CF2H 0007H 002FH
	rb	0f926h.1

;;      PDCS0 = 1;
CLINEA 0000H 0001H 0CF3H 0007H 0010H
	sb	0f926h.0

;;      PWDP = PWMPeriod;            // Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
CLINEA 0000H 0001H 0CF6H 0007H 0092H
	l	er0,	NEAR _PWMPeriod
	st	er0,	0f920h

;;      PWDD =    PWMSafeDuty;           //12    ~  0.25 % duty cycle @ 160Hz
CLINEA 0000H 0001H 0D00H 0007H 004BH
	l	er0,	NEAR _PWMSafeDuty
	st	er0,	0f922h

;;      PDRUN = 0;        // OFF to start
CLINEA 0000H 0001H 0D02H 0007H 0027H
	rb	0f927h.0
CBLOCKEND 217 2 3331

;;}
CLINEA 0000H 0001H 0D03H 0001H 0001H
	rt
CBLOCKEND 217 1 3331
CFUNCTIONEND 217


	rseg $$ESC4_PWM$main
CFUNCTION 218

_ESC4_PWM	:
CBLOCK 218 1 3338

;;void ESC4_PWM(void){
CLINEA 0000H 0001H 0D0AH 0001H 0014H
CBLOCK 218 2 3338

;;      PA0DIR = 0;       // PortB Bit0 set to Output Mode...
CLINEA 0000H 0001H 0D19H 0007H 003BH
	rb	0f251h.0

;;      PA0C1  = 1;       // PortB Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0D1CH 0007H 003BH
	sb	0f253h.0

;;      PA0C0  = 1;       
CLINEA 0000H 0001H 0D1DH 0007H 0018H
	sb	0f252h.0

;;      PA0MD1  = 0;            // PortB Bit0 set to PWM Output (0,1)...
CLINEA 0000H 0001H 0D20H 0007H 0046H
	rb	0f255h.0

;;      PA0MD0  = 1;      
CLINEA 0000H 0001H 0D21H 0007H 0018H
	sb	0f254h.0

;;      PCCS1 = 0;        //00= LS; 01=HS; 10=PLL
CLINEA 0000H 0001H 0D25H 0007H 002FH
	rb	0f916h.1

;;      PCCS0 = 1;
CLINEA 0000H 0001H 0D26H 0007H 0010H
	sb	0f916h.0

;;      PWCP = PWMPeriod;            // Init Period to (1=255kHz; 10=46kHz; 50=10kHz; 200=2.5kH; ; 3185 = 160Hz; 3400=150Hz; 4250=120Hz; 5000=102Hz)
CLINEA 0000H 0001H 0D29H 0007H 0092H
	l	er0,	NEAR _PWMPeriod
	st	er0,	0f910h

;;      PWCD =    PWMSafeDuty;           //12    ~  0.25 % duty cycle @ 160Hz
CLINEA 0000H 0001H 0D34H 0007H 004BH
	l	er0,	NEAR _PWMSafeDuty
	st	er0,	0f912h

;;      PCRUN = 0;        // OFF to start
CLINEA 0000H 0001H 0D38H 0007H 0027H
	rb	0f917h.0
CBLOCKEND 218 2 3385

;;}
CLINEA 0000H 0001H 0D39H 0001H 0001H
	rt
CBLOCKEND 218 1 3385
CFUNCTIONEND 218


	rseg $$TBC_ISR$main
CFUNCTION 256

_TBC_ISR	:
CBLOCK 256 1 3390

;;{
CLINEA 0000H 0001H 0D3EH 0001H 0001H
CBLOCK 256 2 3390

;;	E128H = 0;	//Turn OFF TBC Interrupt
CLINEA 0000H 0001H 0D3FH 0002H 0024H
	rb	0f016h.5

;;	E128H = 1;	//Turn ON TBC Interrupt
CLINEA 0000H 0001H 0D40H 0002H 0023H
	sb	0f016h.5
CBLOCKEND 256 2 3393

;;}
CLINEA 0000H 0001H 0D41H 0001H 0001H
	rt
CBLOCKEND 256 1 3393
CFUNCTIONEND 256


	rseg $$TMR89_ISR$main
CFUNCTION 257

_TMR89_ISR	:
CBLOCK 257 1 3398

;;{
CLINEA 0000H 0001H 0D46H 0001H 0001H
	push	lr
CBLOCK 257 2 3398
CRET 0000H

;;	LED_1 ^= 1;
CLINEA 0000H 0001H 0D47H 0002H 000CH
	tb	0f250h.2
	beq	_$M58
	rb	0f250h.2
	bal	_$M59
_$M58 :
	sb	0f250h.2
_$M59 :

;;	Accel_PID_XRollCounter_I++;
CLINEA 0000H 0000H 0D4EH 0002H 001CH
	l	er0,	NEAR _Accel_PID_XRollCounter_I
	add	er0,	#1 
	st	er0,	NEAR _Accel_PID_XRollCounter_I

;;	if(Accel_PID_XRollCounter_I >= 65535){
CLINEA 0000H 0001H 0D4FH 0002H 0027H
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	blts	_$L651
CBLOCK 257 3 3407

;;		Accel_PID_XRollCounter_I = 0;
CLINEA 0000H 0001H 0D50H 0003H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollCounter_I
CBLOCKEND 257 3 3409

;;	}
CLINEA 0000H 0000H 0D51H 0002H 0002H
_$L651 :

;;	Accel_PID_YPitchCounter_I++;
CLINEA 0000H 0000H 0D52H 0002H 001DH
	l	er0,	NEAR _Accel_PID_YPitchCounter_I
	add	er0,	#1 
	st	er0,	NEAR _Accel_PID_YPitchCounter_I

;;	if(Accel_PID_YPitchCounter_I >= 65535){
CLINEA 0000H 0001H 0D53H 0002H 0028H
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	blts	_$L653
CBLOCK 257 4 3411

;;		Accel_PID_YPitchCounter_I = 0;
CLINEA 0000H 0001H 0D54H 0003H 0020H
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchCounter_I
CBLOCKEND 257 4 3413

;;	}
CLINEA 0000H 0000H 0D55H 0002H 0002H
_$L653 :

;;	Accel_PID_XRollCounter_D++;
CLINEA 0000H 0000H 0D56H 0002H 001CH
	l	er0,	NEAR _Accel_PID_XRollCounter_D
	add	er0,	#1 
	st	er0,	NEAR _Accel_PID_XRollCounter_D

;;	if(Accel_PID_XRollCounter_D >= 65535){
CLINEA 0000H 0001H 0D57H 0002H 0027H
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	blts	_$L655
CBLOCK 257 5 3415

;;		Accel_PID_XRollCounter_D = 0;
CLINEA 0000H 0001H 0D58H 0003H 001FH
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_XRollCounter_D
CBLOCKEND 257 5 3417

;;	}
CLINEA 0000H 0000H 0D59H 0002H 0002H
_$L655 :

;;	Accel_PID_YPitchCounter_D++;
CLINEA 0000H 0000H 0D5AH 0002H 001DH
	l	er0,	NEAR _Accel_PID_YPitchCounter_D
	add	er0,	#1 
	st	er0,	NEAR _Accel_PID_YPitchCounter_D

;;	if(Accel_PID_YPitchCounter_D >= 65535){
CLINEA 0000H 0001H 0D5BH 0002H 0028H
	mov	er2,	#0 
	cmp	r0,	#0ffh
	cmpc	r1,	#0ffh
	cmpc	r2,	#00h
	cmpc	r3,	#00h
	blts	_$L657
CBLOCK 257 6 3419

;;		Accel_PID_YPitchCounter_D = 0;
CLINEA 0000H 0001H 0D5CH 0003H 0020H
	mov	er0,	#0 
	st	er0,	NEAR _Accel_PID_YPitchCounter_D
CBLOCKEND 257 6 3421

;;	}
CLINEA 0000H 0000H 0D5DH 0002H 0002H
_$L657 :

;;	CF_Gyro_Counter++;
CLINEA 0000H 0000H 0D64H 0002H 0013H
	l	er0,	NEAR _CF_Gyro_Counter
	l	er2,	NEAR _CF_Gyro_Counter+02h
	push	xr0
	mov	er0,	#0 
	mov	r2,	#080h
	mov	r3,	#03fh
	push	xr0
	bl	__faddu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	NEAR _CF_Gyro_Counter
	st	er2,	NEAR _CF_Gyro_Counter+02h

;;	if(CF_Gyro_Counter >= 65535){
CLINEA 0000H 0001H 0D65H 0002H 001EH
	push	xr0
	mov	r0,	#00h
	mov	r1,	#0ffh
	mov	r2,	#07fh
	mov	r3,	#047h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$L659
CBLOCK 257 7 3429

;;		CF_Gyro_Counter = 0;
CLINEA 0000H 0001H 0D66H 0003H 0016H
	mov	er0,	#0 
	st	er0,	NEAR _CF_Gyro_Counter
	st	er0,	NEAR _CF_Gyro_Counter+02h
CBLOCKEND 257 7 3431

;;	}
CLINEA 0000H 0000H 0D67H 0002H 0002H
_$L659 :
CBLOCKEND 257 2 3432

;;}
CLINEA 0000H 0001H 0D68H 0001H 0001H
	pop	pc
CBLOCKEND 257 1 3432
CFUNCTIONEND 257


	rseg $$AccelGyroDataReady_ISR$main
CFUNCTION 258

_AccelGyroDataReady_ISR	:
CBLOCK 258 1 3436

;;{
CLINEA 0000H 0001H 0D6CH 0001H 0001H
CBLOCK 258 2 3436

;;	AccGyro_ReadFlag = 1;
CLINEA 0000H 0001H 0D6DH 0002H 0016H
	mov	r0,	#01h
	st	r0,	NEAR _AccGyro_ReadFlag
CBLOCKEND 258 2 3438

;;}
CLINEA 0000H 0001H 0D6EH 0001H 0001H
	rt
CBLOCKEND 258 1 3438
CFUNCTIONEND 258


	rseg $$_funcUartFin$main
CFUNCTION 245

__funcUartFin	:
CBLOCK 245 1 3449

;;{
CLINEA 0000H 0001H 0D79H 0001H 0001H
	push	lr
CBLOCK 245 2 3449
CRET 0000H
CARGUMENT 46H 0002H 0000H "size" 02H 00H 01H
CARGUMENT 46H 0001H 0000H "errStat" 02H 00H 00H

;;	uart_continue();					// Function in UART.c: process to continue send and receive...
CLINEA 0000H 0001H 0D7AH 0002H 0054H
	bl	_uart_continue

;;	_flgUartFin = (unsigned char)FLG_SET;
CLINEA 0000H 0001H 0D7BH 0002H 0026H
	mov	r0,	#01h
	st	r0,	NEAR __flgUartFin
CBLOCKEND 245 2 3453

;;}
CLINEA 0000H 0001H 0D7DH 0001H 0001H
	pop	pc
CBLOCKEND 245 1 3453
CFUNCTIONEND 245


	rseg $$_funcI2CFin$main
CFUNCTION 246

__funcI2CFin	:
CBLOCK 246 1 3464

;;{
CLINEA 0000H 0001H 0D88H 0001H 0001H
	push	lr
CBLOCK 246 2 3464
CRET 0000H
CARGUMENT 46H 0002H 0000H "size" 02H 00H 01H
CARGUMENT 46H 0001H 0000H "errStat" 02H 00H 00H

;;	i2c_continue();					// Function in UART.c: process to continue send and receive...
CLINEA 0000H 0001H 0D89H 0002H 0053H
	bl	_i2c_continue

;;	_flgI2CFin = (unsigned char)FLG_SET;
CLINEA 0000H 0001H 0D8AH 0002H 0025H
	mov	r0,	#01h
	st	r0,	NEAR __flgI2CFin
CBLOCKEND 246 2 3468

;;}
CLINEA 0000H 0001H 0D8CH 0001H 0001H
	pop	pc
CBLOCKEND 246 1 3468
CFUNCTIONEND 246


	rseg $$_intI2c$main
CFUNCTION 250

__intI2c	:
CBLOCK 250 1 3478

;;{
CLINEA 0000H 0001H 0D96H 0001H 0001H
CBLOCK 250 2 3478

;;	i2c_continue();
CLINEA 0000H 0001H 0D97H 0002H 0010H
	b	_i2c_continue
CBLOCKEND 250 2 3481
CLINEA 0000H 0001H 0D99H 0001H 0001H
CBLOCKEND 250 1 3481
CFUNCTIONEND 250


	rseg $$checkI2C$main
CFUNCTION 247

_checkI2C	:
CBLOCK 247 1 3491

;;{
CLINEA 0000H 0001H 0DA3H 0001H 0001H
	push	lr
CBLOCK 247 2 3491
CRET 0000H
CLOCAL 47H 0002H 0024H 0002H "ret" 02H 00H 01H

;;	while (ret != 1) {
CLINEA 0000H 0000H 0DA8H 0002H 0013H
_$L668 :
CBLOCK 247 3 3496

;;		ret = i2c_continue();
CLINEA 0000H 0000H 0DA9H 0003H 0017H
	bl	_i2c_continue
CBLOCK 247 4 3498
CBLOCKEND 247 4 3500
CBLOCKEND 247 3 3501

;;	while (ret != 1) {
CLINEA 0000H 0000H 0DA8H 000EH 0013H
	cmp	r0,	#01h
	cmpc	r1,	#00h
	bne	_$L668
CBLOCKEND 247 2 3502

;;}
CLINEA 0000H 0001H 0DAEH 0001H 0001H
	pop	pc
CBLOCKEND 247 1 3502
CFUNCTIONEND 247


	rseg $$main_reqNotHalt$main
CFUNCTION 248

_main_reqNotHalt	:
CBLOCK 248 1 3512

;;{
CLINEA 0000H 0001H 0DB8H 0001H 0001H
CBLOCK 248 2 3512

;;	_reqNotHalt = (unsigned char)FLG_SET;
CLINEA 0000H 0001H 0DB9H 0002H 0026H
	mov	r0,	#01h
	st	r0,	NEAR __reqNotHalt
CBLOCKEND 248 2 3514

;;}
CLINEA 0000H 0001H 0DBAH 0001H 0001H
	rt
CBLOCKEND 248 1 3514
CFUNCTIONEND 248


	rseg $$_intUart$main
CFUNCTION 249

__intUart	:
CBLOCK 249 1 3524

;;{
CLINEA 0000H 0001H 0DC4H 0001H 0001H
CBLOCK 249 2 3524

;;		uart_continue(); //in UART.c: process to continue send and receive...
CLINEA 0000H 0001H 0DC5H 0003H 0047H
	b	_uart_continue
CBLOCKEND 249 2 3526
CLINEA 0000H 0001H 0DC6H 0001H 0001H
CBLOCKEND 249 1 3526
CFUNCTIONEND 249


	rseg $$SetOSC$main
CFUNCTION 208

_SetOSC	:
CBLOCK 208 1 3531

;;static void SetOSC(void){
CLINEA 0000H 0001H 0DCBH 0001H 0019H
CBLOCK 208 2 3531

;;	SYSC0 = 0;			// Used to select the frequency of the HSCLK => 00=8.192MHz.
CLINEA 0000H 0001H 0DCEH 0002H 004AH
	rb	0f002h.0

;;	SYSC1 = 0;
CLINEA 0000H 0001H 0DCFH 0002H 000BH
	rb	0f002h.1

;;	OSCM1 = 1;			// 10 => Built-in PLL oscillation mode
CLINEA 0000H 0001H 0DD1H 0002H 0034H
	sb	0f002h.3

;;	OSCM0 = 0;
CLINEA 0000H 0001H 0DD2H 0002H 000BH
	rb	0f002h.2

;;	ENOSC = 1;			//1=Enable High Speed Oscillator...
CLINEA 0000H 0001H 0DD4H 0002H 0031H
	sb	0f003h.1

;;	SYSCLK = 1;			//1=HSCLK; 0=LSCLK 
CLINEA 0000H 0001H 0DD5H 0002H 0022H
	sb	0f003h.0

;;	LPLL = 1;			//1=Enables the use of PLL oscillation - ADDED 4/30/2013
CLINEA 0000H 0001H 0DD7H 0002H 0045H
	sb	0f003h.7

;;	__EI();			//INT enable
CLINEA 0000H 0001H 0DD9H 0002H 0017H
	ei
CBLOCKEND 208 2 3546

;;}
CLINEA 0000H 0001H 0DDAH 0001H 0001H
	rt
CBLOCKEND 208 1 3546
CFUNCTIONEND 208


	rseg $$analog_comparator$main
CFUNCTION 209

_analog_comparator	:
CBLOCK 209 1 3553

;;void analog_comparator(void){
CLINEA 0000H 0001H 0DE1H 0001H 001DH
CBLOCK 209 2 3553

;;	CMP0EN  = 0x01; 	// Comparator ON...
CLINEA 0000H 0001H 0DF7H 0002H 0025H
	sb	0f950h.0

;;	CMP0E1  = 0x00; 	// No Interupt...
CLINEA 0000H 0001H 0DF8H 0002H 0023H
	rb	0f951h.1

;;	CMP0E0  = 0x00;
CLINEA 0000H 0001H 0DF9H 0002H 0010H
	rb	0f951h.0

;;	CMP0SM1 = 0x00; 	// Detect without Sampling... 
CLINEA 0000H 0001H 0DFAH 0002H 0030H
	rb	0f951h.3

;;	CMP0RFS = 0x01; 	// Differential Input on B5
CLINEA 0000H 0001H 0DFBH 0002H 002DH
	sb	0f951h.4

;;	CMP0EN  = 0x00;
CLINEA 0000H 0001H 0DFEH 0002H 0010H
	rb	0f950h.0
CBLOCKEND 209 2 3585

;;}
CLINEA 0000H 0001H 0E01H 0001H 0001H
	rt
CBLOCKEND 209 1 3585
CFUNCTIONEND 209


	rseg $$PortA_Low$main
CFUNCTION 210

_PortA_Low	:
CBLOCK 210 1 3593

;;void PortA_Low(void){
CLINEA 0000H 0001H 0E09H 0001H 0015H
CBLOCK 210 2 3593

;;	PA0DIR = 0;		// PortA Bit0 set to Output Mode...
CLINEA 0000H 0001H 0E13H 0002H 0031H
	rb	0f251h.0

;;	PA1DIR = 0;		// PortA Bit1 set to Output Mode...
CLINEA 0000H 0001H 0E14H 0002H 0031H
	rb	0f251h.1

;;	PA2DIR = 0;		// PortA Bit2 set to Output Mode...
CLINEA 0000H 0001H 0E15H 0002H 0031H
	rb	0f251h.2

;;	PA0C1  = 1;		// PortA Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0E18H 0002H 0031H
	sb	0f253h.0

;;	PA0C0  = 1;		
CLINEA 0000H 0001H 0E19H 0002H 000EH
	sb	0f252h.0

;;	PA1C1  = 1;		// PortA Bit1 set to CMOS Output...
CLINEA 0000H 0001H 0E1AH 0002H 0031H
	sb	0f253h.1

;;	PA1C0  = 1;	
CLINEA 0000H 0001H 0E1BH 0002H 000DH
	sb	0f252h.1

;;	PA2C1  = 1;		// PortA Bit2 set to CMOS Output...
CLINEA 0000H 0001H 0E1CH 0002H 0031H
	sb	0f253h.2

;;	PA2C0  = 1;	
CLINEA 0000H 0001H 0E1DH 0002H 000DH
	sb	0f252h.2

;;	PA0MD1  = 0;	// PortA Bit0 set to General Purpose Output...
CLINEA 0000H 0001H 0E20H 0002H 003CH
	rb	0f255h.0

;;	PA0MD0  = 0;	
CLINEA 0000H 0001H 0E21H 0002H 000EH
	rb	0f254h.0

;;	PA1MD1  = 0;	// PortA Bit1 set to General Purpose Output...
CLINEA 0000H 0001H 0E22H 0002H 003CH
	rb	0f255h.1

;;	PA1MD0  = 0;	
CLINEA 0000H 0001H 0E23H 0002H 000EH
	rb	0f254h.1

;;	PA2MD1  = 0;	// PortA Bit2 set to General Purpose Output...
CLINEA 0000H 0001H 0E24H 0002H 003CH
	rb	0f255h.2

;;	PA2MD0  = 0;	
CLINEA 0000H 0001H 0E25H 0002H 000EH
	rb	0f254h.2

;;	PA0D = 0;		// A.0 Output OFF....
CLINEA 0000H 0001H 0E28H 0002H 0021H
	rb	0f250h.0

;;	PA1D = 0;		// A.1 Output OFF....
CLINEA 0000H 0001H 0E29H 0002H 0021H
	rb	0f250h.1

;;	PA2D = 0;		// A.2 Output OFF....
CLINEA 0000H 0001H 0E2AH 0002H 0021H
	rb	0f250h.2

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 0E2CH 0002H 001DH
	b	_main_clrWDT
CBLOCKEND 210 2 3630
CLINEA 0000H 0001H 0E2EH 0001H 0001H
CBLOCKEND 210 1 3630
CFUNCTIONEND 210


	rseg $$PortB_Low$main
CFUNCTION 211

_PortB_Low	:
CBLOCK 211 1 3636

;;void PortB_Low(void){
CLINEA 0000H 0001H 0E34H 0001H 0015H
CBLOCK 211 2 3636

;;	PB0DIR = 0;		// PortB Bit0 set to Output Mode...
CLINEA 0000H 0001H 0E3EH 0002H 0031H
	rb	0f259h.0

;;	PB1DIR = 0;		// PortB Bit1 set to Output Mode...
CLINEA 0000H 0001H 0E3FH 0002H 0031H
	rb	0f259h.1

;;	PB2DIR = 0;		// PortB Bit2 set to Output Mode...
CLINEA 0000H 0001H 0E40H 0002H 0031H
	rb	0f259h.2

;;	PB3DIR = 0;		// PortB Bit3 set to Output Mode...
CLINEA 0000H 0001H 0E41H 0002H 0031H
	rb	0f259h.3

;;	PB4DIR = 0;		// PortB Bit4 set to Output Mode...
CLINEA 0000H 0001H 0E42H 0002H 0031H
	rb	0f259h.4

;;	PB5DIR = 0;		// PortB Bit5 set to Output Mode...
CLINEA 0000H 0001H 0E43H 0002H 0031H
	rb	0f259h.5

;;	PB6DIR = 0;		// PortB Bit6 set to Output Mode...
CLINEA 0000H 0001H 0E44H 0002H 0031H
	rb	0f259h.6

;;	PB7DIR = 0;		// PortB Bit7 set to Output Mode...
CLINEA 0000H 0001H 0E45H 0002H 0031H
	rb	0f259h.7

;;	PB0C1  = 1;		// PortB Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0E48H 0002H 0031H
	sb	0f25bh.0

;;	PB0C0  = 1;		
CLINEA 0000H 0001H 0E49H 0002H 000EH
	sb	0f25ah.0

;;	PB1C1  = 1;		// PortB Bit1 set to CMOS Output...
CLINEA 0000H 0001H 0E4AH 0002H 0031H
	sb	0f25bh.1

;;	PB1C0  = 1;	
CLINEA 0000H 0001H 0E4BH 0002H 000DH
	sb	0f25ah.1

;;	PB2C1  = 1;		// PortB Bit2 set to CMOS Output...
CLINEA 0000H 0001H 0E4CH 0002H 0031H
	sb	0f25bh.2

;;	PB2C0  = 1;	
CLINEA 0000H 0001H 0E4DH 0002H 000DH
	sb	0f25ah.2

;;	PB3C1  = 1;		// PortB Bit3 set to CMOS Output...
CLINEA 0000H 0001H 0E4EH 0002H 0031H
	sb	0f25bh.3

;;	PB3C0  = 1;		
CLINEA 0000H 0001H 0E4FH 0002H 000EH
	sb	0f25ah.3

;;	PB4C1  = 1;		// PortB Bit4 set to CMOS Output...
CLINEA 0000H 0001H 0E50H 0002H 0031H
	sb	0f25bh.4

;;	PB4C0  = 1;	
CLINEA 0000H 0001H 0E51H 0002H 000DH
	sb	0f25ah.4

;;	PB5C1  = 1;		// PortB Bit5 set to CMOS Output...
CLINEA 0000H 0001H 0E52H 0002H 0031H
	sb	0f25bh.5

;;	PB5C0  = 1;	
CLINEA 0000H 0001H 0E53H 0002H 000DH
	sb	0f25ah.5

;;	PB6C1  = 1;		// PortB Bit6 set to CMOS Output...
CLINEA 0000H 0001H 0E54H 0002H 0031H
	sb	0f25bh.6

;;	PB6C0  = 1;	
CLINEA 0000H 0001H 0E55H 0002H 000DH
	sb	0f25ah.6

;;	PB7C1  = 1;		// PortB Bit7 set to CMOS Output...
CLINEA 0000H 0001H 0E56H 0002H 0031H
	sb	0f25bh.7

;;	PB7C0  = 1;	
CLINEA 0000H 0001H 0E57H 0002H 000DH
	sb	0f25ah.7

;;	PB0MD1  = 0;	// PortB Bit0 set to General Purpose Output...
CLINEA 0000H 0001H 0E5AH 0002H 003CH
	rb	0f25dh.0

;;	PB0MD0  = 0;	
CLINEA 0000H 0001H 0E5BH 0002H 000EH
	rb	0f25ch.0

;;	PB1MD1  = 0;	// PortB Bit1 set to General Purpose Output...
CLINEA 0000H 0001H 0E5CH 0002H 003CH
	rb	0f25dh.1

;;	PB1MD0  = 0;	
CLINEA 0000H 0001H 0E5DH 0002H 000EH
	rb	0f25ch.1

;;	PB2MD1  = 0;	// PortB Bit2 set to General Purpose Output...
CLINEA 0000H 0001H 0E5EH 0002H 003CH
	rb	0f25dh.2

;;	PB2MD0  = 0;	
CLINEA 0000H 0001H 0E5FH 0002H 000EH
	rb	0f25ch.2

;;	PB3MD1  = 0;	// PortB Bit3 set to General Purpose Output...
CLINEA 0000H 0001H 0E60H 0002H 003CH
	rb	0f25dh.3

;;	PB3MD0  = 0;	
CLINEA 0000H 0001H 0E61H 0002H 000EH
	rb	0f25ch.3

;;	PB4MD1  = 0;	// PortB Bit4 set to General Purpose Output...
CLINEA 0000H 0001H 0E62H 0002H 003CH
	rb	0f25dh.4

;;	PB4MD0  = 0;	
CLINEA 0000H 0001H 0E63H 0002H 000EH
	rb	0f25ch.4

;;	PB5MD1  = 0;	// PortB Bit5 set to General Purpose Output...
CLINEA 0000H 0001H 0E64H 0002H 003CH
	rb	0f25dh.5

;;	PB5MD0  = 0;
CLINEA 0000H 0001H 0E65H 0002H 000DH
	rb	0f25ch.5

;;	PB6MD1  = 0;	// PortB Bit6 set to General Purpose Output...
CLINEA 0000H 0001H 0E66H 0002H 003CH
	rb	0f25dh.6

;;	PB6MD0  = 0;	
CLINEA 0000H 0001H 0E67H 0002H 000EH
	rb	0f25ch.6

;;	PB7MD1  = 0;	// PortB Bit7 set to General Purpose Output...
CLINEA 0000H 0001H 0E68H 0002H 003CH
	rb	0f25dh.7

;;	PB7MD0  = 0;
CLINEA 0000H 0001H 0E69H 0002H 000DH
	rb	0f25ch.7

;;	PB0D = 0;		// B.0 Output OFF....
CLINEA 0000H 0001H 0E6CH 0002H 0021H
	rb	0f258h.0

;;	PB1D = 0;		// B.1 Output OFF....
CLINEA 0000H 0001H 0E6DH 0002H 0021H
	rb	0f258h.1

;;	PB2D = 0;		// B.2 Output OFF....
CLINEA 0000H 0001H 0E6EH 0002H 0021H
	rb	0f258h.2

;;	PB3D = 0;		// B.3 Output OFF....
CLINEA 0000H 0001H 0E6FH 0002H 0021H
	rb	0f258h.3

;;	PB4D = 0;		// B.4 Output OFF....
CLINEA 0000H 0001H 0E70H 0002H 0021H
	rb	0f258h.4

;;	PB5D = 0;		// B.5 Output OFF....
CLINEA 0000H 0001H 0E71H 0002H 0021H
	rb	0f258h.5

;;	PB6D = 0;		// B.6 Output OFF....
CLINEA 0000H 0001H 0E72H 0002H 0021H
	rb	0f258h.6

;;	PB7D = 0;		// B.7 Output OFF....
CLINEA 0000H 0001H 0E73H 0002H 0021H
	rb	0f258h.7

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 0E75H 0002H 001DH
	b	_main_clrWDT
CBLOCKEND 211 2 3703
CLINEA 0000H 0001H 0E77H 0001H 0001H
CBLOCKEND 211 1 3703
CFUNCTIONEND 211


	rseg $$PortC_Low$main
CFUNCTION 212

_PortC_Low	:
CBLOCK 212 1 3709

;;void PortC_Low(void){
CLINEA 0000H 0001H 0E7DH 0001H 0015H
CBLOCK 212 2 3709

;;	PC0DIR = 0;		// PortC Bit0 set to Output Mode...
CLINEA 0000H 0001H 0E87H 0002H 0031H
	rb	0f261h.0

;;	PC1DIR = 0;		// PortC Bit1 set to Output Mode...
CLINEA 0000H 0001H 0E88H 0002H 0031H
	rb	0f261h.1

;;	PC2DIR = 0;		// PortC Bit2 set to Output Mode...
CLINEA 0000H 0001H 0E89H 0002H 0031H
	rb	0f261h.2

;;	PC3DIR = 1;		// PortC Bit3 set to Output Mode...
CLINEA 0000H 0001H 0E8AH 0002H 0031H
	sb	0f261h.3

;;	PC4DIR = 0;		// PortC Bit4 set to Output Mode...
CLINEA 0000H 0001H 0E8BH 0002H 0031H
	rb	0f261h.4

;;	PC5DIR = 1;		// PortC Bit5 set to Output Mode...
CLINEA 0000H 0001H 0E8CH 0002H 0031H
	sb	0f261h.5

;;	PC6DIR = 0;		// PortC Bit6 set to Output Mode...
CLINEA 0000H 0001H 0E8DH 0002H 0031H
	rb	0f261h.6

;;	PC7DIR = 0;		// PortC Bit7 set to Output Mode...
CLINEA 0000H 0001H 0E8EH 0002H 0031H
	rb	0f261h.7

;;	PC0C1  = 1;		// PortC Bit0 set to High-Impedance Output...
CLINEA 0000H 0001H 0E91H 0002H 003BH
	sb	0f263h.0

;;	PC0C0  = 1;		
CLINEA 0000H 0001H 0E92H 0002H 000EH
	sb	0f262h.0

;;	PC1C1  = 1;		// PortC Bit1 set to High-Impedance Output...
CLINEA 0000H 0001H 0E93H 0002H 003BH
	sb	0f263h.1

;;	PC1C0  = 1;	
CLINEA 0000H 0001H 0E94H 0002H 000DH
	sb	0f262h.1

;;	PC2C1  = 1;		// PortC Bit2 set to High-Impedance Output...
CLINEA 0000H 0001H 0E95H 0002H 003BH
	sb	0f263h.2

;;	PC2C0  = 1;	
CLINEA 0000H 0001H 0E96H 0002H 000DH
	sb	0f262h.2

;;	PC3C1  = 1;		// PortC Bit3 set to High-Impedance Output...
CLINEA 0000H 0001H 0E97H 0002H 003BH
	sb	0f263h.3

;;	PC3C0  = 1;		
CLINEA 0000H 0001H 0E98H 0002H 000EH
	sb	0f262h.3

;;	PC4C1  = 1;		// PortC Bit4 set to High-Impedance Output...
CLINEA 0000H 0001H 0E99H 0002H 003BH
	sb	0f263h.4

;;	PC4C0  = 1;	
CLINEA 0000H 0001H 0E9AH 0002H 000DH
	sb	0f262h.4

;;	PC5C1  = 1;		// PortC Bit5 set to High-Impedance Output...
CLINEA 0000H 0001H 0E9BH 0002H 003BH
	sb	0f263h.5

;;	PC5C0  = 1;	
CLINEA 0000H 0001H 0E9CH 0002H 000DH
	sb	0f262h.5

;;	PC6C1  = 1;		// PortC Bit6 set to High-Impedance Output...
CLINEA 0000H 0001H 0E9DH 0002H 003BH
	sb	0f263h.6

;;	PC6C0  = 1;	
CLINEA 0000H 0001H 0E9EH 0002H 000DH
	sb	0f262h.6

;;	PC7C1  = 1;		// PortC Bit7 set to High-Impedance Output...
CLINEA 0000H 0001H 0E9FH 0002H 003BH
	sb	0f263h.7

;;	PC7C0  = 1;	
CLINEA 0000H 0001H 0EA0H 0002H 000DH
	sb	0f262h.7

;;	PC0MD1  = 0;	// PortC Bit0 set to General Purpose Output...
CLINEA 0000H 0001H 0EA3H 0002H 003CH
	rb	0f265h.0

;;	PC0MD0  = 0;	
CLINEA 0000H 0001H 0EA4H 0002H 000EH
	rb	0f264h.0

;;	PC1MD1  = 0;	// PortC Bit1 set to General Purpose Output...
CLINEA 0000H 0001H 0EA5H 0002H 003CH
	rb	0f265h.1

;;	PC1MD0  = 0;	
CLINEA 0000H 0001H 0EA6H 0002H 000EH
	rb	0f264h.1

;;	PC2MD1  = 0;	// PortC Bit2 set to General Purpose Output...
CLINEA 0000H 0001H 0EA7H 0002H 003CH
	rb	0f265h.2

;;	PC2MD0  = 0;	
CLINEA 0000H 0001H 0EA8H 0002H 000EH
	rb	0f264h.2

;;	PC3MD1  = 0;	// PortC Bit3 set to General Purpose Output...
CLINEA 0000H 0001H 0EA9H 0002H 003CH
	rb	0f265h.3

;;	PC3MD0  = 0;	
CLINEA 0000H 0001H 0EAAH 0002H 000EH
	rb	0f264h.3

;;	PC4MD1  = 0;	// PortC Bit4 set to General Purpose Output...
CLINEA 0000H 0001H 0EABH 0002H 003CH
	rb	0f265h.4

;;	PC4MD0  = 0;	
CLINEA 0000H 0001H 0EACH 0002H 000EH
	rb	0f264h.4

;;	PC5MD1  = 0;	// PortC Bit5 set to General Purpose Output...
CLINEA 0000H 0001H 0EADH 0002H 003CH
	rb	0f265h.5

;;	PC5MD0  = 0;
CLINEA 0000H 0001H 0EAEH 0002H 000DH
	rb	0f264h.5

;;	PC6MD1  = 0;	// PortC Bit6 set to General Purpose Output...
CLINEA 0000H 0001H 0EAFH 0002H 003CH
	rb	0f265h.6

;;	PC6MD0  = 0;	
CLINEA 0000H 0001H 0EB0H 0002H 000EH
	rb	0f264h.6

;;	PC7MD1  = 0;	// PortC Bit7 set to General Purpose Output...
CLINEA 0000H 0001H 0EB1H 0002H 003CH
	rb	0f265h.7

;;	PC7MD0  = 0;
CLINEA 0000H 0001H 0EB2H 0002H 000DH
	rb	0f264h.7

;;	PC0D = 0;		// C.0 Output OFF....
CLINEA 0000H 0001H 0EB5H 0002H 0021H
	rb	0f260h.0

;;	PC1D = 0;		// C.1 Output OFF....
CLINEA 0000H 0001H 0EB6H 0002H 0021H
	rb	0f260h.1

;;	PC2D = 0;		// C.2 Output OFF....
CLINEA 0000H 0001H 0EB7H 0002H 0021H
	rb	0f260h.2

;;	PC4D = 0;		// C.4 Output OFF....
CLINEA 0000H 0001H 0EB9H 0002H 0021H
	rb	0f260h.4

;;	PC5D = 0;		// C.5 Output OFF....
CLINEA 0000H 0001H 0EBAH 0002H 0021H
	rb	0f260h.5

;;	PC6D = 0;		// C.6 Output OFF....
CLINEA 0000H 0001H 0EBBH 0002H 0021H
	rb	0f260h.6

;;	PC7D = 0;		// C.7 Output OFF....
CLINEA 0000H 0001H 0EBCH 0002H 0021H
	rb	0f260h.7

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 0EBEH 0002H 001DH
	b	_main_clrWDT
CBLOCKEND 212 2 3776
CLINEA 0000H 0001H 0EC0H 0001H 0001H
CBLOCKEND 212 1 3776
CFUNCTIONEND 212


	rseg $$PortD_Low$main
CFUNCTION 213

_PortD_Low	:
CBLOCK 213 1 3782

;;void PortD_Low(void){
CLINEA 0000H 0001H 0EC6H 0001H 0015H
CBLOCK 213 2 3782

;;	PD0DIR = 0;		// PortD Bit0 set to Output Mode...
CLINEA 0000H 0001H 0ECFH 0002H 0031H
	rb	0f269h.0

;;	PD1DIR = 0;		// PortD Bit1 set to Output Mode...
CLINEA 0000H 0001H 0ED0H 0002H 0031H
	rb	0f269h.1

;;	PD2DIR = 0;		// PortD Bit2 set to Output Mode...
CLINEA 0000H 0001H 0ED1H 0002H 0031H
	rb	0f269h.2

;;	PD3DIR = 0;		// PortD Bit3 set to Output Mode...
CLINEA 0000H 0001H 0ED2H 0002H 0031H
	rb	0f269h.3

;;	PD4DIR = 0;		// PortD Bit4 set to Output Mode...
CLINEA 0000H 0001H 0ED3H 0002H 0031H
	rb	0f269h.4

;;	PD5DIR = 0;		// PortD Bit5 set to Output Mode...
CLINEA 0000H 0001H 0ED4H 0002H 0031H
	rb	0f269h.5

;;	PD0C1= 1;		// PortD Bit0 set to CMOS Output...
CLINEA 0000H 0001H 0ED7H 0002H 002FH
	sb	0f26bh.0

;;	PD0C0= 1;		
CLINEA 0000H 0001H 0ED8H 0002H 000CH
	sb	0f26ah.0

;;	PD1C1= 1;		// PortD Bit1 set to CMOS Output...
CLINEA 0000H 0001H 0ED9H 0002H 002FH
	sb	0f26bh.1

;;	PD1C0= 1;	
CLINEA 0000H 0001H 0EDAH 0002H 000BH
	sb	0f26ah.1

;;	PD2C1= 1;		// PortD Bit2 set to CMOS Output...
CLINEA 0000H 0001H 0EDBH 0002H 002FH
	sb	0f26bh.2

;;	PD2C0= 1;	
CLINEA 0000H 0001H 0EDCH 0002H 000BH
	sb	0f26ah.2

;;	PD3C1= 1;		// PortD Bit3 set to CMOS Output...
CLINEA 0000H 0001H 0EDDH 0002H 002FH
	sb	0f26bh.3

;;	PD3C0= 1;		
CLINEA 0000H 0001H 0EDEH 0002H 000CH
	sb	0f26ah.3

;;	PD4C1= 1;		// PortD Bit4 set to CMOS Output...
CLINEA 0000H 0001H 0EDFH 0002H 002FH
	sb	0f26bh.4

;;	PD4C0= 1;	
CLINEA 0000H 0001H 0EE0H 0002H 000BH
	sb	0f26ah.4

;;	PD5C1= 1;		// PortD Bit5 set to CMOS Output...
CLINEA 0000H 0001H 0EE1H 0002H 002FH
	sb	0f26bh.5

;;	PD5C0= 1;	
CLINEA 0000H 0001H 0EE2H 0002H 000BH
	sb	0f26ah.5

;;	PD0D = 0;		// D.0 Output OFF....
CLINEA 0000H 0001H 0EE5H 0002H 0021H
	rb	0f268h.0

;;	PD1D = 0;		// D.1 Output OFF....
CLINEA 0000H 0001H 0EE6H 0002H 0021H
	rb	0f268h.1

;;	PD2D = 0;		// D.2 Output OFF....
CLINEA 0000H 0001H 0EE7H 0002H 0021H
	rb	0f268h.2

;;	PD3D = 0;		// D.3 Output OFF....
CLINEA 0000H 0001H 0EE8H 0002H 0021H
	rb	0f268h.3

;;	PD4D = 0;		// D.4 Output OFF....
CLINEA 0000H 0001H 0EE9H 0002H 0021H
	rb	0f268h.4

;;	PD5D = 0;		// D.5 Output OFF....
CLINEA 0000H 0001H 0EEAH 0002H 0021H
	rb	0f268h.5

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 0EEDH 0002H 001DH
	b	_main_clrWDT
CBLOCKEND 213 2 3823
CLINEA 0000H 0001H 0EEFH 0001H 0001H
CBLOCKEND 213 1 3823
CFUNCTIONEND 213


	rseg $$PortA_Digital_Inputs$main
CFUNCTION 214

_PortA_Digital_Inputs	:
CBLOCK 214 1 3829

;;void PortA_Digital_Inputs(void){
CLINEA 0000H 0001H 0EF5H 0001H 0020H
CBLOCK 214 2 3829

;;	PA0DIR = 1;		// PortA Bit0 set to Input Mode...
CLINEA 0000H 0001H 0EFFH 0002H 0030H
	sb	0f251h.0

;;	PA1DIR = 1;		// PortA Bit1 set to Input Mode...
CLINEA 0000H 0001H 0F00H 0002H 0030H
	sb	0f251h.1

;;	PA2DIR = 1;		// PortA Bit2 set to Input Mode...
CLINEA 0000H 0001H 0F01H 0002H 0030H
	sb	0f251h.2

;;	PA0C1  = 1;		// PortA Bit0 set to Input with Pull-Up Resistor...
CLINEA 0000H 0001H 0F05H 0002H 0041H
	sb	0f253h.0

;;	PA0C0  = 0;		
CLINEA 0000H 0001H 0F06H 0002H 000EH
	rb	0f252h.0

;;	PA1C1  = 1;		// PortA Bit1 set to Input with Pull-Up Resistor...
CLINEA 0000H 0001H 0F07H 0002H 0041H
	sb	0f253h.1

;;	PA1C0  = 0;	
CLINEA 0000H 0001H 0F08H 0002H 000DH
	rb	0f252h.1

;;	PA2C1  = 1;		// PortA Bit2 set to Input with Pull-Up Resistor...
CLINEA 0000H 0001H 0F09H 0002H 0041H
	sb	0f253h.2

;;	PA2C0  = 0;	
CLINEA 0000H 0001H 0F0AH 0002H 000DH
	rb	0f252h.2

;;	PA0MD1  = 0;	// PortA Bit0 set to General Purpose I/O...
CLINEA 0000H 0001H 0F0DH 0002H 0039H
	rb	0f255h.0

;;	PA0MD0  = 0;	
CLINEA 0000H 0001H 0F0EH 0002H 000EH
	rb	0f254h.0

;;	PA1MD1  = 0;	// PortA Bit1 set to General Purpose I/O...
CLINEA 0000H 0001H 0F0FH 0002H 0039H
	rb	0f255h.1

;;	PA1MD0  = 0;	
CLINEA 0000H 0001H 0F10H 0002H 000EH
	rb	0f254h.1

;;	PA2MD1  = 0;	// PortA Bit2 set to General Purpose I/O...
CLINEA 0000H 0001H 0F11H 0002H 0039H
	rb	0f255h.2

;;	PA2MD0  = 0;	
CLINEA 0000H 0001H 0F12H 0002H 000EH
	rb	0f254h.2

;;	main_clrWDT(); 	// Clear WDT
CLINEA 0000H 0001H 0F14H 0002H 001DH
	b	_main_clrWDT
CBLOCKEND 214 2 3862
CLINEA 0000H 0001H 0F16H 0001H 0001H
CBLOCKEND 214 1 3862
CFUNCTIONEND 214


	rseg $$NOP$main
CFUNCTION 251

_NOP	:
CBLOCK 251 1 3925

;;{
CLINEA 0000H 0001H 0F55H 0001H 0001H
	push	lr
	push	xr4
	push	er8
	mov	r8,	r0
CBLOCK 251 2 3925
CRET 0006H
CARGUMENT 46H 0001H 001CH "sec" 02H 00H 00H
CLOCAL 46H 0002H 0027H 0002H "timerThres" 02H 00H 01H
CLOCAL 46H 0001H 0018H 0002H "TimeFlag" 02H 00H 00H
CLOCAL 46H 0001H 0016H 0002H "TempSec" 02H 00H 00H
CLOCAL 46H 0002H 0024H 0002H "timer" 02H 00H 01H
CLOCAL 4AH 0002H 0000H 0002H "timertest" 02H 00H 01H

;;	tm_init(TM_CH_NO_AB);
CLINEA 0000H 0001H 0F5CH 0002H 0016H
	mov	r0,	#01h
	bl	_tm_init

;;	TempSec = sec;
CLINEA 0000H 0001H 0F5DH 0002H 000FH
	mov	r2,	r8

;;	TimeFlag = 0;
CLINEA 0000H 0001H 0F5EH 0002H 000EH
	mov	r4,	#00h

;;	tm_setABSource(TM_CS_LSCLK);
CLINEA 0000H 0000H 018DH 0002H 0015H
	rb	0f8eah.0

;;	tm_setABSource(TM_CS_LSCLK);
CLINEA 0000H 0000H 018EH 0002H 001AH
	rb	0f8eah.1

;;	tm_setABData(0xffff);
CLINEA 0000H 0000H 0157H 0002H 0025H
	mov	r0,	#0ffh
	st	r0,	0f8e8h

;;	tm_setABData(0xffff);
CLINEA 0000H 0000H 0158H 0002H 0023H
	st	r0,	0f8ech

;;	if(sec == 1){
CLINEA 0000H 0001H 0F63H 0002H 000EH
	cmp	r8,	#01h
	bne	_$L682
CBLOCK 251 3 3939

;;		timerThres = 0x7FFF;
CLINEA 0000H 0001H 0F64H 0003H 0016H
	mov	r6,	#0ffh
	mov	r7,	#07fh

;;		TimeFlag = 0;
CLINEA 0000H 0001H 0F65H 0003H 000FH
CBLOCKEND 251 3 3942

;;	}
CLINEA 0000H 0000H 0F66H 0002H 0002H
_$L682 :

;;	if(sec == 2){
CLINEA 0000H 0001H 0F67H 0002H 000EH
	cmp	r8,	#02h
	bne	_$L684
CBLOCK 251 4 3943

;;		timerThres = 0xFFFF;
CLINEA 0000H 0001H 0F68H 0003H 0016H
	mov	er6,	#-1

;;		TimeFlag = 0;
CLINEA 0000H 0001H 0F69H 0003H 000FH
	mov	r4,	#00h
CBLOCKEND 251 4 3946

;;	}
CLINEA 0000H 0000H 0F6AH 0002H 0002H
_$L684 :

;;	if(sec > 2){
CLINEA 0000H 0001H 0F6BH 0002H 000DH
	cmp	r8,	#02h
	ble	_$L694
CBLOCK 251 5 3947

;;	while(TempSec > 1){
CLINEA 0000H 0000H 0F6CH 0001H 0001H
	bal	_$L704

;;	while(TempSec > 1){
CLINEA 0000H 0000H 0F6CH 0002H 0014H
_$L690 :
CBLOCK 251 6 3948

;;		TempSec -= 2;
CLINEA 0000H 0001H 0F6DH 0003H 000FH
	add	r2,	#0feh

;;		TimeFlag++;
CLINEA 0000H 0000H 0F6EH 0003H 000DH
	add	r4,	#01h
CBLOCKEND 251 6 3951

;;	while(TempSec > 1){
CLINEA 0000H 0000H 0F6CH 0001H 0001H
_$L704 :

;;	while(TempSec > 1){
CLINEA 0000H 0000H 0F6CH 000EH 0013H
	cmp	r2,	#01h
	bgt	_$L690

;;	if(TempSec == 1){
CLINEA 0000H 0001H 0F70H 0002H 0012H
	cmp	r2,	#01h
	bne	_$L692
CBLOCK 251 7 3952

;;		timerThres = 0x7FFF;
CLINEA 0000H 0001H 0F71H 0003H 0016H
	mov	r6,	#0ffh
	mov	r7,	#07fh
CBLOCKEND 251 7 3954

;;	else{
CLINEA 0000H 0001H 0F73H 0002H 0006H
	bal	_$L694
_$L692 :
CBLOCK 251 8 3955

;;		timerThres = 0xFFFF;
CLINEA 0000H 0001H 0F74H 0003H 0016H
	mov	er6,	#-1

;;		TimeFlag--;
CLINEA 0000H 0000H 0F75H 0003H 000DH
	add	r4,	#0ffh
CBLOCKEND 251 8 3958

;;	}
CLINEA 0000H 0000H 0F76H 0002H 0002H
_$L694 :
CBLOCKEND 251 5 3959

;;	main_clrWDT();	
CLINEA 0000H 0001H 0F7AH 0002H 0010H
	bl	_main_clrWDT

;;	tm_startAB();
CLINEA 0000H 0001H 00D1H 0002H 000AH
	mov	r0,	#00h
	st	r0,	0f8e9h

;;	tm_startAB();
CLINEA 0000H 0000H 00D2H 0002H 000BH
	sb	0f8ebh.0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0120H 0002H 001BH
	l	r0,	0f8e9h
	mov	r1,	#00h
	mov	er2,	er0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0121H 0002H 0014H
	l	r0,	0f8edh
	or	r3,	r0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0122H 0002H 000CH
	mov	er0,	er2

;;	while(timer < timerThres){
CLINEA 0000H 0001H 0F7EH 0002H 001BH
	bal	_$L697
_$L699 :
CBLOCK 251 9 3966

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0120H 0002H 001BH
	l	r0,	0f8e9h
	mov	r1,	#00h
	mov	er2,	er0

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0121H 0002H 0014H
	l	r0,	0f8edh
	or	r3,	r0

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0122H 0002H 000CH
	mov	er0,	er2

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0F7FH 0003H 001CH
CBLOCKEND 251 9 3969

;;	}
CLINEA 0000H 0000H 0F81H 0002H 0002H
_$L697 :

;;	while(timer < timerThres){
CLINEA 0000H 0000H 0F7EH 000EH 0013H
	cmp	er0,	er6
	blt	_$L699

;;	if(TimeFlag !=0){
CLINEA 0000H 0001H 0F82H 0002H 0012H
	cmp	r4,	#00h
	beq	_$L702

;;		tm_stopAB();
CLINEA 0000H 0001H 0105H 0002H 000BH
	rb	0f8ebh.0

;;		TimeFlag--;
CLINEA 0000H 0000H 0F84H 0003H 000DH
	add	r4,	#0ffh

;;		timerThres = 0xFFFF;
CLINEA 0000H 0001H 0F85H 0003H 0016H
	mov	er6,	#-1

;;		goto TimerRestart;
CLINEA 0000H 0001H 0F86H 0003H 0014H
	bal	_$L694

;;	}
CLINEA 0000H 0000H 0F87H 0002H 0002H
_$L702 :
CBLOCKEND 251 2 3976

;;}
CLINEA 0000H 0001H 0F88H 0001H 0001H
	pop	er8
	pop	xr4
	pop	pc
CBLOCKEND 251 1 3976
CFUNCTIONEND 251


	rseg $$NOPms$main
CFUNCTION 252

_NOPms	:
CBLOCK 252 1 3989

;;{
CLINEA 0000H 0001H 0F95H 0001H 0001H
	push	lr
	push	xr4
	push	bp
	push	er8
	mov	er8,	er0
CBLOCK 252 2 3989
CRET 0008H
CARGUMENT 46H 0002H 0028H "ms" 02H 00H 01H
CLOCAL 46H 0002H 002AH 0002H "timerThres" 02H 00H 01H
CLOCAL 46H 0001H 001AH 0002H "TimeFlag" 02H 00H 00H
CLOCAL 46H 0002H 0026H 0002H "TempSec" 02H 00H 01H
CLOCAL 46H 0002H 0024H 0002H "timer" 02H 00H 01H
CLOCAL 4AH 0002H 0000H 0002H "timertest" 02H 00H 01H

;;TempSec = ms;
CLINEA 0000H 0001H 0F9CH 0001H 000DH
	mov	er4,	er0

;;TimeFlag = 0;
CLINEA 0000H 0001H 0F9DH 0001H 000DH
	mov	r6,	#00h

;;tm_init(TM_CH_NO_AB);
CLINEA 0000H 0001H 0F9FH 0001H 0015H
	mov	r0,	#01h
	bl	_tm_init

;;tm_setABSource(TM_CS_HTBCLK);
CLINEA 0000H 0000H 018DH 0002H 0015H
	sb	0f8eah.0

;;tm_setABSource(TM_CS_HTBCLK);
CLINEA 0000H 0000H 018EH 0002H 001AH
	rb	0f8eah.1

;;tm_setABData(0xffff);
CLINEA 0000H 0000H 0157H 0002H 0025H
	mov	r0,	#0ffh
	st	r0,	0f8e8h

;;tm_setABData(0xffff);
CLINEA 0000H 0000H 0158H 0002H 0023H
	st	r0,	0f8ech

;;if(ms < 128){
CLINEA 0000H 0001H 0FA3H 0001H 000DH
	mov	er0,	er8
	cmp	r8,	#080h
	cmpc	r9,	#00h
	bge	_$L706
CBLOCK 252 3 4003

;;	timerThres = 0x1FF * ms;
CLINEA 0000H 0001H 0FA4H 0002H 0019H
	sllc	r1,	#07h
	sll	r0,	#07h
	sllc	r1,	#02h
	sll	r0,	#02h
	sub	r0,	r8
	subc	r1,	r9
	mov	bp,	er0

;;	TimeFlag = 0;
CLINEA 0000H 0001H 0FA5H 0002H 000EH
CBLOCKEND 252 3 4006

;;}
CLINEA 0000H 0000H 0FA6H 0001H 0001H
_$L706 :

;;if(ms == 128){
CLINEA 0000H 0001H 0FA7H 0001H 000EH
	cmp	r8,	#080h
	cmpc	r9,	#00h
	bne	_$L708
CBLOCK 252 4 4007

;;	timerThres = 0xFFFF;
CLINEA 0000H 0001H 0FA8H 0002H 0015H
	mov	bp,	#-1

;;	TimeFlag = 0;
CLINEA 0000H 0001H 0FA9H 0002H 000EH
	mov	r6,	#00h
CBLOCKEND 252 4 4010

;;}
CLINEA 0000H 0000H 0FAAH 0001H 0001H
_$L708 :

;;if(ms > 128){
CLINEA 0000H 0001H 0FABH 0001H 000DH
	cmp	r8,	#080h
	cmpc	r9,	#00h
	ble	_$L718
CBLOCK 252 5 4011

;;	while(TempSec > 128){
CLINEA 0000H 0000H 0FACH 0001H 0001H
	bal	_$L728

;;	while(TempSec > 128){
CLINEA 0000H 0000H 0FACH 0002H 0016H
_$L714 :
CBLOCK 252 6 4012

;;		TempSec -= 128;
CLINEA 0000H 0001H 0FADH 0003H 0011H
	add	r0,	#080h
	addc	r1,	#0ffh
	mov	er4,	er0

;;		TimeFlag++;
CLINEA 0000H 0000H 0FAEH 0003H 000DH
	add	r6,	#01h
CBLOCKEND 252 6 4015

;;	while(TempSec > 128){
CLINEA 0000H 0000H 0FACH 0001H 0001H
_$L728 :

;;	while(TempSec > 128){
CLINEA 0000H 0000H 0FACH 000EH 0013H
	mov	er0,	er4
	cmp	r4,	#080h
	cmpc	r5,	#00h
	bgt	_$L714

;;	if(TempSec != 0){
CLINEA 0000H 0001H 0FB0H 0002H 0012H
	mov	er4,	er4
	beq	_$L716
CBLOCK 252 7 4016

;;		timerThres = 0x1FF * TempSec;
CLINEA 0000H 0001H 0FB1H 0003H 001FH
	sllc	r1,	#07h
	sll	r0,	#07h
	sllc	r1,	#02h
	sll	r0,	#02h
	sub	r0,	r4
	subc	r1,	r5
	mov	bp,	er0
CBLOCKEND 252 7 4018

;;	else{
CLINEA 0000H 0001H 0FB3H 0002H 0006H
	bal	_$L718
_$L716 :
CBLOCK 252 8 4019

;;		timerThres = 0xFFFF;
CLINEA 0000H 0001H 0FB4H 0003H 0016H
	mov	bp,	#-1

;;		TimeFlag--;
CLINEA 0000H 0000H 0FB5H 0003H 000DH
	add	r6,	#0ffh
CBLOCKEND 252 8 4022

;;	}
CLINEA 0000H 0000H 0FB6H 0002H 0002H
_$L718 :
CBLOCKEND 252 5 4023

;;	main_clrWDT();	
CLINEA 0000H 0001H 0FBAH 0002H 0010H
	bl	_main_clrWDT

;;	tm_startAB();
CLINEA 0000H 0001H 00D1H 0002H 000AH
	mov	r0,	#00h
	st	r0,	0f8e9h

;;	tm_startAB();
CLINEA 0000H 0000H 00D2H 0002H 000BH
	sb	0f8ebh.0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0120H 0002H 001BH
	l	r0,	0f8e9h
	mov	r1,	#00h
	mov	er2,	er0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0121H 0002H 0014H
	l	r0,	0f8edh
	or	r3,	r0

;;	timer = tm_getABCounter();
CLINEA 0000H 0000H 0122H 0002H 000CH
	mov	er0,	er2

;;	while(timer < timerThres){
CLINEA 0000H 0001H 0FBEH 0002H 001BH
	bal	_$L721
_$L723 :
CBLOCK 252 9 4030

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0120H 0002H 001BH
	l	r0,	0f8e9h
	mov	r1,	#00h
	mov	er2,	er0

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0121H 0002H 0014H
	l	r0,	0f8edh
	or	r3,	r0

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0122H 0002H 000CH
	mov	er0,	er2

;;		timer = tm_getABCounter();
CLINEA 0000H 0000H 0FBFH 0003H 001CH
CBLOCKEND 252 9 4033

;;	}
CLINEA 0000H 0000H 0FC1H 0002H 0002H
_$L721 :

;;	while(timer < timerThres){
CLINEA 0000H 0000H 0FBEH 000EH 0013H
	cmp	er0,	bp
	blt	_$L723

;;	if(TimeFlag !=0){
CLINEA 0000H 0001H 0FC2H 0002H 0012H
	cmp	r6,	#00h
	beq	_$L726

;;		tm_stopAB();
CLINEA 0000H 0001H 0105H 0002H 000BH
	rb	0f8ebh.0

;;		TimeFlag--;
CLINEA 0000H 0000H 0FC4H 0003H 000DH
	add	r6,	#0ffh

;;		timerThres = 0xFFFF;
CLINEA 0000H 0001H 0FC5H 0003H 0016H
	mov	bp,	#-1

;;		goto TimerRestart;
CLINEA 0000H 0001H 0FC6H 0003H 0014H
	bal	_$L718

;;	}
CLINEA 0000H 0000H 0FC7H 0002H 0002H
_$L726 :
CBLOCKEND 252 2 4041

;;}
CLINEA 0000H 0001H 0FC9H 0001H 0001H
	pop	er8
	pop	bp
	pop	xr4
	pop	pc
CBLOCKEND 252 1 4041
CFUNCTIONEND 252


	rseg $$NOPus$main
CFUNCTION 253

_NOPus	:
CBLOCK 253 1 4051

;;{
CLINEA 0000H 0001H 0FD3H 0001H 0001H
CBLOCK 253 2 4051

;;	timer_us = 0;
CLINEA 0000H 0001H 0FD4H 0002H 000EH
	mov	er0,	#0 
	st	er0,	NEAR _timer_us

;;	TM8C = 0x00;
CLINEA 0000H 0001H 0FD5H 0002H 000DH
	st	r0,	0f8e1h

;;	ETM8 = 1;
CLINEA 0000H 0001H 0FD6H 0002H 000AH
	sb	0f013h.2

;;	while(timer_us == 0);
CLINEA 0000H 0000H 0FD7H 0002H 0016H
_$L732 :

;;	while(timer_us == 0);
CLINEA 0000H 0000H 0FD7H 000EH 0013H
	l	er0,	NEAR _timer_us
	beq	_$L732
CBLOCKEND 253 2 4056

;;}
CLINEA 0000H 0001H 0FD8H 0001H 0001H
	rt
CBLOCKEND 253 1 4056
CFUNCTIONEND 253


	rseg $$NOP1000$main
CFUNCTION 254

_NOP1000	:
CBLOCK 254 1 4059

;;{
CLINEA 0000H 0001H 0FDBH 0001H 0001H
CBLOCK 254 2 4059
CLOCAL 4AH 0002H 0000H 0002H "ONCNT" 02H 00H 01H
CBLOCKEND 254 2 4065

;;}
CLINEA 0000H 0001H 0FE1H 0001H 0001H
	rt
CBLOCKEND 254 1 4065
CFUNCTIONEND 254


	rseg $$approx_arctan2$main
CFUNCTION 255

_approx_arctan2	:
CBLOCK 255 1 4068

;;{
CLINEA 0000H 0001H 0FE4H 0001H 0001H
	push	lr
	push	fp
	mov	fp,	sp
	add	sp,	#-028
	push	xr8
	push	xr4
	mov	er8,	er0
	mov	er10,	er2
CBLOCK 255 2 4068
CRET 0026H
CARGUMENT 47H 0004H 2928H "y" 02H 00H 03H
CARGUMENT 43H 0004H 0004H "x" 02H 00H 03H
CLOCAL 43H 0004H 001CH 0002H "YoverX" 02H 00H 03H
CLOCAL 47H 0004H 2726H 0002H "result" 02H 00H 03H

;;	float YoverX = y/x;
CLINEA 0000H 0001H 0FE5H 0002H 0014H
	push	xr0
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	bl	__fdivu8sw
	add	sp,	#4 
	pop	xr0
	st	er0,	-28[fp]
	st	er2,	-26[fp]

;;	float result = 0;
CLINEA 0000H 0001H 0FE6H 0002H 0012H
	mov	er4,	#0 
	mov	er6,	#0 

;;	if(x>0){
CLINEA 0000H 0001H 0FE8H 0002H 0009H
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bgt	_$M79
	b	_$L740
_$M79 :
CBLOCK 255 3 4072

;;		result = (0.97239*YoverX)-(0.19195*pow(YoverX,3));
CLINEA 0000H 0000H 0FE9H 0003H 0034H
	l	er0,	-28[fp]
	l	er2,	-26[fp]
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	pop	qr0
	lea	-8[fp]
	st	qr0,	[ea]
	push	qr0
	mov	r0,	#059h
	mov	r1,	#0a3h
	mov	r2,	#01eh
	mov	r3,	#0a2h
	mov	r4,	#0d1h
	mov	r5,	#01dh
	mov	r6,	#0efh
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	pop	qr0
	lea	-16[fp]
	st	qr0,	[ea]
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#08h
	mov	r7,	#040h
	push	qr0
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	fp
	add	er0,	#-24
	bl	_pow
	add	sp,	#16
	lea	-16[fp]
	l	qr0,	[ea]
	push	qr0
	lea	-24[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#036h
	mov	r1,	#0cdh
	mov	r2,	#03bh
	mov	r3,	#04eh
	mov	r4,	#0d1h
	mov	r5,	#091h
	mov	r6,	#0c8h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dsubu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 3 4074

;;	}
CLINEA 0000H 0000H 0FEAH 0002H 0002H
_$L740 :

;;	if((x<0)&&(y>=0)){
CLINEA 0000H 0001H 0FEBH 0002H 0013H
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$M80
	b	_$L742
_$M80 :
	push	xr8
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$M81
	b	_$L742
_$M81 :
CBLOCK 255 4 4075

;;		result = (0.97239*YoverX)-(0.19195*pow(YoverX,3))+3.14;
CLINEA 0000H 0000H 0FECH 0003H 0039H
	l	er0,	-28[fp]
	l	er2,	-26[fp]
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	pop	qr0
	lea	-8[fp]
	st	qr0,	[ea]
	push	qr0
	mov	r0,	#059h
	mov	r1,	#0a3h
	mov	r2,	#01eh
	mov	r3,	#0a2h
	mov	r4,	#0d1h
	mov	r5,	#01dh
	mov	r6,	#0efh
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	pop	qr0
	lea	-16[fp]
	st	qr0,	[ea]
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#08h
	mov	r7,	#040h
	push	qr0
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	fp
	add	er0,	#-24
	bl	_pow
	add	sp,	#16
	lea	-16[fp]
	l	qr0,	[ea]
	push	qr0
	lea	-24[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#036h
	mov	r1,	#0cdh
	mov	r2,	#03bh
	mov	r3,	#04eh
	mov	r4,	#0d1h
	mov	r5,	#091h
	mov	r6,	#0c8h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dsubu8sw
	add	sp,	#8 
	mov	r0,	#01fh
	mov	r1,	#085h
	mov	r2,	#0ebh
	mov	r3,	#051h
	mov	r4,	#0b8h
	mov	r5,	#01eh
	mov	r6,	#09h
	mov	r7,	#040h
	push	qr0
	bl	__daddu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 4 4077

;;	}	
CLINEA 0000H 0000H 0FEDH 0002H 0003H
_$L742 :

;;	if((y<0)&&(x<0)){
CLINEA 0000H 0001H 0FEEH 0002H 0012H
	push	xr8
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$M82
	b	_$L749
_$M82 :
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	blt	_$M83
	b	_$L749
_$M83 :
CBLOCK 255 5 4078

;;		result = (0.97239*YoverX)-(0.19195*pow(YoverX,3))-3.14;
CLINEA 0000H 0000H 0FEFH 0003H 0039H
	l	er0,	-28[fp]
	l	er2,	-26[fp]
	push	xr0
	add	sp,	#-4
	bl	__ftodu8sw
	pop	qr0
	lea	-8[fp]
	st	qr0,	[ea]
	push	qr0
	mov	r0,	#059h
	mov	r1,	#0a3h
	mov	r2,	#01eh
	mov	r3,	#0a2h
	mov	r4,	#0d1h
	mov	r5,	#01dh
	mov	r6,	#0efh
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	pop	qr0
	lea	-16[fp]
	st	qr0,	[ea]
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#08h
	mov	r7,	#040h
	push	qr0
	lea	-8[fp]
	l	qr0,	[ea]
	push	qr0
	mov	er0,	fp
	add	er0,	#-24
	bl	_pow
	add	sp,	#16
	lea	-16[fp]
	l	qr0,	[ea]
	push	qr0
	lea	-24[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#036h
	mov	r1,	#0cdh
	mov	r2,	#03bh
	mov	r3,	#04eh
	mov	r4,	#0d1h
	mov	r5,	#091h
	mov	r6,	#0c8h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dsubu8sw
	add	sp,	#8 
	mov	r0,	#01fh
	mov	r1,	#085h
	mov	r2,	#0ebh
	mov	r3,	#051h
	mov	r4,	#0b8h
	mov	r5,	#01eh
	mov	r6,	#09h
	mov	r7,	#0c0h
	push	qr0
	bl	__daddu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 5 4080

;;	}
CLINEA 0000H 0000H 0FF0H 0002H 0002H
_$L749 :

;;	if((y>0)&&(x==0)){
CLINEA 0000H 0001H 0FF1H 0002H 0013H
	push	xr8
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L756
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bne	_$L756
CBLOCK 255 6 4081

;;		result = 1.57;
CLINEA 0000H 0001H 0FF2H 0003H 0010H
	mov	r0,	#0c3h
	mov	r1,	#0f5h
	mov	r2,	#0c8h
	mov	r3,	#03fh
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 6 4083

;;	}
CLINEA 0000H 0000H 0FF3H 0002H 0002H
_$L756 :

;;	if((y<0)&&(x==0)){
CLINEA 0000H 0001H 0FF4H 0002H 0013H
	push	xr8
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L763
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bne	_$L763
CBLOCK 255 7 4084

;;		result = -1.57;
CLINEA 0000H 0001H 0FF5H 0003H 0011H
	mov	r0,	#0c3h
	mov	r1,	#0f5h
	mov	r2,	#0c8h
	mov	r3,	#0bfh
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 7 4086

;;	}
CLINEA 0000H 0000H 0FF6H 0002H 0002H
_$L763 :

;;	if((x==0)&&(y==0)){			//we made this up....
CLINEA 0000H 0001H 0FF7H 0002H 002CH
	l	er0,	4[fp]
	l	er2,	6[fp]
	push	xr0
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bne	_$L770
	push	xr8
	mov	er0,	#0 
	mov	er2,	#0 
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bne	_$L770
CBLOCK 255 8 4087

;;		result = (0.97239*YoverX)-(0.19195*pow(YoverX,3));
CLINEA 0000H 0000H 0FFBH 0003H 0034H
	mov	er0,	#0 
	mov	er2,	#0 
	mov	er4,	#0 
	mov	r6,	#08h
	mov	r7,	#040h
	push	qr0
	mov	r6,	#0f0h
	mov	r7,	#03fh
	push	qr0
	mov	er0,	fp
	add	er0,	#-16
	bl	_pow
	add	sp,	#16
	mov	r0,	#059h
	mov	r1,	#0a3h
	mov	r2,	#01eh
	mov	r3,	#0a2h
	mov	r4,	#0d1h
	mov	r5,	#01dh
	mov	r6,	#0efh
	push	qr0
	lea	-16[fp]
	l	qr0,	[ea]
	push	qr0
	mov	r0,	#036h
	mov	r1,	#0cdh
	mov	r2,	#03bh
	mov	r3,	#04eh
	mov	r4,	#0d1h
	mov	r5,	#091h
	mov	r6,	#0c8h
	mov	r7,	#03fh
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dsubu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	mov	er4,	er0
	mov	er6,	er2
CBLOCKEND 255 8 4092

;;	}
CLINEA 0000H 0000H 0FFCH 0002H 0002H
_$L770 :

;;	result *= 57.29;
CLINEA 0000H 0001H 0FFDH 0002H 0011H
	push	xr4
	add	sp,	#-4
	bl	__ftodu8sw
	mov	r0,	#085h
	mov	r1,	#0ebh
	mov	r2,	#051h
	mov	r3,	#0b8h
	mov	r4,	#01eh
	mov	r5,	#0a5h
	mov	r6,	#04ch
	mov	r7,	#040h
	push	qr0
	bl	__dmulu8sw
	add	sp,	#8 
	bl	__dtofu8sw
	add	sp,	#4 
	pop	xr0
	mov	er4,	er0
	mov	er6,	er2

;;	if(result > 45){
CLINEA 0000H 0001H 0FFFH 0002H 0011H
	push	xr0
	mov	er0,	#0 
	mov	r2,	#034h
	mov	r3,	#042h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	ble	_$L777
CBLOCK 255 9 4095

;;		result = 45;
CLINEA 0000H 0001H 1000H 0003H 000EH
	mov	r2,	#034h
	mov	r3,	#042h
	mov	er4,	#0 
	mov	er6,	er2
CBLOCKEND 255 9 4097

;;	}
CLINEA 0000H 0000H 1001H 0002H 0002H
_$L777 :

;;	if(result < -45){
CLINEA 0000H 0001H 1002H 0002H 0012H
	push	xr4
	mov	er0,	#0 
	mov	r2,	#034h
	mov	r3,	#0c2h
	push	xr0
	bl	__fcmpu8sw
	add	sp,	#8 
	mov	psw,	r0
	bge	_$L779
CBLOCK 255 10 4098

;;		result = -45;
CLINEA 0000H 0001H 1003H 0003H 000FH
	mov	r2,	#034h
	mov	r3,	#0c2h
	mov	er4,	#0 
	mov	er6,	er2
CBLOCKEND 255 10 4100

;;	}
CLINEA 0000H 0000H 1004H 0002H 0002H
_$L779 :

;;	return(result);
CLINEA 0000H 0001H 1006H 0002H 0010H
	mov	er0,	er4
	mov	er2,	er6
CBLOCKEND 255 2 4103

;;}
CLINEA 0000H 0000H 1007H 0001H 0001H
	pop	xr4
	pop	xr8
	mov	sp,	fp
	pop	fp
	pop	pc
CBLOCKEND 255 1 4103
CFUNCTIONEND 255


	rseg $$NVARmain
_$ST0 :
	ds	02h
	public _AccelSensorControlPID_D
	public _AccelSensorControlPID_I
	public _AccelSensorControlPID_P
	public _Shutdown
	public _NOPms
	public _NOPus
	public _approx_arctan2
	public _checkI2C
	public _main_clrWDT
	public _Accel_PID_XYChangeFlag
	public _main_reqNotHalt
	public _ReturnMagData
	public _DistanceSensorControl
	public _RangeSensorControlPID
	public _PortA_Digital_Inputs
	public _ESC2_PWM
	public _Get_AccGyroData
	public _main
	public _ClearVariables
	public _PortD_Low
	public _NOP1000
	public _ESC1_PWM
	public _CheckSafetyLimitUnscaled
	public _CalibrateAccel
	public _Get_RangeData
	public _PortC_Low
	public _CheckSafetyLimit
	public _ESC4_PWM
	public _UARTTunePID
	public _Get_PingData
	public _SerialOutCoefficients
	public _PortB_Low
	public _CalibrateMotors
	public _ReturnAccelData
	public _ESC3_PWM
	public _CalibrateGyro
	public _RampUpMotorTest
	public _NOP
	public _Emit_Warning
	public _InitializeTone
	public _PortA_Low
	public _analog_comparator
	public _Run_AccGyroCF
	public _SoftStart
	public _ReturnSensorData
	__flgUartFin comm data 01h #00h
	__flgI2CFin comm data 01h #00h
	__reqNotHalt comm data 01h #00h
	extrn code near : _abs
	extrn code near : _irq_init
	extrn code near : _uart_PortSet
	extrn code near : _i2c_stop
	extrn code near : _i2c_startReceive
	extrn code near : _uart_startReceive
	extrn code near : _pow
	extrn code near : _uart_init
	extrn code near : _i2c_continue
	extrn code near : _irq_di
	extrn code near : _irq_ei
	extrn code near : _sscanf_nn
	extrn code near : _irq_setHdr
	extrn code near : _sprintf_nn
	extrn code near : _uart_stop
	extrn code near : _uart_startSend
	extrn code near : _i2c_startSend
	extrn code near : _uart_continue
	extrn code near : _atan2
	extrn code near : _i2c_init
	extrn code near : _tm_init
	extrn code : $$start_up

	cseg #00h at 02h
	dw	$$start_up

	rseg $$NINITTAB
	db	068h
	db	06bh
	db	00h
	db	01ch
	db	00h
	align
	dw	00h
	dw	04680h
	db	01bh
	db	08h
	dw	0126fh
	dw	04283h
	db	01ah
	db	04h
	db	019h
	db	013h
	db	038h
	db	01h
	db	00h
	db	00h
	db	03bh
	align
	dw	00h
	dw	00h
	db	00h
	db	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	db	01eh
	db	00h
	db	078h
	db	01h
	db	060h
	db	02h
	db	01h
	db	03h
	db	09h
	align
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	08f5ch
	dw	03fc2h
	dw	0126fh
	dw	0be03h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	db	070h
	db	051h
	dw	00h
	dw	0ah
	dw	0ah
	dw	00h
	dw	0428ch
	dw	00h
	dw	04248h
	dw	00h
	dw	04370h
	dw	047aeh
	dw	0bde1h
	dw	047aeh
	dw	03de1h
	dw	047aeh
	dw	0bde1h
	dw	047aeh
	dw	03de1h
	dw	00h
	dw	03f80h
	dw	08000h
	dw	043b3h
	dw	00h
	dw	04334h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	051ech
	dw	03f78h
	dw	0c28fh
	dw	03cf5h
	db	00h
	db	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	db	01h
	align
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	03f80h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	042beh
	dw	00h
	dw	041c8h
	dw	00h
	dw	04198h
	dw	00h
	dw	042beh
	dw	00h
	dw	041c8h
	dw	00h
	dw	04198h
	db	00h
	db	00h
	db	00h
	align
	dw	03fffh
	dw	03fffh
	dw	03fffh
	dw	03fffh
	db	00h
	align
	dw	00h
	dw	0428ch
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	db	00h
	db	00h
	dw	03a98h
	dw	01f40h
	dw	020d0h
	dw	04268h
	db	00h
	db	00h
	dw	00h
	dw	03a98h
	dw	02904h
	dw	02134h
	dw	0ff88h
	dw	0ff9ch
	dw	032h
	db	00h
	align
	dw	00h
	db	00h
	align
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h
	dw	00h

	rseg $$TAB_uartSetParam$main
__uartSetParam :
	dw	0e100h
	dw	00h
	db	00h
	db	02h
	db	00h
	db	00h
	db	00h
	align

	rseg $$TAB$$S224$main
$$S224 :
	DB	"%f,%f,%f,%f,%f,%f,%f,%u", 00H

	rseg $$TAB$$S237$main
$$S237 :
	DB	"%f,%f,%f", 00H

	rseg $$TAB$$S250$main
$$S250 :
	DB	"%f", 00H

	rseg $$TAB$$S268$main
$$S268 :
	DB	"Gyro Calibration: Please Keep the Quad Flat and Return Any 2 chars to Start", 00H

	rseg $$TAB$$S297$main
$$S297 :
	DB	"Gyro Calibration Complete!", 00H

	rseg $$TAB$$S313$main
$$S313 :
	DB	"Accel Calibration: Keep Quad Flat! Return any 2 chars to Start", 00H

	rseg $$TAB$$S344$main
$$S344 :
	DB	"Accel Calibration: Tilt the Quad 90deg in the ROLL Direction! Return any 2 chars to Start", 00H

	rseg $$TAB$$S369$main
$$S369 :
	DB	"Accel Calibration: Tilt the Quad 90deg in the PITCH direction! Return any 2 chars to Start", 00H

	rseg $$TAB$$S394$main
$$S394 :
	DB	"Accel Calibration Complete!", 00H

	rseg $$TAB$$S416$main
$$S416 :
	DB	"Current Settings: kp=%f,ki=%f,kd=%f,a1=%f,a2=%f,Pb=%u,Db=%u", 00H

	rseg $$TAB$$S472$main
$$S472 :
	DB	"    New Settings: kp=%f,ki=%f,kd=%f,a1=%f,a2=%f,Pb=%u,Db=%u", 00H

	rseg $$NINITVAR
_MPU6050Address :
	ds	01h
_AccGyro_PWRMGMT1REG :
	ds	01h
_AccGyro_PWRMGMT1REG_Contents :
	ds	01h
_AccGyro_AccelConfig :
	ds	01h
_AccGyro_AccelConfig_Contents :
	ds	01h
	align
_AccGyro_AccelScaling :
	ds	04h
_AccGyro_GyroConfig :
	ds	01h
_AccGyro_GyroConfig_Contents :
	ds	01h
_AccGyro_GyroScaling :
	ds	04h
_AccGyro_GyroAccelLPF :
	ds	01h
_AccGyro_GyroAccelLPF_Contents :
	ds	01h
_AccGyro_GyroAccel_SMPRTDIV :
	ds	01h
_AccGyro_GyroAccelLPF_SMPRTDIVCo :
	ds	01h
_AccGyro_INTENABLEReg :
	ds	01h
_AccGyro_INTENABLEReg_contents :
	ds	01h
_AccGYRO_Test :
	ds	01h
_AccGyro_ReadFlag :
	ds	01h
_AccGyro_ReadData :
	ds	01h
	align
_Temp_out :
	ds	04h
_Accel_SavIndex :
	ds	01h
_AccGyro_CF_FlagCounter :
	ds	01h
_CF_Accel_XRoll :
	ds	04h
_CF_Accel_YPitch :
	ds	04h
_CF_Gyro_XRoll :
	ds	04h
_CF_Gyro_YPitch :
	ds	04h
_CF_Accel_ForceMagApprox :
	ds	04h
_CF_Gyro_CurrentCount :
	ds	04h
_Gyro_Xcal :
	ds	04h
_Gyro_Ycal :
	ds	04h
_Gyro_Zcal :
	ds	04h
_HMC5883Address :
	ds	01h
_Mag_ConfigA :
	ds	01h
_Mag_ConfigA_Contents :
	ds	01h
_Mag_ConfigB :
	ds	01h
_Mag_ConfigB_Contents :
	ds	01h
_Mag_ModeReg :
	ds	01h
_Mag_ModeReg_Contents :
	ds	01h
_Mag_ReadData :
	ds	01h
_Mag_Status :
	ds	01h
	align
_Mag_Xout :
	ds	04h
_Mag_Yout :
	ds	04h
_Mag_Zout :
	ds	04h
_Mag_Angle :
	ds	04h
_Mag_GainFactor :
	ds	04h
_Mag_DeclinationAngle :
	ds	04h
_timer_us :
	ds	02h
_Ping_timer :
	ds	02h
_Ping_out :
	ds	04h
_Range_Address :
	ds	01h
_Range_TakeRangeReading :
	ds	01h
_Range_out :
	ds	02h
_MotorStep :
	ds	02h
_Mag_MotorStep :
	ds	02h
_Range_ZHiThres :
	ds	04h
_Range_ZLoThres :
	ds	04h
_Range_Ceiling :
	ds	04h
_Accel_XLoThres :
	ds	04h
_Accel_XHiThres :
	ds	04h
_Accel_YLoThres :
	ds	04h
_Accel_YHiThres :
	ds	04h
_Mag_CWThres :
	ds	04h
_Mag_CCWThres :
	ds	04h
_Mag_OpposingPole :
	ds	04h
_CF_Gyro_Counter :
	ds	04h
_CF_YPitch :
	ds	04h
_CF_XRoll :
	ds	04h
_CF_HPF :
	ds	04h
_CF_LPF :
	ds	04h
_CF_UseFlag :
	ds	01h
_CF_Counter :
	ds	01h
_CF_YPitch_avg :
	ds	04h
_CF_XRoll_avg :
	ds	04h
_CF_highlow_flag :
	ds	01h
	align
_CF_YPitch_high :
	ds	04h
_CF_XRoll_high :
	ds	04h
_CF_YPitch_low :
	ds	04h
_CF_XRoll_low :
	ds	04h
_CF_avgCnt :
	ds	04h
_CF_StdDev_M_X :
	ds	04h
_CF_StdDev_M_Y :
	ds	04h
_CF_StdDev_Mtmp_X :
	ds	04h
_CF_StdDev_Mtmp_Y :
	ds	04h
_CF_StdDev_S_X :
	ds	04h
_CF_StdDev_S_Y :
	ds	04h
_CF_StdDev_K :
	ds	04h
_Accel_PID_XRollError :
	ds	04h
_Accel_PID_XRollCounter_I :
	ds	02h
_Accel_PID_XRollCounter_D :
	ds	02h
_Accel_PID_XRollErrSum :
	ds	04h
_Accel_PID_XRollErrPrev :
	ds	04h
_Accel_PID_YPitchError :
	ds	04h
_Accel_PID_YPitchCounter_I :
	ds	02h
_Accel_PID_YPitchCounter_D :
	ds	02h
_Accel_PID_YPitchErrSum :
	ds	04h
_Accel_PID_YPitchErrPrev :
	ds	04h
_Accel_PID_XRolldErr :
	ds	04h
_Accel_PID_YPitchdErr :
	ds	04h
_Accel_PID_XRoll_kp :
	ds	04h
_Accel_PID_XRoll_ki :
	ds	04h
_Accel_PID_XRoll_kd :
	ds	04h
_Accel_PID_YPitch_kp :
	ds	04h
_Accel_PID_YPitch_ki :
	ds	04h
_Accel_PID_YPitch_kd :
	ds	04h
_Accel_PID_IFlag :
	ds	01h
_Accel_PID_DFlag :
	ds	01h
_Accel_PID_XYChangeFlag :
	ds	01h
	align
_Accel_PID_Motor1 :
	ds	02h
_Accel_PID_Motor2 :
	ds	02h
_Accel_PID_Motor3 :
	ds	02h
_Accel_PID_Motor4 :
	ds	02h
_Accel_PID_GoCounter :
	ds	01h
	align
_Range_PIDSetpoint :
	ds	04h
_Range_PIDError :
	ds	04h
_Range_PIDCounter :
	ds	02h
_Range_PIDCurrentCount :
	ds	04h
_Range_PIDErrSum :
	ds	04h
_Range_PIDdErr :
	ds	04h
_Range_PIDErrPrev :
	ds	04h
_Range_PIDOutput :
	ds	04h
_Range_PID_kp :
	ds	04h
_Range_PID_ki :
	ds	04h
_Range_PID_kd :
	ds	04h
_TestingEndTimer :
	ds	02h
_Timer8Counter :
	ds	02h
_Accel_PID_PBounds_Var_Pos :
	ds	02h
_Accel_PID_DBounds_Var_Pos :
	ds	02h
_Accel_PID_PBounds_Var_Neg :
	ds	02h
_Accel_PID_DBounds_Var_Neg :
	ds	02h
_PrePIDCount :
	ds	01h
_PWMflag :
	ds	01h
_PWMUpperDutyLimitCalib :
	ds	02h
_PWMLowerDutyLimitCalib :
	ds	02h
_PWMSafeDuty :
	ds	02h
_PWMPeriod :
	ds	02h
_PWMCounter :
	ds	01h
_PWMSensorResPerInc :
	ds	01h
_PWMUpperLowerDiff :
	ds	02h
_PWMUpperDutyLimitRun :
	ds	02h
_PWMIdleDutyRun :
	ds	02h
_PWMLowerDutyLimitRun :
	ds	02h
_PWMtoRPMOffset_Mot2 :
	ds	02h
_PWMtoRPMOffset_Mot3 :
	ds	02h
_PWMtoRPMOffset_Mot4 :
	ds	02h
_IDFlag :
	ds	01h
	align
_$ST1 :
	ds	02h
_$ST2 :
	ds	01h
	align
_$ST3 :
	ds	04h
_$ST4 :
	ds	04h
_$ST5 :
	ds	04h
_$ST6 :
	ds	04h
_$ST7 :
	ds	04h
_$ST8 :
	ds	04h
_$ST9 :
	ds	04h
_$ST10 :
	ds	04h
_$ST11 :
	ds	04h
_$ST12 :
	ds	04h

	rseg $$NVARmain
_RecWorld :
	ds	08h
_SensorReturn :
	ds	0c8h
_Gyro_Zout :
	ds	04h
_Gyro_Yout :
	ds	04h
_NewVar_Str :
	ds	06h
_Accel_Zout_Avg :
	ds	04h
_Accel_Yout_Avg :
	ds	04h
_Accel_Xout_Avg :
	ds	04h
_NewVar :
	ds	04h
_AccGyro_Data :
	ds	0eh
_Range_Output :
	ds	02h
_Accel_Zcal :
	ds	0ch
_Accel_Xcal :
	ds	0ch
_isDemoing :
	ds	02h
_Mag_Data :
	ds	06h
_Accel_Xout :
	ds	044h
_Accel_Ycal :
	ds	0ch
_SensorReturnSM :
	ds	032h
_testI :
	ds	02h
_testD :
	ds	02h
_testP :
	ds	02h
_Accel_Yout :
	ds	044h
_Accel_Zout :
	ds	044h
_Gyro_Xout :
	ds	04h
	extrn code : __faddu8sw
	extrn code : __fsubu8sw
	extrn code : __fnegu8sw
	extrn code : __fcmpu8sw
	extrn code : __fmulu8sw
	extrn code : __fdivu8sw
	extrn code : __fildu8sw
	extrn code : __ftolu8sw
	extrn code : __ftodu8sw
	extrn code : __daddu8sw
	extrn code : __dsubu8sw
	extrn code : __dmulu8sw
	extrn code : __dildu8sw
	extrn code : __dtofu8sw
	extrn code : __fuldu8sw

	end
